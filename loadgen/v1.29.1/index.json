[{"category":null,"content":"Benchmark Testing #  INFINI Loadgen is a lightweight performance testing tool specifically designed for Easysearch, Elasticsearch, and OpenSearch.\nFeatures of Loadgen:\n Robust performance Lightweight and dependency-free Supports template-based parameter randomization Supports high concurrency Supports balanced traffic control at the benchmark end Supports server response validation   Download link: https://release.infinilabs.com/loadgen/\n Loadgen #  Loadgen is easy to use. After the tool is downloaded and decompressed, you will get three files: an executable program, a configuration file loadgen.yml, and a test file loadgen.dsl. The configuration file example is as follows:\nenv: ES_USERNAME: elastic ES_PASSWORD: elastic ES_ENDPOINT: http://localhost:8000 The test file example is as follows:\n# runner: { # // total_rounds: 1 # no_warm: false, # // Whether to log all requests # log_requests: false, # // Whether to log all requests with the specified response status # log_status_codes: [0, 500], # assert_invalid: false, # assert_error: false, # }, # variables: [ # { # name: \u0026#34;ip\u0026#34;, # type: \u0026#34;file\u0026#34;, # path: \u0026#34;dict/ip.txt\u0026#34;, # // Replace special characters in the value # replace: { # \u0026#39;\u0026#34;\u0026#39;: \u0026#39;\\\\\u0026#34;\u0026#39;, # \u0026#39;\\\\\u0026#39;: \u0026#39;\\\\\\\\\u0026#39;, # }, # }, # { # name: \u0026#34;id\u0026#34;, # type: \u0026#34;sequence\u0026#34;, # }, # { # name: \u0026#34;id64\u0026#34;, # type: \u0026#34;sequence64\u0026#34;, # }, # { # name: \u0026#34;uuid\u0026#34;, # type: \u0026#34;uuid\u0026#34;, # }, # { # name: \u0026#34;now_local\u0026#34;, # type: \u0026#34;now_local\u0026#34;, # }, # { # name: \u0026#34;now_utc\u0026#34;, # type: \u0026#34;now_utc\u0026#34;, # }, # { # name: \u0026#34;now_utc_lite\u0026#34;, # type: \u0026#34;now_utc_lite\u0026#34;, # }, # { # name: \u0026#34;now_unix\u0026#34;, # type: \u0026#34;now_unix\u0026#34;, # }, # { # name: \u0026#34;now_with_format\u0026#34;, # type: \u0026#34;now_with_format\u0026#34;, # // https://programming.guide/go/format-parse-string-time-date-example.html # format: \u0026#34;2006-01-02T15:04:05-0700\u0026#34;, # }, # { # name: \u0026#34;suffix\u0026#34;, # type: \u0026#34;range\u0026#34;, # from: 10, # to: 1000, # }, # { # name: \u0026#34;bool\u0026#34;, # type: \u0026#34;range\u0026#34;, # from: 0, # to: 1, # }, # { # name: \u0026#34;list\u0026#34;, # type: \u0026#34;list\u0026#34;, # data: [\u0026#34;medcl\u0026#34;, \u0026#34;abc\u0026#34;, \u0026#34;efg\u0026#34;, \u0026#34;xyz\u0026#34;], # }, # { # name: \u0026#34;id_list\u0026#34;, # type: \u0026#34;random_array\u0026#34;, # variable_type: \u0026#34;number\u0026#34;, // number/string # variable_key: \u0026#34;suffix\u0026#34;, // variable key to get array items # square_bracket: false, # size: 10, // how many items for array # }, # { # name: \u0026#34;str_list\u0026#34;, # type: \u0026#34;random_array\u0026#34;, # variable_type: \u0026#34;number\u0026#34;, // number/string # variable_key: \u0026#34;suffix\u0026#34;, // variable key to get array items # square_bracket: true, # size: 10, // how many items for array # replace: { # // Use \u0026#39; instead of \u0026#34; for string quotes # \u0026#39;\u0026#34;\u0026#39;: \u0026#34;\u0026#39;\u0026#34;, # // Use {} instead of [] as array brackets # \u0026#34;[\u0026#34;: \u0026#34;{\u0026#34;, # \u0026#34;]\u0026#34;: \u0026#34;}\u0026#34;, # }, # }, # ], POST $[[env.ES_ENDPOINT]]/medcl/_search { \u0026quot;track_total_hits\u0026quot;: true, \u0026quot;size\u0026quot;: 0, \u0026quot;query\u0026quot;: { \u0026quot;terms\u0026quot;: { \u0026quot;patent_id\u0026quot;: [ $[[id_list]] ] } } }\nrequest: { runtime_variables: {batch_no: \u0026quot;uuid\u0026quot;}, runtime_body_line_variables: {routing_no: \u0026quot;uuid\u0026quot;}, basic_auth: { username: \u0026quot;$[[env.ES_USERNAME]]\u0026quot;, password: \u0026quot;$[[env.ES_PASSWORD]]\u0026quot;, }, }, Running Mode Settings #\n By default, Loadgen runs in performance testing mode, repeating all requests in requests for the specified duration (-d). If you only need to check the test results once, you can set the number of executions of requests by runner.total_rounds.\nHTTP Header Handling #  By default, Loadgen will automatically format the HTTP response headers (user-agent: xxx -\u0026gt; User-Agent: xxx). If you need to precisely determine the response headers returned by the server, you can disable this behavior by setting runner.disable_header_names_normalizing.\nUsage of Variables #  In the above configuration, variables is used to define variable parameters, identified by name. In a constructed request, $[[Variable name]] can be used to access the value of the variable. The currently supported variable types are:\n   Type Description Parameters     file Load variables from file path: the path of the data files\ndata: a list of values, will get appended to the end of the data specified by path file   list Defined variables inline use data to define a string array   sequence 32-bit Variable of the auto incremental numeric type from: the minimum of the values\nto: the maximum of the values   sequence64 64-bit Variable of the auto incremental numeric type from: the minimum of the values\nto: the maximum of the values   range Variable of the range numbers, support parameters from and to to define the range from: the minimum of the values\nto: the maximum of the values   random_array Generate a random array, data elements come from the variable specified by variable_key variable_key: data source variable\nsize: length of the output array\nsquare_bracket: true/false, whether the output value needs [ and ]\nstring_bracket: string, the specified string will be attached before and after the output element   uuid UUID string type variable    now_local Current time, local time zone    now_utc Current time, UTC time zone. Output format: 2006-01-02 15:04:05.999999999 -0700 MST    now_utc_lite Current time, UTC time zone. Output format: 2006-01-02T15:04:05.000    now_unix Current time, Unix timestamp    now_with_format Current time, supports custom format parameter to format the time string, such as: 2006-01-02T15:04:05-0700 format: output time format ( example)    Variable Usage Example #  Variable parameters of the file type are loaded from an external text file. One variable parameter occupies one line. When one variable of the file type is accessed, one variable value is taken randomly. An example of the variable format is as follows:\n# test/user.txt medcl elastic Tips about how to generate a random string of fixed length, such as 1024 per line:\nLC_CTYPE=C tr -dc A-Za-z0-9_\\!\\@\\#\\$\\%\\^\\\u0026amp;\\*\\(\\)-+= \u0026lt; /dev/random | head -c 1024 \u0026gt;\u0026gt; 1k.txt Environment Variables #  Loadgen supports loading and using environment variables. You can specify the default values in the loadgen.dsl configuration. Loadgen will overwrite the variables at runtime if they are also specified by the command-line environment.\nThe environment variables can be accessed by $[[env.ENV_KEY]]:\n#// Configure default values for environment variables # env: { # ES_USERNAME: \u0026#34;elastic\u0026#34;, # ES_PASSWORD: \u0026#34;elastic\u0026#34;, # ES_ENDPOINT: \u0026#34;http://localhost:8000\u0026#34;, # }, #// Use runtime variables GET $[[env.ES_ENDPOINT]]/medcl/_search {\u0026quot;query\u0026quot;: {\u0026quot;match\u0026quot;: {\u0026quot;name\u0026quot;: \u0026quot;$[[user]]\u0026quot;}}}\nrequest: { // Use runtime variables basic_auth: { username: \u0026quot;$[[env.ES_USERNAME]]\u0026quot;, password: \u0026quot;$[[env.ES_PASSWORD]]\u0026quot;, }, }, Request Definition #\n The requests node is used to set requests to be executed by Loadgen in sequence. Loadgen supports fixed-parameter requests and requests constructed using template-based variable parameters. The following is an example of a common query request:\nGET http://localhost:8000/medcl/_search?q=name:$[[user]] # request: { # username: elastic, # password: pass, # }, In the above query, Loadgen conducts queries based on the medcl index and executes one query based on the name field. The value of each request is from the random variable user.\nSimulating Bulk Ingestion #  It is very easy to use Loadgen to simulate bulk ingestion. Configure one index operation in the request body and then use the body_repeat_times parameter to randomly replicate several parameterized requests to complete the preparation of a batch of requests. See the following example.\nPOST http://localhost:8000/_bulk {\u0026#34;index\u0026#34;: {\u0026#34;_index\u0026#34;: \u0026#34;medcl-y4\u0026#34;, \u0026#34;_type\u0026#34;: \u0026#34;doc\u0026#34;, \u0026#34;_id\u0026#34;: \u0026#34;$[[uuid]]\u0026#34;}} {\u0026#34;id\u0026#34;: \u0026#34;$[[id]]\u0026#34;, \u0026#34;field1\u0026#34;: \u0026#34;$[[user]]\u0026#34;, \u0026#34;ip\u0026#34;: \u0026#34;$[[ip]]\u0026#34;, \u0026#34;now_local\u0026#34;: \u0026#34;$[[now_local]]\u0026#34;, \u0026#34;now_unix\u0026#34;: \u0026#34;$[[now_unix]]\u0026#34;} # request: { # basic_auth: { # username: \u0026#34;test\u0026#34;, # password: \u0026#34;testtest\u0026#34;, # }, # body_repeat_times: 1000, # }, Response Assertions #  You can use the assert configuration to check the response values. assert now supports most of all the condition checkers of INFINI Gateway.\nGET http://localhost:8000/medcl/_search?q=name:$[[user]] # request: { # basic_auth: { # username: \u0026#34;test\u0026#34;, # password: \u0026#34;testtest\u0026#34;, # }, # }, # assert: { # _ctx.response.status: 201, # }, The\nresponse value can be accessed from the _ctx value, currently it contains these values:\n   Parameter Description     _ctx.response.status HTTP response status code   _ctx.response.header HTTP response headers   _ctx.response.body HTTP response body text   _ctx.response.body_json If the HTTP response body is a valid JSON string, you can access the JSON fields by body_json   _ctx.elapsed The time elapsed since request sent to the server (milliseconds)    If the request failed (e.g. the host is not reachable), Loadgen will record it under Number of Errors as part of the testing output. If you configured runner.assert_error: true, Loadgen will exit as exit(2) when there\u0026rsquo;re any requests failed.\nIf the assertion failed, Loadgen will record it under Number of Invalid as part of the testing output and skip the subsequent requests in this round. If you configured runner.assert_invalid: true, Loadgen will exit as exit(1) when there\u0026rsquo;re any assertions failed.\nDynamic Variable Registration #  Each request can use register to dynamically set the variables based on the response value, a common usage is to update the parameters of the later requests based on the previous responses.\nIn the below example, we\u0026rsquo;re registering the response value _ctx.response.body_json.test.settings.index.uuid of the $[[env.ES_ENDPOINT]]/test to the index_id variable, then we can access it by $[[index_id]].\nGET $[[env.ES_ENDPOINT]]/test # register: [ # {index_id: \u0026#34;_ctx.response.body_json.test.settings.index.uuid\u0026#34;}, # ], # assert: (200, {}), Running the Benchmark #  Run the Loadgen program to perform the benchmark test as follows:\n$ loadgen -d 30 -c 100 -compress -run loadgen.dsl\n / / //\\ / / _ \\ //\\ \\\n/ / // ///\\ / /\\ / ///\\ / / / / /__/ _// _ / /// /\\/// /\\ / _|/_/ _/,'___/_/_\\ /\n[LOADGEN] A http load generator and testing suit. [LOADGEN] 1.0.0_SNAPSHOT, 83f2cb9, Sun Jul 4 13:52:42 2021 +0800, medcl, support single item in dict files [07-19 16:15:00] [INF] [instance.go:24] workspace: data/loadgen/nodes/0 [07-19 16:15:00] [INF] [loader.go:312] warmup started [07-19 16:15:00] [INF] [app.go:306] loadgen now started. [07-19 16:15:00] [INF] [loader.go:316] [GET] http://localhost:8000/medcl/_search [07-19 16:15:00] [INF] [loader.go:317] status: 200,\u0026lt;nil\u0026gt;,{\u0026quot;took\u0026quot;:1,\u0026quot;timed_out\u0026quot;:false,\u0026quot;_shards\u0026quot;:{\u0026quot;total\u0026quot;:1,\u0026quot;successful\u0026quot;:1,\u0026quot;skipped\u0026quot;:0,\u0026quot;failed\u0026quot;:0},\u0026quot;hits\u0026quot;:{\u0026quot;total\u0026quot;:{\u0026quot;value\u0026quot;:0,\u0026quot;relation\u0026quot;:\u0026quot;eq\u0026quot;},\u0026quot;max_score\u0026quot;:null,\u0026quot;hits\u0026quot;:[]}} [07-19 16:15:00] [INF] [loader.go:316] [GET] http://localhost:8000/medcl/_search?q=name:medcl [07-19 16:15:00] [INF] [loader.go:317] status: 200,\u0026lt;nil\u0026gt;,{\u0026quot;took\u0026quot;:1,\u0026quot;timed_out\u0026quot;:false,\u0026quot;_shards\u0026quot;:{\u0026quot;total\u0026quot;:1,\u0026quot;successful\u0026quot;:1,\u0026quot;skipped\u0026quot;:0,\u0026quot;failed\u0026quot;:0},\u0026quot;hits\u0026quot;:{\u0026quot;total\u0026quot;:{\u0026quot;value\u0026quot;:0,\u0026quot;relation\u0026quot;:\u0026quot;eq\u0026quot;},\u0026quot;max_score\u0026quot;:null,\u0026quot;hits\u0026quot;:[]}} [07-19 16:15:01] [INF] [loader.go:316] [POST] http://localhost:8000/_bulk [07-19 16:15:01] [INF] [loader.go:317] status: 200,\u0026lt;nil\u0026gt;,{\u0026quot;took\u0026quot;:120,\u0026quot;errors\u0026quot;:false,\u0026quot;items\u0026quot;:[{\u0026quot;index\u0026quot;:{\u0026quot;_index\u0026quot;:\u0026quot;medcl-y4\u0026quot;,\u0026quot;_type\u0026quot;:\u0026quot;doc\u0026quot;,\u0026quot;_id\u0026quot;:\u0026quot;c3qj9123r0okahraiej0\u0026quot;,\u0026quot;_version\u0026quot;:1,\u0026quot;result\u0026quot;:\u0026quot;created\u0026quot;,\u0026quot;_shards\u0026quot;:{\u0026quot;total\u0026quot;:2,\u0026quot;successful\u0026quot;:1,\u0026quot;failed\u0026quot;:0},\u0026quot;_seq_no\u0026quot;:5735852,\u0026quot;_primary_term\u0026quot;:3,\u0026quot;status\u0026quot;:201}}]} [07-19 16:15:01] [INF] [loader.go:325] warmup finished\n5253 requests in 32.756483336s, 524.61KB sent, 2.49MB received\n[Loadgen Client Metrics] Requests/sec:\t175.10 Request Traffic/sec:\t17.49KB Total Transfer/sec:\t102.34KB Avg Req Time:\t5.711022ms Fastest Request:\t440.448µs Slowest Request:\t3.624302658s Number of Errors:\t0 Number of Invalid:\t0 Status 200:\t5253\n[Estimated Server Metrics] Requests/sec:\t160.37 Transfer/sec:\t93.73KB Avg Req Time:\t623.576686ms Before the formal benchmark, Loadgen will execute all requests once for warm-up. If an error occurs, it will prompt whether to continue. The warm-up request results will also be output to the terminal. After execution, a summary of the execution will be output. You can skip this check phase by setting runner.no_warm.\n Since the final result of Loadgen is the cumulative statistics after all requests are completed, there may be inaccuracies. It is recommended to monitor Elasticsearch\u0026rsquo;s various operating indicators in real-time through the Kibana monitoring dashboard.\n Command Line Parameters #  Loadgen will loop through the requests defined in the configuration file. By default, Loadgen will only run for 5s and then automatically exit. If you want to extend the runtime or increase concurrency, you can control it by setting parameters at startup. Check the help command as follows:\n$ loadgen -help Usage of loadgen: -c int Number of concurrent threads (default 1) -compress Compress requests with gzip -config string the location of config file (default \u0026#34;loadgen.yml\u0026#34;) -cpu int the number of CPUs to use (default -1) -d int Duration of tests in seconds (default 5) -debug run in debug mode, loadgen will quit on panic immediately with full stack trace -dial-timeout int Connection dial timeout in seconds, default 3s (default 3) -gateway-log string Log level of Gateway (default \u0026#34;debug\u0026#34;) -l int Limit total requests (default -1) -log string the log level, options: trace,debug,info,warn,error,off -mem int the max size of Memory to use, soft limit in megabyte (default -1) -plugin value load additional plugins -r int Max requests per second (fixed QPS) (default -1) -read-timeout int Connection read timeout in seconds, default 0s (use -timeout) -run string DSL config to run tests (default \u0026#34;loadgen.dsl\u0026#34;) -service string service management, options: install,uninstall,start,stop -timeout int Request timeout in seconds, default 60s (default 60) -v version -write-timeout int Connection write timeout in seconds, default 0s (use -timeout) Limiting Client Workload #  Using Loadgen and setting the command line parameter -r can limit the number of requests sent by the client per second, thereby evaluating the response time and load of Elasticsearch under fixed pressure, as follows:\nloadgen -d 30 -c 100 -r 100  Note: The client throughput limit may not be accurate enough in the case of massive concurrencies.\n Limiting the Total Number of Requests #  By setting the parameter -l, you can control the total number of requests sent by the client to generate fixed documents. Modify the configuration as follows:\n#// loadgen-gw.dsl POST http://localhost:8000/medcl-test/doc2/_bulk {\u0026#34;index\u0026#34;: {\u0026#34;_index\u0026#34;: \u0026#34;medcl-test\u0026#34;, \u0026#34;_id\u0026#34;: \u0026#34;$[[uuid]]\u0026#34;}} {\u0026#34;id\u0026#34;: \u0026#34;$[[id]]\u0026#34;, \u0026#34;field1\u0026#34;: \u0026#34;$[[user]]\u0026#34;, \u0026#34;ip\u0026#34;: \u0026#34;$[[ip]]\u0026#34;} # request: { # basic_auth: { # username: \u0026#34;test\u0026#34;, # password: \u0026#34;testtest\u0026#34;, # }, # body_repeat_times: 1, # }, Each request contains only one document, then execute Loadgen\nloadgen -run loadgen-gw.dsl -d 600 -c 100 -l 50000 After execution, the Elasticsearch index medcl-test will have 50000 more records.\nUsing Auto Incremental IDs to Ensure the Document Sequence #  If you want the generated document IDs to increase regularly for easy comparison, you can use the sequence type auto incremental ID as the primary key and avoid using random numbers in the content, as follows:\nPOST http://localhost:8000/medcl-test/doc2/_bulk {\u0026#34;index\u0026#34;: {\u0026#34;_index\u0026#34;: \u0026#34;medcl-test\u0026#34;, \u0026#34;_id\u0026#34;: \u0026#34;$[[id]]\u0026#34;}} {\u0026#34;id\u0026#34;: \u0026#34;$[[id]]\u0026#34;} # request: { # basic_auth: { # username: \u0026#34;test\u0026#34;, # password: \u0026#34;testtest\u0026#34;, # }, # body_repeat_times: 1, # }, Reuse Variables in Request Context #  In a request, we might want to use the same variable value, such as the routing parameter to control the shard destination, also store the field in the JSON document. You can use runtime_variables to set request-level variables, or runtime_body_line_variables to define request-body-level variables. If the request body is replicated N times, each line will be different, as shown in the following example:\n# variables: [ # {name: \u0026#34;id\u0026#34;, type: \u0026#34;sequence\u0026#34;}, # {name: \u0026#34;uuid\u0026#34;, type: \u0026#34;uuid\u0026#34;}, # {name: \u0026#34;now_local\u0026#34;, type: \u0026#34;now_local\u0026#34;}, # {name: \u0026#34;now_utc\u0026#34;, type: \u0026#34;now_utc\u0026#34;}, # {name: \u0026#34;now_unix\u0026#34;, type: \u0026#34;now_unix\u0026#34;}, # {name: \u0026#34;suffix\u0026#34;, type: \u0026#34;range\u0026#34;, from: 10, to 15}, # ], POST http://192.168.3.188:9206/_bulk {\u0026quot;create\u0026quot;: {\u0026quot;_index\u0026quot;: \u0026quot;test-$[[suffix]]\u0026quot;, \u0026quot;_type\u0026quot;: \u0026quot;doc\u0026quot;, \u0026quot;_id\u0026quot;: \u0026quot;$[[uuid]]\u0026quot;, \u0026quot;routing\u0026quot;: \u0026quot;$[[routing_no]]\u0026quot;}} {\u0026quot;id\u0026quot;: \u0026quot;$[[uuid]]\u0026quot;, \u0026quot;routing_no\u0026quot;: \u0026quot;$[[routing_no]]\u0026quot;, \u0026quot;batch_number\u0026quot;: \u0026quot;$[[batch_no]]\u0026quot;, \u0026quot;random_no\u0026quot;: \u0026quot;$[[suffix]]\u0026quot;, \u0026quot;ip\u0026quot;: \u0026quot;$[[ip]]\u0026quot;, \u0026quot;now_local\u0026quot;: \u0026quot;$[[now_local]]\u0026quot;, \u0026quot;now_unix\u0026quot;: \u0026quot;$[[now_unix]]\u0026quot;}\nrequest: { runtime_variables: { batch_no: \u0026quot;id\u0026quot;, }, runtime_body_line_variables: { routing_no: \u0026quot;uuid\u0026quot;, }, basic_auth: { username: \u0026quot;ingest\u0026quot;, password: \u0026quot;password\u0026quot;, }, body_repeat_times: 10, }, We defined the batch_no variable to represent the same batch number in a batch of documents, and the routing_no variable to represent the routing value at each document level.\nCustomize Header #  GET http://localhost:8000/test/_search # request: { # headers: [ # {Agent: \u0026#34;Loadgen-1\u0026#34;}, # ], # disable_header_names_normalizing: false, # }, By default, Loadgen will canonilize the HTTP header keys in the configuration (user-agent: xxx -\u0026gt; User-Agent: xxx). If you need to set the HTTP header keys exactly, you can disable this behavior by setting disable_header_names_normalizing: true.\nRunning Test Suites #  Loadgen supports running test cases in batches without writing test cases repeatedly. You can quickly test different environment configurations by switching suite configurations:\n# loadgen.yml env: # Set up environments to run test suite LR_TEST_DIR: ./testing # The path to the test cases. # If you want to start gateway dynamically and automatically: LR_GATEWAY_CMD: ./bin/gateway # The path to the executable of INFINI Gateway LR_GATEWAY_HOST: 0.0.0.0:18000 # The binding host of the INFINI Gateway LR_GATEWAY_API_HOST: 0.0.0.0:19000 # The binding host of the INFINI Gateway API server # Set up other environments for the gateway and loadgen LR_ELASTICSEARCH_ENDPOINT: http://localhost:19201 CUSTOM_ENV: myenv tests: # The relative path of test cases under `LR_TEST_DIR` # # - gateway.yml: (Optional) the configuration to start the INFINI Gateway dynamically. # - loadgen.dsl: the configuration to run the loadgen tool. # # The environments set in `env` section will be passed to the INFINI Gateway and loadgen. - path: cases/gateway/echo/echo_with_context Environment Variables Configuration #  Loadgen dynamically configures INFINI Gateway through environment variables specified in env. The following environment variables are required:\n   Variable Name Description     LR_TEST_DIR Directory of test cases    If you need loadgen to dynamically start INFINI Gateway based on the configuration, you need to set the following environment variables:\n   Variable Name Description     LR_GATEWAY_CMD Path to the executable of INFINI Gateway   LR_GATEWAY_HOST Binding host:port of INFINI Gateway   LR_GATEWAY_API_HOST Binding host:port of INFINI Gateway API    Test Case Configuration #  Test cases are configured in tests, each path points to a directory of a test case. Each test case needs to configure a gateway.yml (optional) and a loadgen.dsl. Configuration files can use environment variables configured in env ($[[env.ENV_KEY]]).\nExample gateway.yml configuration:\npath.data: data path.logs: log entry:\n name: my_es_entry enabled: true router: my_router max_concurrency: 200000 network: binding: $[[env.LR_GATEWAY_HOST]]  flow:\n name: hello_world filter:  echo: message: \u0026quot;hello world\u0026quot; router:   name: my_router default_flow: hello_world Example loadgen.dsl configuration:\n  # runner: { # total_rounds: 1, # no_warm: true, # log_requests: true, # assert_invalid: true, # assert_error: true, # }, GET http://$[[env.LR_GATEWAY_HOST]]/ # assert: { # _ctx.response: { # status: 200, # body: \u0026quot;hello world\u0026quot;, # }, # }, Running Test Suites #\n After configuring loadgen.yml, you can run Loadgen with the following command:\nloadgen -config loadgen.yml Loadgen will run all the test cases specified in the configuration and output the test results:\n$ loadgen -config loadgen.yml __ ___ _ ___ ___ __ __ / / /___\\/_\\ / \\/ _ \\ /__\\/\\ \\ \\ / / // ///_\\\\ / /\\ / /_\\//_\\ / \\/ / / /__/ \\_// _ \\/ /_// /_\\\\//__/ /\\ / \\____|___/\\_/ \\_/___,\u0026#39;\\____/\\__/\\_\\ \\/ [LOADGEN] A http load generator and testing suit. [LOADGEN] 1.0.0_SNAPSHOT, 83f2cb9, Sun Jul 4 13:52:42 2021 +0800, medcl, support single item in dict files [02-21 10:50:05] [INF] [app.go:192] initializing loadgen [02-21 10:50:05] [INF] [app.go:193] using config: /Users/kassian/Workspace/infini/src/infini.sh/testing/suites/dev.yml [02-21 10:50:05] [INF] [instance.go:78] workspace: /Users/kassian/Workspace/infini/src/infini.sh/testing/data/loadgen/nodes/cfpihf15k34iqhpd4d00 [02-21 10:50:05] [INF] [app.go:399] loadgen is up and running now. [2023-02-21 10:50:05][TEST][SUCCESS] [setup/loadgen/cases/dummy] duration: 105(ms)\n1 requests in 68.373875ms, 0.00bytes sent, 0.00bytes received\n[Loadgen Client Metrics] Requests/sec: 0.20 Request Traffic/sec: 0.00bytes Total Transfer/sec: 0.00bytes Avg Req Time: 5s Fastest Request: 68.373875ms Slowest Request: 68.373875ms Number of Errors: 0 Number of Invalid: 0 Status 200: 1\n[Estimated Server Metrics] Requests/sec: 14.63 Transfer/sec: 0.00bytes Avg Req Time: 68.373875ms\n[2023-02-21 10:50:06][TEST][FAILED] [setup/gateway/cases/echo/echo_with_context/] duration: 1274(ms) #0 request, GET http://$[[env.LR_GATEWAY_HOST]]/any/, assertion failed, skiping subsequent requests 1 requests in 1.255678s, 0.00bytes sent, 0.00bytes received\n[Loadgen Client Metrics] Requests/sec: 0.20 Request Traffic/sec: 0.00bytes Total Transfer/sec: 0.00bytes Avg Req Time: 5s Fastest Request: 1.255678s Slowest Request: 1.255678s Number of Errors: 1 Number of Invalid: 1 Status 0: 1\n[Estimated Server Metrics] Requests/sec: 0.80 Transfer/sec: 0.00bytes Avg Req Time: 1.255678s\n\n","subcategory":null,"summary":"","tags":null,"title":"Benchmark Testing","url":"/loadgen/v1.29.1/docs/getting-started/benchmark/"},{"category":null,"content":"Installing the Loadgen #  INFINI Loadgen supports mainstream operating systems and platforms. The program package is small, with no extra external dependency. So, the loadgen can be installed very rapidly.\nDownloading #  Automatic install\ncurl -sSL http://get.infini.cloud | bash -s -- -p loadgen The above script can automatically download the latest version of the corresponding platform\u0026rsquo;s loadgen and extract it to /opt/loadgen\nThe optional parameters for the script are as follows:\n -v [version number]（Default to use the latest version number）\n-d [installation directory] (default installation to /opt/loadgen)\n ➜ /tmp mkdir loadgen ➜ /tmp curl -sSL http://get.infini.cloud | bash -s -- -p loadgen -d /tmp/loadgen  @@@@@@@@@@@ @@@@@@@@@@@@ @@@@@@@@@@@@ @@@@@@@@@\u0026amp;amp;@@@ \u0026lt;span style=\u0026quot;color:#75715e\u0026quot;\u0026gt;#@@@@@@@@@@@@@\u0026lt;/span\u0026gt; @@@ @@@@@@@@@@@@@ \u0026amp;amp;@@@@@@@ \u0026amp;amp;@@@@@@@@@@@@@ @\u0026amp;amp;@@@@@@@\u0026amp;amp;@ @@@\u0026amp;amp;@@@@@@@\u0026amp;amp;@ @@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@\u0026amp;amp; @@@@@@@@@@@@@ %@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@\u0026amp;amp;@@@@@@@@@@@@@@@ @@ ,@@@@@@@@@@@@@@@@@@@@@@@\u0026amp;amp; @@@@@. @@@@@\u0026amp;amp;@@@@@@@@@@@@@@  @@@@@@@@@@ @@@@@@@@@@@@@@@# @\u0026amp;@@@\u0026amp;@@@\u0026amp;@@@ \u0026amp;@\u0026amp;@@@\u0026amp;@@@\u0026amp;@ @@@@@@@@@@@@@. @@@@@@@* @@@@@@@@@@@@@ %@@@ @@@@@@@@@@@@@ /@@@@@@@\u0026amp;@@@@@ @@@@@@@@@@@@@ @@@@@@@@@@@@@ @@@@@@@@@@@@ Welcome to INFINI Labs!\nNow attempting the installation\u0026hellip;\nName: [loadgen], Version: [1.26.1-598], Path: [/tmp/loadgen] File: [https://release.infinilabs.com/loadgen/stable/loadgen-1.26.1-598-mac-arm64.zip] ##=O#- #\nInstallation complete. [loadgen] is ready to use!\n cd /tmp/loadgen \u0026amp;\u0026amp; ./loadgen-mac-arm64  / // |/ // __// // |/ // / / // || // / / // || // / ////|/// ////|//_/\n©INFINI.LTD, All Rights Reserved. Manual install\nSelect a package for downloading in the following URL based on your operating system and platform:\n https://release.infinilabs.com/loadgen/\n","subcategory":null,"summary":"","tags":null,"title":"Installing the Loadgen","url":"/loadgen/v1.29.1/docs/getting-started/install/"}]