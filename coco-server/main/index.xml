<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coco Server</title><link>/coco-server/main/</link><description>Recent content on Coco Server</description><generator>Hugo -- gohugo.io</generator><atom:link href="/coco-server/main/index.xml" rel="self" type="application/rss+xml"/><item><title>Authentication</title><link>/coco-server/main/docs/references/account/authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/account/authentication/</guid><description>Authentication # Authentication Methods # The API supports two methods of authentication:
1. Login API # Use the X-API-TOKEN header with your token value.
Example request:
curl -XPOST http://localhost:9000/account/login -d'{ &amp;quot;password&amp;quot;:&amp;quot;mypassword&amp;quot; }' The response should be looks like this:
{ &amp;quot;access_token&amp;quot;: &amp;quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDA4Mjg5OTksInByb3ZpZGVyIjoic2ltcGxlIiwibG9naW4iOiJjb2NvLWRlZmF1bHQtdXNlciIsInVzZXJfaWQiOiJjb2NvLWRlZmF1bHQtdXNlciIsInJvbGVzIjpbXX0.iqn2uuyX7jE3H4earkW-0hbM2lK6q9Oy5lPUv0pVtLI&amp;quot;, &amp;quot;expire_in&amp;quot;: 86400, &amp;quot;id&amp;quot;: &amp;quot;coco-default-user&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;ok&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;coco-default-user&amp;quot; } The access_token can be used in Bearer Authorization.
2. Bearer Authentication # Use Basic Authentication by passing a Authorization header with the access_token returned by login API.</description></item><item><title>Google Drive</title><link>/coco-server/main/docs/references/connectors/google_drive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/connectors/google_drive/</guid><description>Google Drive Connector # Register Google Drive Connector # curl -XPUT &amp;#34;http://localhost:9000/connector/google_drive?replace=true&amp;#34; -d &amp;#39;{ &amp;#34;name&amp;#34;: &amp;#34;Google Drive Connector&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;Fetch the files metadata from Google Drive.&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;/assets/connector/google_drive/icon.png&amp;#34;, &amp;#34;path_hierarchy&amp;#34;:true, &amp;#34;category&amp;#34;: &amp;#34;cloud_storage&amp;#34;, &amp;#34;tags&amp;#34;: [ &amp;#34;google&amp;#34;, &amp;#34;storage&amp;#34; ], &amp;#34;url&amp;#34;: &amp;#34;http://coco.rs/connectors/google_drive&amp;#34;, &amp;#34;assets&amp;#34;: { &amp;#34;icons&amp;#34;: { &amp;#34;default&amp;#34;: &amp;#34;/assets/connector/google_drive/icon.png&amp;#34;, &amp;#34;audio&amp;#34;: &amp;#34;/assets/connector/google_drive/audio.png&amp;#34;, &amp;#34;form&amp;#34;: &amp;#34;/assets/connector/google_drive/form.png&amp;#34;, &amp;#34;document&amp;#34;: &amp;#34;/assets/connector/google_drive/document.png&amp;#34;, &amp;#34;drawing&amp;#34;: &amp;#34;/assets/connector/google_drive/drawing.png&amp;#34;, &amp;#34;folder&amp;#34;: &amp;#34;/assets/connector/google_drive/folder.png&amp;#34;, &amp;#34;fusiontable&amp;#34;: &amp;#34;/assets/connector/google_drive/fusiontable.png&amp;#34;, &amp;#34;jam&amp;#34;: &amp;#34;/assets/connector/google_drive/jam.png&amp;#34;, &amp;#34;map&amp;#34;: &amp;#34;/assets/connector/google_drive/map.png&amp;#34;, &amp;#34;ms_excel&amp;#34;: &amp;#34;/assets/connector/google_drive/ms_excel.png&amp;#34;, &amp;#34;ms_powerpoint&amp;#34;: &amp;#34;/assets/connector/google_drive/ms_powerpoint.png&amp;#34;, &amp;#34;ms_word&amp;#34;: &amp;#34;/assets/connector/google_drive/ms_word.png&amp;#34;, &amp;#34;pdf&amp;#34;: &amp;#34;/assets/connector/google_drive/pdf.png&amp;#34;, &amp;#34;photo&amp;#34;: &amp;#34;/assets/connector/google_drive/photo.</description></item><item><title>Installation</title><link>/coco-server/main/docs/getting-started/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/getting-started/install/</guid><description>Coco Server User Guide # Run Coco Server with Docker Manual install Coco Server 1. Quick Start (Recommended for Most Users) # This method is the simplest way to get Coco Server running. It uses Docker-managed volumes, which handles data persistence automatically without requiring manual directory setup on your host machine.
Command:
docker run -d \ --name cocoserver \ -p 9000:9000 \ -v data:/app/easysearch/data \ -v config:/app/easysearch/config \ -v logs:/app/easysearch/logs \ infinilabs/coco:0.</description></item><item><title>API Token</title><link>/coco-server/main/docs/references/account/access_token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/account/access_token/</guid><description>API Token # Request Access Token # An API Token can be used in your own application to access Coco Server.
Example request:
curl -H &amp;quot;Authorization: Bearer &amp;lt;access_token&amp;gt;&amp;quot; -XPOST http://localhost:9000/auth/access_token</description></item><item><title>Hugo Site</title><link>/coco-server/main/docs/references/connectors/hugo_site/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/connectors/hugo_site/</guid><description>Hugo Site Connector # Register Hugo Site Connector # curl -XPUT &amp;#34;http://localhost:9000/connector/hugo_site?replace=true&amp;#34; -d &amp;#39;{ &amp;#34;name&amp;#34;: &amp;#34;Hugo Site Connector&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;Fetch the index.json file from a specified Hugo site.&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;/assets/connector/hugo_site/icon.png&amp;#34;, &amp;#34;category&amp;#34;: &amp;#34;website&amp;#34;, &amp;#34;tags&amp;#34;: [ &amp;#34;static_site&amp;#34;, &amp;#34;hugo&amp;#34;, &amp;#34;web&amp;#34; ], &amp;#34;url&amp;#34;: &amp;#34;http://coco.rs/connectors/hugo_site&amp;#34;, &amp;#34;assets&amp;#34;: { &amp;#34;icons&amp;#34;: { &amp;#34;default&amp;#34;: &amp;#34;/assets/connector/hugo_site/web.png&amp;#34;, &amp;#34;blog&amp;#34;: &amp;#34;/assets/connector/hugo_site/blog.png&amp;#34;, &amp;#34;web&amp;#34;: &amp;#34;/assets/connector/hugo_site/web.png&amp;#34;, &amp;#34;web_page&amp;#34;: &amp;#34;/assets/connector/hugo_site/web_page.png&amp;#34;, &amp;#34;news&amp;#34;: &amp;#34;/assets/connector/hugo_site/news.png&amp;#34; } } }&amp;#39; Use hugo_site as a unique identifier, as it is a builtin connector.</description></item><item><title>RSS</title><link>/coco-server/main/docs/references/connectors/rss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/connectors/rss/</guid><description>Rss Connector # Register RSS Connector # curl -XPUT &amp;#34;http://localhost:9000/connector/rss?replace=true&amp;#34; -d &amp;#39;{ &amp;#34;name&amp;#34; : &amp;#34;RSS Connector&amp;#34;, &amp;#34;description&amp;#34; : &amp;#34;Fetch items from a specified RSS feed.&amp;#34;, &amp;#34;category&amp;#34; : &amp;#34;website&amp;#34;, &amp;#34;icon&amp;#34; : &amp;#34;/assets/icons/connector/rss/icon.png&amp;#34;, &amp;#34;tags&amp;#34; : [ &amp;#34;rss&amp;#34;, &amp;#34;feed&amp;#34;, &amp;#34;web&amp;#34; ], &amp;#34;url&amp;#34; : &amp;#34;http://coco.rs/connectors/rss&amp;#34;, &amp;#34;assets&amp;#34; : { &amp;#34;icons&amp;#34; : { &amp;#34;default&amp;#34; : &amp;#34;/assets/icons/connector/rss/icon.png&amp;#34; } } }&amp;#39; Use rss as a unique identifier, as it is a builtin connector.
Update coco-server&amp;rsquo;s config # Below is an example configuration for enabling the RSS Connector in coco-server:</description></item><item><title>Setup Wizard</title><link>/coco-server/main/docs/getting-started/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/getting-started/setup/</guid><description>Setup Wizard # Open your browser and enter http://localhost:9000/#/guide to access the initialization wizard, as shown below:
Enter your username, email, and password, then click Next, as shown:
Select the LLM type: DeepSeek, Ollama, or OpenAI Configure the LLM endpoint Set the default model Enable keepalive and set an appropriate interval Provide the token Click Next to complete the initialization. Login # After initialization, you’ll be redirected to the login page, as shown:</description></item><item><title>Confluence</title><link>/coco-server/main/docs/references/connectors/confluence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/connectors/confluence/</guid><description>Confluence Connector # Register Confluence Connector # curl -XPUT &amp;#34;http://localhost:9000/connector/confluence?replace=true&amp;#34; -d &amp;#39;{ &amp;#34;name&amp;#34; : &amp;#34;Confluence wiki Connector&amp;#34;, &amp;#34;description&amp;#34; : &amp;#34;Fetch Confluence Wiki pages and blogposts.&amp;#34;, &amp;#34;category&amp;#34; : &amp;#34;website&amp;#34;, &amp;#34;icon&amp;#34; : &amp;#34;/assets/icons/connector/confluence/icon.png&amp;#34;, &amp;#34;tags&amp;#34; : [ &amp;#34;wiki&amp;#34;, &amp;#34;storage&amp;#34;, &amp;#34;docs&amp;#34;, &amp;#34;web&amp;#34; ], &amp;#34;url&amp;#34; : &amp;#34;http://coco.rs/connectors/confluence&amp;#34;, &amp;#34;assets&amp;#34; : { &amp;#34;icons&amp;#34; : { &amp;#34;default&amp;#34; : &amp;#34;/assets/icons/connector/confluence/icon.png&amp;#34; } }&amp;#39; Use confluence as a unique identifier, as it is a builtin connector.
Update coco-server&amp;rsquo;s config # Below is an example configuration for enabling the Confluence Connector in coco-server:</description></item><item><title>How to integrate Coco AI with your own datasource</title><link>/coco-server/main/docs/tutorials/howto_create_your_own_datasource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/tutorials/howto_create_your_own_datasource/</guid><description>How to integrate Coco AI with your own datasource # This guide will walk you through the process of creating a custom datasource and building a simple connector to integrate it with the system.
Obtain API Token # Make sure you have a valid API token before continue.
Create a simple connector # curl -H'X-API-TOKEN: cv9bb63q50k5eikkq43gp07lmg60gn2nor7uf650xpxazd6a6nns8uttymz52uvnplhmtaf829x71lph51li' -XPOST http://localhost:9000/connector/ -d'{ &amp;quot;name&amp;quot;: &amp;quot;My Connector&amp;quot; }' Response
{ &amp;quot;_id&amp;quot;: &amp;quot;cv9bc23q50k5eikkq4c0&amp;quot;, &amp;quot;result&amp;quot;: &amp;quot;created&amp;quot; } Create a datasource for this connector # curl -H'X-API-TOKEN: cv9bb63q50k5eikkq43gp07lmg60gn2nor7uf650xpxazd6a6nns8uttymz52uvnplhmtaf829x71lph51li' -H 'Content-Type: application/json' -XPOST http://localhost:9000/datasource/ -d' { &amp;quot;name&amp;quot;:&amp;quot;My Datasource&amp;quot;, &amp;quot;type&amp;quot;:&amp;quot;connector&amp;quot;, &amp;quot;connector&amp;quot;:{ &amp;quot;id&amp;quot;:&amp;quot;cv9bc23q50k5eikkq4c0&amp;quot; } }' Response</description></item><item><title>Local FS</title><link>/coco-server/main/docs/references/connectors/local_fs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/connectors/local_fs/</guid><description>Local FS Connector # Register Local FS Connector # curl -XPUT &amp;#34;http://localhost:9000/connector/local_fs?replace=true&amp;#34; -d &amp;#39;{ &amp;#34;name&amp;#34; : &amp;#34;Local Filesystem Connector&amp;#34;, &amp;#34;description&amp;#34; : &amp;#34;Scan and fetch metadata from local files.&amp;#34;, &amp;#34;category&amp;#34; : &amp;#34;local_storage&amp;#34;, &amp;#34;icon&amp;#34; : &amp;#34;/assets/icons/connector/local_fs/icon.png&amp;#34;, &amp;#34;tags&amp;#34; : [ &amp;#34;storage&amp;#34;, &amp;#34;filesystem&amp;#34; ], &amp;#34;url&amp;#34; : &amp;#34;http://coco.rs/connectors/local_fs&amp;#34;, &amp;#34;assets&amp;#34; : { &amp;#34;icons&amp;#34; : { &amp;#34;default&amp;#34; : &amp;#34;/assets/icons/connector/local_fs/icon.png&amp;#34; } } }&amp;#39; Use local_fs as a unique identifier, as it is a builtin connector.</description></item><item><title>Network Drive</title><link>/coco-server/main/docs/references/connectors/network_drive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/connectors/network_drive/</guid><description>Network Drive Connector # Register Network Drive Connector # curl -XPUT &amp;#34;http://localhost:9000/connector/network_drive?replace=true&amp;#34; -d &amp;#39;{ &amp;#34;name&amp;#34; : &amp;#34;Network drive Connector&amp;#34;, &amp;#34;description&amp;#34; : &amp;#34;Scan and extract metadata from network shared files.&amp;#34;, &amp;#34;category&amp;#34; : &amp;#34;cloud_storage&amp;#34;, &amp;#34;icon&amp;#34; : &amp;#34;/assets/icons/connector/network_drive/icon.png&amp;#34;, &amp;#34;tags&amp;#34; : [ &amp;#34;filesystem&amp;#34;, &amp;#34;storage&amp;#34;, &amp;#34;web&amp;#34; ], &amp;#34;url&amp;#34; : &amp;#34;http://coco.rs/connectors/network_drive&amp;#34;, &amp;#34;assets&amp;#34; : { &amp;#34;icons&amp;#34; : { &amp;#34;default&amp;#34; : &amp;#34;/assets/icons/connector/network_drive/icon.png&amp;#34; } } }&amp;#39; Use Network Drive as a unique identifier, as it is a builtin connector.</description></item><item><title>Notion</title><link>/coco-server/main/docs/references/connectors/notion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/connectors/notion/</guid><description>Notion Connector # Register Notion Connector # curl -XPUT &amp;#34;http://localhost:9000/connector/notion?replace=true&amp;#34; -d &amp;#39;{ &amp;#34;name&amp;#34;: &amp;#34;Notion Docs Connector&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;Fetch the docs metadata for notion.&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;/assets/connector/notion/icon.png&amp;#34;, &amp;#34;category&amp;#34;: &amp;#34;website&amp;#34;, &amp;#34;tags&amp;#34;: [ &amp;#34;docs&amp;#34;, &amp;#34;notion&amp;#34;, &amp;#34;web&amp;#34; ], &amp;#34;url&amp;#34;: &amp;#34;http://coco.rs/connectors/notion&amp;#34;, &amp;#34;assets&amp;#34;: { &amp;#34;icons&amp;#34;: { &amp;#34;default&amp;#34;: &amp;#34;/assets/connector/notion/icon.png&amp;#34;, &amp;#34;web_page&amp;#34;: &amp;#34;/assets/connector/notion/icon.png&amp;#34;, &amp;#34;database&amp;#34;: &amp;#34;/assets/connector/notion/database.png&amp;#34;, &amp;#34;page&amp;#34;: &amp;#34;/assets/connector/notion/page.png&amp;#34; } } }&amp;#39; Use notion as a unique identifier, as it is a builtin connector.
Update coco-server&amp;rsquo;s config # Below is an example configuration for enabling the Notion Connector in coco-server:</description></item><item><title>S3</title><link>/coco-server/main/docs/references/connectors/s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/connectors/s3/</guid><description>S3 Connector # Register S3 Connector # curl -XPUT &amp;#34;http://localhost:9000/connector/s3?replace=true&amp;#34; -d &amp;#39;{ &amp;#34;name&amp;#34; : &amp;#34;S3 对象存储连接器&amp;#34;, &amp;#34;description&amp;#34; : &amp;#34;提取 S3 云端文件元数据信息。&amp;#34;, &amp;#34;category&amp;#34; : &amp;#34;cloud_storage&amp;#34;, &amp;#34;icon&amp;#34; : &amp;#34;/assets/icons/connector/s3/icon.png&amp;#34;, &amp;#34;tags&amp;#34; : [ &amp;#34;s3&amp;#34;, &amp;#34;storage&amp;#34; ], &amp;#34;url&amp;#34; : &amp;#34;http://coco.rs/connectors/s3&amp;#34;, &amp;#34;assets&amp;#34; : { &amp;#34;icons&amp;#34; : { &amp;#34;default&amp;#34; : &amp;#34;/assets/icons/connector/s3/icon.png&amp;#34; } } }&amp;#39; Use s3 as a unique identifier, as it is a builtin connector.
Update coco-server&amp;rsquo;s config # Below is an example configuration for enabling the S3 Connector in coco-server:</description></item><item><title>Yuque</title><link>/coco-server/main/docs/references/connectors/yuque/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/connectors/yuque/</guid><description>Yuque Connector # Register Yuque Connector # curl -XPUT &amp;#34;http://localhost:9000/connector/yuque?replace=true&amp;#34; -d &amp;#39;{ &amp;#34;name&amp;#34;: &amp;#34;Yuque Docs Connector&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;Fetch the docs metadata for yuque.&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;/assets/connector/yuque/icon.png&amp;#34;, &amp;#34;category&amp;#34;: &amp;#34;website&amp;#34;, &amp;#34;tags&amp;#34;: [ &amp;#34;static_site&amp;#34;, &amp;#34;hugo&amp;#34;, &amp;#34;web&amp;#34; ], &amp;#34;url&amp;#34;: &amp;#34;http://coco.rs/connectors/hugo_site&amp;#34;, &amp;#34;assets&amp;#34;: { &amp;#34;icons&amp;#34;: { &amp;#34;default&amp;#34;: &amp;#34;/assets/connector/yuque/icon.png&amp;#34;, &amp;#34;book&amp;#34;: &amp;#34;/assets/connector/yuque/book.png&amp;#34;, &amp;#34;board&amp;#34;: &amp;#34;/assets/connector/yuque/board.png&amp;#34;, &amp;#34;sheet&amp;#34;: &amp;#34;/assets/connector/yuque/sheet.png&amp;#34;, &amp;#34;table&amp;#34;: &amp;#34;/assets/connector/yuque/table.png&amp;#34;, &amp;#34;doc&amp;#34;: &amp;#34;/assets/connector/yuque/doc.png&amp;#34; } } }&amp;#39; Use yuque as a unique identifier, as it is a builtin connector.
Update coco-server&amp;rsquo;s config # Below is an example configuration for enabling the Yuque Connector in coco-server:</description></item><item><title>Feishu/Lark</title><link>/coco-server/main/docs/references/connectors/feishu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/connectors/feishu/</guid><description>Feishu/Lark Connector # The Feishu/Lark connector indexes cloud documents from Feishu and Lark, including documents, spreadsheets, mind notes, multi-dimensional tables, and knowledge bases.
Features # 🔍 Smart Search: Keyword-based search for cloud documents 📚 Multiple Document Types: Support for doc, sheet, slides, mindnote, bitable, file, docx, folder, shortcut 🔐 Dual Authentication: OAuth 2.0 and user access token authentication (choose one) ⚡ Efficient Sync: Scheduled and manual synchronization 🔄 Recursive Search: Automatically search folder contents recursively 🔄 Token Auto-refresh: OAuth authentication supports automatic refresh of access_token and refresh_token 🌐 Dynamic Redirect: Supports dynamic OAuth redirect URI construction for multi-environment deployment 🏗️ Unified Architecture: Feishu and Lark share base implementation with 95% code reuse Supported Platforms # Feishu # Domain: open.</description></item><item><title>Assistant</title><link>/coco-server/main/docs/references/assistant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/assistant/</guid><description>Assistant # Assistant API Reference # Create an AI assistant # //request curl -XPOST http://localhost:9000/assistant/ -d&amp;#39;{ &amp;#34;name&amp;#34; : &amp;#34;deault&amp;#34;, &amp;#34;description&amp;#34; : &amp;#34;default AI chat assistant&amp;#34;, &amp;#34;icon&amp;#34; : &amp;#34;font_Google-video&amp;#34;, &amp;#34;type&amp;#34; : &amp;#34;deep_think&amp;#34;, &amp;#34;config&amp;#34; : { &amp;#34;intent_analysis_model&amp;#34; : { &amp;#34;name&amp;#34; : &amp;#34;tongyi-intent-detect-v3&amp;#34;, &amp;#34;provider_id&amp;#34; : &amp;#34;cvuai3dath2dlgqqpc2g&amp;#34;, &amp;#34;settings&amp;#34;: { &amp;#34;temperature&amp;#34; : 0.8, &amp;#34;top_p&amp;#34; : 0.5, &amp;#34;presence_penalty&amp;#34; : 0, &amp;#34;frequency_penalty&amp;#34; : 0, &amp;#34;max_tokens&amp;#34; : 1024 } }, &amp;#34;picking_doc_model&amp;#34; : { &amp;#34;name&amp;#34; : &amp;#34;deepseek-r1-distill-qwen-32b&amp;#34;, &amp;#34;provider_id&amp;#34; : &amp;#34;cvuai3dath2dlgqqpc2g&amp;#34;, &amp;#34;settings&amp;#34;: { &amp;#34;temperature&amp;#34; : 0.</description></item><item><title>Document</title><link>/coco-server/main/docs/references/document/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/document/</guid><description>Document API # Document API Reference # Documents # Below is the field description for the document.
Field Type Description source object The source of the document. category string Primary category of the document, e.g., report. subcategory string Secondary category of the document, e.g., 2024. categories array[string] List of categories the document belongs to, e.</description></item><item><title>Modify Password</title><link>/coco-server/main/docs/references/account/password/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/account/password/</guid><description>Modify Password # Modify the current user&amp;rsquo;s password.
curl -XPUT http://localhost:9000/account/password -d'{ &amp;quot;old_password&amp;quot;:&amp;quot;xxxx&amp;quot;, &amp;quot;new_password&amp;quot;:&amp;quot;xxxx&amp;quot; }'</description></item><item><title>MySQL</title><link>/coco-server/main/docs/references/connectors/mysql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/connectors/mysql/</guid><description>MySQL Connector # Register MySQL Connector # curl -XPUT &amp;#34;http://localhost:9000/connector/mysql?replace=true&amp;#34; -d &amp;#39; { &amp;#34;name&amp;#34; : &amp;#34;MySQL Connector&amp;#34;, &amp;#34;description&amp;#34; : &amp;#34;Fetch data from MySQL database.&amp;#34;, &amp;#34;category&amp;#34; : &amp;#34;database&amp;#34;, &amp;#34;icon&amp;#34; : &amp;#34;/assets/icons/connector/mysql/icon.png&amp;#34;, &amp;#34;tags&amp;#34; : [ &amp;#34;sql&amp;#34;, &amp;#34;storage&amp;#34;, &amp;#34;web&amp;#34; ], &amp;#34;url&amp;#34; : &amp;#34;http://coco.rs/connectors/mysql&amp;#34;, &amp;#34;assets&amp;#34; : { &amp;#34;icons&amp;#34; : { &amp;#34;default&amp;#34; : &amp;#34;/assets/icons/connector/mysql/icon.png&amp;#34; } } }&amp;#39; Use mysql as a unique identifier, as it is a builtin connector.
Update coco-server&amp;rsquo;s config # Below is an example configuration for enabling the MySQL Connector in coco-server:</description></item><item><title>PostgreSQL</title><link>/coco-server/main/docs/references/connectors/postgresql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/connectors/postgresql/</guid><description>PostgreSQL Connector # Register PostgreSQL Connector # curl -XPUT &amp;#34;http://localhost:9000/connector/postgresql?replace=true&amp;#34; -d &amp;#39; { &amp;#34;name&amp;#34; : &amp;#34;PostgreSQL Connector&amp;#34;, &amp;#34;description&amp;#34; : &amp;#34;Fetch data from PostgreSQL database.&amp;#34;, &amp;#34;category&amp;#34; : &amp;#34;database&amp;#34;, &amp;#34;icon&amp;#34; : &amp;#34;/assets/icons/connector/postgresql/icon.png&amp;#34;, &amp;#34;tags&amp;#34; : [ &amp;#34;sql&amp;#34;, &amp;#34;storage&amp;#34;, &amp;#34;web&amp;#34; ], &amp;#34;url&amp;#34; : &amp;#34;http://coco.rs/connectors/postgresql&amp;#34;, &amp;#34;assets&amp;#34; : { &amp;#34;icons&amp;#34; : { &amp;#34;default&amp;#34; : &amp;#34;/assets/icons/connector/postgresql/icon.png&amp;#34; } } }&amp;#39; Use postgresql as a unique identifier, as it is a builtin connector.
Update coco-server&amp;rsquo;s config # Below is an example configuration for enabling the Postgresql Connector in coco-server:</description></item><item><title>Profile</title><link>/coco-server/main/docs/references/account/profile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/account/profile/</guid><description>Profile API # Profile API Reference # Profile # Below is the field description for the profile object.
Field Type Description id string Unique identifier for the user profile. username string User&amp;rsquo;s display name or username. email string User&amp;rsquo;s email address. avatar string (URL) URL to the user&amp;rsquo;s avatar image. created string (datetime) Timestamp when the profile was created.</description></item><item><title>Search</title><link>/coco-server/main/docs/references/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/search/</guid><description>Search API # Search API Reference # Get Query Suggestions # //request curl -XGET http://localhost:9000/query/_suggest\?query\=buss //response { &amp;#34;query&amp;#34;: &amp;#34;buss&amp;#34;, &amp;#34;suggestions&amp;#34;: [ { &amp;#34;suggestion&amp;#34;: &amp;#34;Q3 Business Report&amp;#34;, &amp;#34;score&amp;#34;: 0.99, &amp;#34;source&amp;#34;: { &amp;#34;type&amp;#34;:&amp;#34;connector&amp;#34;, &amp;#34;name&amp;#34;:&amp;#34;google_drive&amp;#34;, &amp;#34;id&amp;#34;:&amp;#34;e806831dacc3&amp;#34;, } } ] } Get Search Results # //request curl -XGET http://localhost:9000/query/_search\?query\=Business //response {&amp;#34;took&amp;#34;:15,&amp;#34;timed_out&amp;#34;:false,&amp;#34;_shards&amp;#34;:{&amp;#34;total&amp;#34;:1,&amp;#34;successful&amp;#34;:1,&amp;#34;skipped&amp;#34;:0,&amp;#34;failed&amp;#34;:0},&amp;#34;hits&amp;#34;:{&amp;#34;total&amp;#34;:{&amp;#34;value&amp;#34;:1,&amp;#34;relation&amp;#34;:&amp;#34;eq&amp;#34;},&amp;#34;max_score&amp;#34;:3.0187376,&amp;#34;hits&amp;#34;:[{&amp;#34;_index&amp;#34;:&amp;#34;coco_document&amp;#34;,&amp;#34;_type&amp;#34;:&amp;#34;_doc&amp;#34;,&amp;#34;_id&amp;#34;:&amp;#34;csstf6rq50k5sqipjaa0&amp;#34;,&amp;#34;_score&amp;#34;:3.0187376,&amp;#34;_source&amp;#34;:{&amp;#34;id&amp;#34;:&amp;#34;csstf6rq50k5sqipjaa0&amp;#34;, ...OMITTED...}}}]}} Parameters # Parameter Type Default Description query string &amp;quot;&amp;quot; The search query string.</description></item><item><title>GitHub</title><link>/coco-server/main/docs/references/connectors/github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/connectors/github/</guid><description>GitHub Connector # Register GitHub Connector # curl -XPUT &amp;#34;http://localhost:9000/connector/github?replace=true&amp;#34; -d &amp;#39;{ &amp;#34;name&amp;#34;: &amp;#34;GitHub Connector&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;Fetch repositories, issues, and pull requests from GitHub.&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;/assets/icons/connector/github/icon.png&amp;#34;, &amp;#34;category&amp;#34;: &amp;#34;website&amp;#34;, &amp;#34;tags&amp;#34;: [ &amp;#34;git&amp;#34;, &amp;#34;code&amp;#34;, &amp;#34;vcs&amp;#34;, &amp;#34;website&amp;#34; ], &amp;#34;url&amp;#34;: &amp;#34;http://coco.rs/connectors/github&amp;#34;, &amp;#34;assets&amp;#34;: { &amp;#34;icons&amp;#34;: { &amp;#34;default&amp;#34; : &amp;#34;/assets/icons/connector/github/icon.png&amp;#34;, &amp;#34;repository&amp;#34; : &amp;#34;/assets/icons/connector/github/repository.png&amp;#34;, &amp;#34;issue&amp;#34; : &amp;#34;/assets/icons/connector/github/issue.png&amp;#34;, &amp;#34;pull_request&amp;#34; : &amp;#34;/assets/icons/connector/github/pull_request.png&amp;#34; } } }&amp;#39; Use github as a unique identifier, as it is a builtin connector.</description></item><item><title>Logout</title><link>/coco-server/main/docs/references/account/logout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/account/logout/</guid><description>Logout # Logout API # The Logout API securely logs the user out from the COCO server.
Example request:
curl -XPOST http://localhost:9000/account/logout</description></item><item><title>GitLab</title><link>/coco-server/main/docs/references/connectors/gitlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/connectors/gitlab/</guid><description>GitLab Connector # Register GitLab Connector # curl -XPUT &amp;#34;http://localhost:9000/connector/gitlab?replace=true&amp;#34; -d &amp;#39;{ &amp;#34;name&amp;#34;: &amp;#34;GitLab Connector&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;Fetch repositories, issues, merge requests, wikis, and snippets from GitLab.&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;/assets/icons/connector/gitlab/icon.png&amp;#34;, &amp;#34;category&amp;#34;: &amp;#34;website&amp;#34;, &amp;#34;tags&amp;#34;: [ &amp;#34;git&amp;#34;, &amp;#34;code&amp;#34;, &amp;#34;vcs&amp;#34;, &amp;#34;website&amp;#34; ], &amp;#34;url&amp;#34;: &amp;#34;http://coco.rs/connectors/gitlab&amp;#34;, &amp;#34;assets&amp;#34;: { &amp;#34;icons&amp;#34;: { &amp;#34;default&amp;#34; : &amp;#34;/assets/icons/connector/gitlab/icon.png&amp;#34;, &amp;#34;repository&amp;#34; : &amp;#34;/assets/icons/connector/gitlab/repository.png&amp;#34;, &amp;#34;issue&amp;#34; : &amp;#34;/assets/icons/connector/gitlab/issue.png&amp;#34;, &amp;#34;merge_request&amp;#34; : &amp;#34;/assets/icons/connector/gitlab/merge_request.png&amp;#34;, &amp;#34;wiki&amp;#34; : &amp;#34;/assets/icons/connector/gitlab/wiki.png&amp;#34;, &amp;#34;snippet&amp;#34; : &amp;#34;/assets/icons/connector/gitlab/snippet.png&amp;#34; } } }&amp;#39; Use gitlab as a unique identifier, as it is a builtin connector.</description></item><item><title>Datasource</title><link>/coco-server/main/docs/references/datasource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/datasource/</guid><description>Datasource # Work with Datasource # Datasource defines where the data comes from, usually we can use a specify connector to fetch data from a specify datasource.
Create a Datasource # We can use the connector to connect specify datasource.
//request curl -H &amp;#39;Content-Type: application/json&amp;#39; -XPOST http://localhost:9000/datasource/ -d&amp;#39; { &amp;#34;name&amp;#34;:&amp;#34;My Hugo Site&amp;#34;, &amp;#34;type&amp;#34;:&amp;#34;connector&amp;#34;, &amp;#34;connector&amp;#34;:{ &amp;#34;id&amp;#34;:&amp;#34;hugo_site&amp;#34;, &amp;#34;config&amp;#34;:{ &amp;#34;urls&amp;#34;: [ &amp;#34;https://pizza.rs/index.json&amp;#34; ] } } }&amp;#39; //response { &amp;#34;_id&amp;#34;: &amp;#34;cu1rf03q50k43nn2pi6g&amp;#34;, &amp;#34;result&amp;#34;: &amp;#34;created&amp;#34; } config specifies the necessary configurations for this connector.</description></item><item><title>Integration</title><link>/coco-server/main/docs/references/integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/integration/</guid><description>Integration # Work with Integration # The integration generates a piece of code based on certain configuration parameters, which can be embedded into other websites. This code allows you to quickly use Coco AI&amp;rsquo;s search and chat capabilities.
Integration API # Below is the field description for the integration.
Field Type Description name string The integration&amp;rsquo;s name. type string The integration type.</description></item><item><title>MCP Server</title><link>/coco-server/main/docs/references/mcp_server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/mcp_server/</guid><description>MCP Server # Work with MCP Server # TThe MCP Server provides commonly used MCP configurations for large model calls.
MCP Server API # Below is the field description for the MCP Server.
Field Type Description name string The MCP Server&amp;rsquo;s name. type string The type to access the API of the MCP Server, possible values: stdio, streamable http.</description></item><item><title>Model Provider</title><link>/coco-server/main/docs/references/model_provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/model_provider/</guid><description>Model Provider # Work with Model Provider # The Model Provider enables seamless integration of various AI models into your application. It supports multiple model types, including Deepseek, OpenAI, and more. This guide provides a comprehensive overview of how to effectively utilize the Model Provider.
Model Provider API # Below is the field description for the model provider.
Field Type Description name string The model provider&amp;rsquo;s name.</description></item><item><title>Attachment</title><link>/coco-server/main/docs/references/attachment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/attachment/</guid><description>Attachment # Attachment API are used to upload your local files to Coco server.
Upload attachment in chat session # curl -X POST http://localhost:9000/chat/[session_id]/_upload -F &amp;quot;files=LOCAL_FILE&amp;quot;
Example
curl -X POST http://localhost:9000/chat/cu737jrq50kcaicgn7pg/_upload \ -H &amp;quot;X-API-TOKEN: cv9pnurq50k1hii28630jy429g4b49viecrlj9529onpa6n0lti7yohioitvyotd0677rop5uszc0cnll03j&amp;quot; \ -F &amp;quot;files=@/Users/medcl/Downloads/tmp/neurips19-diskann.pdf&amp;quot; \ -F &amp;quot;files=@/Users/medcl/Downloads/tmp/Adaptive_searching_in_succinctly_encoded.pdf&amp;quot; The session_id need to be replaced with actual session id.
Response
{ &amp;quot;acknowledged&amp;quot;: true, &amp;quot;attachments&amp;quot;: [ &amp;quot;cv9q94bq50k2r0s6nob0&amp;quot;, &amp;quot;cv9q94bq50k2r0s6nobg&amp;quot; ] } Download attachment # curl -X GET http://localhost:9000/attachment/cv9q94bq50k2r0s6nobg \ -H &amp;quot;X-API-TOKEN: cv9pnurq50k1hii28630jy429g4b49viecrlj9529onpa6n0lti7yohioitvyotd0677rop5uszc0cnll03j&amp;quot; Check attachment exists # curl -I http://localhost:9000/attachment/cv9q94bq50k2r0s6nobg \ -H &amp;quot;X-API-TOKEN: cv9pnurq50k1hii28630jy429g4b49viecrlj9529onpa6n0lti7yohioitvyotd0677rop5uszc0cnll03j&amp;quot; Response</description></item><item><title>System Initialization</title><link>/coco-server/main/docs/references/system/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/system/install/</guid><description>System Initialization # Initialization API # curl -XPOST http://localhost:9000/setup/_initialize -d' { &amp;quot;name&amp;quot;:&amp;quot;Coco&amp;quot;, &amp;quot;email&amp;quot;:&amp;quot;hello@coco.rs&amp;quot;, &amp;quot;password&amp;quot;:&amp;quot;mypassword&amp;quot;, &amp;quot;llm&amp;quot;:{ &amp;quot;type&amp;quot;:&amp;quot;ollama&amp;quot;, &amp;quot;endpoint&amp;quot;:&amp;quot;http://xxx&amp;quot;, &amp;quot;default_model&amp;quot;:&amp;quot;deepseek_r1&amp;quot; } }' Initialization UI Management # When entering the coco server, it will check whether it has been initialized. If not, it will enter the initialization page.
Create a user account # Set up a new user account to manage access and permissions.
Connect to a Large Model # After integrating a large model, you will unlock the AI chat feature, providing intelligent search and an efficient work assistant.</description></item><item><title>System Settings</title><link>/coco-server/main/docs/references/system/settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/coco-server/main/docs/references/system/settings/</guid><description>System Settings # System Settings API # curl -XPOST http://localhost:9000/settings -d' { &amp;quot;server&amp;quot;:{ &amp;quot;name&amp;quot;: &amp;quot;My Coco Server&amp;quot;, &amp;quot;endpoint&amp;quot;:&amp;quot;http://xxxx/&amp;quot;, &amp;quot;provider&amp;quot;: { &amp;quot;banner&amp;quot;: &amp;quot;http://localhost:9000/banner2.jpg&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;Coco AI Server - Search, Connect, Collaborate, AI-powered enterprise search, all in one space.&amp;quot;, &amp;quot;eula&amp;quot;: &amp;quot;http://infinilabs.com/eula.txt&amp;quot;, &amp;quot;icon&amp;quot;: &amp;quot;http://localhost:9000/icon.png&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;INFINI Labs&amp;quot;, &amp;quot;privacy_policy&amp;quot;: &amp;quot;http://infinilabs.com/privacy_policy.txt&amp;quot;, &amp;quot;website&amp;quot;: &amp;quot;http://infinilabs.com&amp;quot; }, }, &amp;quot;llm&amp;quot;:{ &amp;quot;type&amp;quot;:&amp;quot;ollama&amp;quot;, //or openai &amp;quot;endpoint&amp;quot;:&amp;quot;http://xxx&amp;quot;, &amp;quot;default_model&amp;quot;:&amp;quot;deepseek_r1&amp;quot;, &amp;quot;parameters&amp;quot;:{ &amp;quot;top_p&amp;quot;:111, &amp;quot;max_tokens&amp;quot;:32000, &amp;quot;presence_penalty&amp;quot;:0.9, &amp;quot;frequency_penalty&amp;quot;:0.9, &amp;quot;enhanced_inference&amp;quot;:true, } } }' System Settings UI Management # Server # Log in to the Coco-Server admin dashboard, click Home in the left menu to view server infomation, as shown below:</description></item></channel></rss>