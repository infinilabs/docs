<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>字符过滤器 on INFINI Easysearch</title><link>/easysearch/v1.15.2/docs/references/text-analysis/character-filters/</link><description>Recent content in 字符过滤器 on INFINI Easysearch</description><generator>Hugo -- gohugo.io</generator><atom:link href="/easysearch/v1.15.2/docs/references/text-analysis/character-filters/index.xml" rel="self" type="application/rss+xml"/><item><title>HTML 剥离字符过滤器</title><link>/easysearch/v1.15.2/docs/references/text-analysis/character-filters/html-strip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.2/docs/references/text-analysis/character-filters/html-strip/</guid><description>HTML 剥离字符过滤器 # HTML 剥离（html_strip）字符过滤器会从输入文本中移除 HTML 标签（例如 &amp;lt;div&amp;gt;、&amp;lt;p&amp;gt; 和 &amp;lt;a&amp;gt; 等）并输出纯文本。该过滤器可以配置保留某些标签，或者配置把特定的 HTML 标签实体（如 &amp;amp;nbsp;）解码为空格。
参考样例 # 以下请求展示将 html_strip 字符过滤器应用于文本：
GET /_analyze { &amp;quot;tokenizer&amp;quot;: &amp;quot;keyword&amp;quot;, &amp;quot;char_filter&amp;quot;: [ &amp;quot;html_strip&amp;quot; ], &amp;quot;text&amp;quot;: &amp;quot;&amp;lt;p&amp;gt;Commonly used calculus symbols include &amp;amp;alpha;, &amp;amp;beta; and &amp;amp;theta; &amp;lt;/p&amp;gt;&amp;quot; } 返回内容中包含的词元里，可以看到 HTML 字符已被转换为它们的解码后的值：
{ &amp;quot;tokens&amp;quot;: [ { &amp;quot;token&amp;quot;: &amp;quot;\nCommonly used calculus symbols include α, β and θ \n&amp;quot;, &amp;quot;start_offset&amp;quot;: 0, &amp;quot;end_offset&amp;quot;: 74, &amp;quot;type&amp;quot;: &amp;quot;word&amp;quot;, &amp;quot;position&amp;quot;: 0 } ] } 参数说明 # html_strip 字符过滤器可以使用以下参数进行配置。</description></item><item><title>匹配替换字符过滤器</title><link>/easysearch/v1.15.2/docs/references/text-analysis/character-filters/pattern-replace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.2/docs/references/text-analysis/character-filters/pattern-replace/</guid><description>匹配替换字符过滤器 # 匹配替换（pattern_replace）字符过滤器使你能够使用正则表达式来定义文本匹配替换的模式。对于文本转换的高阶需求场景，尤其是在处理复杂的字符串模式时，它是一种的灵活工具。
这个过滤器会用替换符合匹配模式的所有匹配项，从而可以轻松地对输入文本进行替换、删除或复杂的修改。你可以在分词之前使用它对输入内容进行规范化处理。
参考样例 # 为了规范电话号码，你可以使用正则表达式 [\\s()-]+去替换号码里的特殊格式：
[]：定义一个字符类，意味着它将匹配方括号内的任意一个字符。 \\s：匹配任何空白字符，如空格、制表符或换行符。 ()：匹配字面意义上的括号（( 或 )）。 -：匹配字面意义上的连字符（-）。 +：指定该模式应匹配前面字符的一次或多次出现。 模式 [\\s()-]+ 将匹配由一个或多个空白字符、括号或连字符组成的任意序列，并将其从输入文本中移除。这确保了电话号码得到规范处理，结果将仅包含数字。
以下请求通过移除空格、连字符和括号来规范电话号码：
GET /_analyze { &amp;quot;tokenizer&amp;quot;: &amp;quot;standard&amp;quot;, &amp;quot;char_filter&amp;quot;: [ { &amp;quot;type&amp;quot;: &amp;quot;pattern_replace&amp;quot;, &amp;quot;pattern&amp;quot;: &amp;quot;[\\s()-]+&amp;quot;, &amp;quot;replacement&amp;quot;: &amp;quot;&amp;quot; } ], &amp;quot;text&amp;quot;: &amp;quot;(555) 123-4567&amp;quot; } 返回内容中包含生成的词元：
{ &amp;quot;tokens&amp;quot;: [ { &amp;quot;token&amp;quot;: &amp;quot;5551234567&amp;quot;, &amp;quot;start_offset&amp;quot;: 1, &amp;quot;end_offset&amp;quot;: 14, &amp;quot;type&amp;quot;: &amp;quot;&amp;lt;NUM&amp;gt;&amp;quot;, &amp;quot;position&amp;quot;: 0 } ] } 参数说明 # pattern_replace 字符过滤器必须使用以下参数进行配置。
参数 必需/可选 数据类型 描述 pattern 必需 字符串 用于匹配输入文本部分内容的正则表达式。过滤器会识别并匹配此模式以执行替换操作。 replacement 可选 字符串 用于替换匹配内容的字符串。使用空字符串（&amp;quot;&amp;quot;）可移除匹配到的文本。默认值为空字符串（&amp;quot;&amp;quot;）。 创建自定义分词器 # 以下请求创建一个索引，该索引带有一个配置了 pattern_replace 字符过滤器的自定义分词器。此过滤器会从数字中移除货币符号以及千位分隔符（包括欧洲的 “.</description></item><item><title>映射字符过滤器</title><link>/easysearch/v1.15.2/docs/references/text-analysis/character-filters/mapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.2/docs/references/text-analysis/character-filters/mapping/</guid><description>映射字符过滤器 # 映射（mapping）字符过滤器接受一个用于字符替换的键值对映射。每当该过滤器遇到与某个键匹配的字符串时，它就会用相应的值来替换这些字符。替换值可以是空字符串。
该过滤器采用贪婪匹配方式，这意味着会匹配最长的匹配结果。
在分词过程之前，需要进行特定文本替换的场景下，映射字符过滤器会很有帮助。
参考样例 # 以下请求配置了一个映射字符过滤器，该过滤器可将罗马数字（如 I、II 或 III）转换为对应的阿拉伯数字（1、2 和 3）：
GET /_analyze { &amp;quot;tokenizer&amp;quot;: &amp;quot;keyword&amp;quot;, &amp;quot;char_filter&amp;quot;: [ { &amp;quot;type&amp;quot;: &amp;quot;mapping&amp;quot;, &amp;quot;mappings&amp;quot;: [ &amp;quot;I =&amp;gt; 1&amp;quot;, &amp;quot;II =&amp;gt; 2&amp;quot;, &amp;quot;III =&amp;gt; 3&amp;quot;, &amp;quot;IV =&amp;gt; 4&amp;quot;, &amp;quot;V =&amp;gt; 5&amp;quot; ] } ], &amp;quot;text&amp;quot;: &amp;quot;I have III apples and IV oranges&amp;quot; } 返回内容中包含一个词元，其中罗马数字已被替换为阿拉伯数字：
{ &amp;quot;tokens&amp;quot;: [ { &amp;quot;token&amp;quot;: &amp;quot;1 have 3 apples and 4 oranges&amp;quot;, &amp;quot;start_offset&amp;quot;: 0, &amp;quot;end_offset&amp;quot;: 32, &amp;quot;type&amp;quot;: &amp;quot;word&amp;quot;, &amp;quot;position&amp;quot;: 0 } ] } 参数说明 # 你可以使用以下任意一个参数来配置键值映射。</description></item></channel></rss>