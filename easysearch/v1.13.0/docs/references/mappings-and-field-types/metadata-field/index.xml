<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>元数据字段 on INFINI Easysearch</title><link>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/</link><description>Recent content in 元数据字段 on INFINI Easysearch</description><generator>Hugo -- gohugo.io</generator><atom:link href="/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/index.xml" rel="self" type="application/rss+xml"/><item><title>ID 属性</title><link>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/id/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/id/</guid><description>ID 属性 # Easysearch 中的每个文档都有一个唯一的 _id 字段。此字段已被索引，允许您使用 GET API 或 ids 查询 检索文档。
如果您未提供 _id 值，则 Easysearch 会自动为文档生成一个。
以下示例请求创建一个名为 test-index1 的索引，并添加两个具有不同 _id 值的文档：
PUT test-index1/_doc/1 { &amp;quot;text&amp;quot;: &amp;quot;Document with ID 1&amp;quot; } PUT test-index1/_doc/2?refresh=true { &amp;quot;text&amp;quot;: &amp;quot;Document with ID 2&amp;quot; } 您可以使用 _id 字段查询文档，如以下示例请求所示：
GET test-index1/_search { &amp;quot;query&amp;quot;: { &amp;quot;terms&amp;quot;: { &amp;quot;_id&amp;quot;: [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;] } } } 返回 _id 值为 1 和 2 的两个文档：
{ &amp;quot;took&amp;quot;: 10, &amp;quot;timed_out&amp;quot;: false, &amp;quot;_shards&amp;quot;: { &amp;quot;total&amp;quot;: 1, &amp;quot;successful&amp;quot;: 1, &amp;quot;skipped&amp;quot;: 0, &amp;quot;failed&amp;quot;: 0 }, &amp;quot;hits&amp;quot;: { &amp;quot;total&amp;quot;: { &amp;quot;value&amp;quot;: 2, &amp;quot;relation&amp;quot;: &amp;quot;eq&amp;quot; }, &amp;quot;max_score&amp;quot;: 1, &amp;quot;hits&amp;quot;: [ { &amp;quot;_index&amp;quot;: &amp;quot;test-index1&amp;quot;, &amp;quot;_id&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;_score&amp;quot;: 1, &amp;quot;_source&amp;quot;: { &amp;quot;text&amp;quot;: &amp;quot;Document with ID 1&amp;quot; } }, { &amp;quot;_index&amp;quot;: &amp;quot;test-index1&amp;quot;, &amp;quot;_id&amp;quot;: &amp;quot;2&amp;quot;, &amp;quot;_score&amp;quot;: 1, &amp;quot;_source&amp;quot;: { &amp;quot;text&amp;quot;: &amp;quot;Document with ID 2&amp;quot; } } ] } _id 字段的限制 # 虽然 _id 字段可以在各种查询中使用，但它在聚合、排序和脚本中的使用受到限制。如果您需要对 _id 字段进行排序或聚合，建议将 _id 内容复制到另一个启用了 doc_values 的字段中。</description></item><item><title>元数据属性</title><link>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/meta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/meta/</guid><description>Meta 元数据属性 # _meta 字段是一个映射属性，允许您为索引映射附加自定义元数据。您的应用程序可以使用这些元数据来存储与您的用例相关的信息，如版本控制、所有权、分类或审计。
用法 # 您可以在创建新索引或更新现有索引的映射时定义 _meta 字段，如以下示例所示：
PUT my-index { &amp;quot;mappings&amp;quot;: { &amp;quot;_meta&amp;quot;: { &amp;quot;application&amp;quot;: &amp;quot;MyApp&amp;quot;, &amp;quot;version&amp;quot;: &amp;quot;1.2.3&amp;quot;, &amp;quot;author&amp;quot;: &amp;quot;John Doe&amp;quot; }, &amp;quot;properties&amp;quot;: { &amp;quot;title&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot; }, &amp;quot;description&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot; } } } } 在此示例中，添加了三个自定义元数据字段：application、version 和 author。您的应用程序可以使用这些字段来存储有关索引的任何相关信息，例如它所属的应用程序、应用程序版本或索引的作者。
您可以使用 Put Mapping API 操作更新 _meta 字段，如以下示例所示：
PUT my-index/_mapping { &amp;quot;_meta&amp;quot;: { &amp;quot;application&amp;quot;: &amp;quot;MyApp&amp;quot;, &amp;quot;version&amp;quot;: &amp;quot;1.3.0&amp;quot;, &amp;quot;author&amp;quot;: &amp;quot;Jane Smith&amp;quot; } } 检索元数据信息 # 您可以使用 Get Mapping API 操作检索索引的 _meta 信息，如以下示例所示：</description></item><item><title>字段名称</title><link>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/field-names/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/field-names/</guid><description>Field names 字段名称 # _field_names 字段索引包含非空值的字段名称。可以使用 exists 查询来识别指定字段是否具有非空值的文档。
但是，只有当 doc_values 和 norms 都被禁用时，_field_names 才会索引字段名称。如果启用了 doc_values 或 norms 中的任何一个，则 exists 查询仍然可以工作，但不会依赖 _field_names 字段。
映射示例 # PUT testindex { &amp;quot;mappings&amp;quot;: { &amp;quot;_field_names&amp;quot;: { &amp;quot;enabled&amp;quot;: &amp;quot;true&amp;quot; }, &amp;quot;properties&amp;quot;: { &amp;quot;title&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;, &amp;quot;doc_values&amp;quot;: false, &amp;quot;norms&amp;quot;: false }, &amp;quot;description&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;, &amp;quot;doc_values&amp;quot;: true, &amp;quot;norms&amp;quot;: false }, &amp;quot;price&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;float&amp;quot;, &amp;quot;doc_values&amp;quot;: false } } } }</description></item><item><title>忽略属性</title><link>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/ignored/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/ignored/</guid><description>Ignored 忽略属性 # _ignored 字段帮助您管理文档中与格式错误数据相关的问题。由于在 索引映射中启用了 ignore_malformed 设置，此字段用于存储在数据索引过程中被忽略的字段名称。
_ignored 字段允许您搜索和识别包含被忽略字段的文档，以及被忽略的具体字段名称。这对于故障排除很有用。
您可以使用 term、terms 和 exists 查询来查询 _ignored 字段。
只有当索引映射中启用了 ignore_malformed 设置时，才会填充 _ignored 字段。如果 ignore_malformed 设置为 false（默认值），则格式错误的字段将导致整个文档被拒绝，并且不会填写 _ignored 字段。
以下示例展示了如何使用 _ignored 字段：
GET _search { &amp;quot;query&amp;quot;: { &amp;quot;exists&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;_ignored&amp;quot; } } } 使用 _ignored 字段的索引请求示例 # 以下示例向 test-ignored 索引添加一个新文档，其中 ignore_malformed 设置为 true，这样在数据索引时不会抛出错误：
PUT test-ignored { &amp;quot;mappings&amp;quot;: { &amp;quot;properties&amp;quot;: { &amp;quot;title&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot; }, &amp;quot;length&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;long&amp;quot;, &amp;quot;ignore_malformed&amp;quot;: true } } } } POST test-ignored/_doc { &amp;quot;title&amp;quot;: &amp;quot;correct text&amp;quot;, &amp;quot;length&amp;quot;: &amp;quot;not a number&amp;quot; } GET test-ignored/_search { &amp;quot;query&amp;quot;: { &amp;quot;exists&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;_ignored&amp;quot; } } } 示例返回内容 # { &amp;quot;took&amp;quot;: 42, &amp;quot;timed_out&amp;quot;: false, &amp;quot;_shards&amp;quot;: { &amp;quot;total&amp;quot;: 1, &amp;quot;successful&amp;quot;: 1, &amp;quot;skipped&amp;quot;: 0, &amp;quot;failed&amp;quot;: 0 }, &amp;quot;hits&amp;quot;: { &amp;quot;total&amp;quot;: { &amp;quot;value&amp;quot;: 1, &amp;quot;relation&amp;quot;: &amp;quot;eq&amp;quot; }, &amp;quot;max_score&amp;quot;: 1, &amp;quot;hits&amp;quot;: [ { &amp;quot;_index&amp;quot;: &amp;quot;test-ignored&amp;quot;, &amp;quot;_id&amp;quot;: &amp;quot;qcf0wZABpEYH7Rw9OT7F&amp;quot;, &amp;quot;_score&amp;quot;: 1, &amp;quot;_ignored&amp;quot;: [ &amp;quot;length&amp;quot; ], &amp;quot;_source&amp;quot;: { &amp;quot;title&amp;quot;: &amp;quot;correct text&amp;quot;, &amp;quot;length&amp;quot;: &amp;quot;not a number&amp;quot; } } ] } } 忽略指定字段 # 您可以使用 term 查询来查找特定字段被忽略的文档，如以下示例请求所示：</description></item><item><title>源文档属性</title><link>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/source/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/source/</guid><description>Source 源文档属性 # _source 字段包含已索引的原始 JSON 文档主体。虽然此字段不可搜索，但它会被存储，以便在执行获取请求（如 get 和 search）时可以返回完整文档。
禁用_source # 您可以通过将 enabled 参数设置为 false 来禁用 _source 字段，如以下示例所示：
PUT sample-index1 { &amp;quot;mappings&amp;quot;: { &amp;quot;_source&amp;quot;: { &amp;quot;enabled&amp;quot;: false } } } 禁用 _source 字段可能会影响某些功能的可用性，例如 update、update_by_query 和 reindex API，以及使用原始索引文档查询或聚合的能力。
包含或排除某些字段 # 您可以使用 includes 和 excludes 参数选择 _source 字段的内容。如以下示例：
PUT logs { &amp;quot;mappings&amp;quot;: { &amp;quot;_source&amp;quot;: { &amp;quot;includes&amp;quot;: [ &amp;quot;*.count&amp;quot;, &amp;quot;meta.*&amp;quot; ], &amp;quot;excludes&amp;quot;: [ &amp;quot;meta.description&amp;quot;, &amp;quot;meta.other.*&amp;quot; ] } } } 这些字段不会存储在 _source 中，但您仍然可以搜索它们，因为数据仍然被索引。</description></item><item><title>索引属性</title><link>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/</guid><description>Index 索引属性 # 当跨多个索引进行查询时，您可能需要根据文档所在的索引来过滤结果。index 字段根据文档的索引来匹配文档。
以下示例创建两个索引，products 和 customers，并向每个索引添加一个文档：
PUT products/_doc/1 { &amp;quot;name&amp;quot;: &amp;quot;Widget X&amp;quot; } PUT customers/_doc/2 { &amp;quot;name&amp;quot;: &amp;quot;John Doe&amp;quot; } 然后，您可以查询这两个索引，并使用 _index 属性过滤结果，如以下示例请求所示：
GET products,customers/_search { &amp;quot;query&amp;quot;: { &amp;quot;terms&amp;quot;: { &amp;quot;_index&amp;quot;: [&amp;quot;products&amp;quot;, &amp;quot;customers&amp;quot;] } }, &amp;quot;aggs&amp;quot;: { &amp;quot;index_groups&amp;quot;: { &amp;quot;terms&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;_index&amp;quot;, &amp;quot;size&amp;quot;: 10 } } }, &amp;quot;sort&amp;quot;: [ { &amp;quot;_index&amp;quot;: { &amp;quot;order&amp;quot;: &amp;quot;desc&amp;quot; } } ], &amp;quot;script_fields&amp;quot;: { &amp;quot;index_name&amp;quot;: { &amp;quot;script&amp;quot;: { &amp;quot;lang&amp;quot;: &amp;quot;painless&amp;quot;, &amp;quot;source&amp;quot;: &amp;quot;doc['_index'].</description></item><item><title>路由属性</title><link>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.13.0/docs/references/mappings-and-field-types/metadata-field/routing/</guid><description>Routing 路由属性 # Easysearch 使用哈希算法将文档路由到索引中的特定分片。默认情况下，文档的 _id 字段用作路由值，但您也可以为每个文档指定自定义路由值。
默认路由 # 以下是 Easysearch 的默认路由公式。_routing 值是文档的 _id。
shard_num = hash(_routing) % num_primary_shards 自定义路由 # 您可以在索引文档时指定自定义路由值，如以下示例所示：
PUT sample-index1/_doc/1?routing=JohnDoe1 { &amp;quot;title&amp;quot;: &amp;quot;This is a document&amp;quot; } 在此示例中，文档使用的路由值是 JohnDoe1 而不是默认的 _id 。
在检索、删除或更新文档时，您必须提供相同的路由值，如以下示例所示：
GET sample-index1/_doc/1?routing=JohnDoe1 通过路由查询 # 您可以使用 _routing 字段根据文档的路由值进行查询，如以下示例所示。此查询仅搜索与 JohnDoe1 路由值关联的分片：
GET sample-index1/_search { &amp;quot;query&amp;quot;: { &amp;quot;terms&amp;quot;: { &amp;quot;_routing&amp;quot;: [ &amp;quot;JohnDoe1&amp;quot; ] } } } 设置路由为必需项 # 您可以使索引上的所有 CRUD 操作都必需提供路由值，如以下示例。如果您尝试在不提供路由值的情况下索引文档，Easysearch 将抛出异常。</description></item></channel></rss>