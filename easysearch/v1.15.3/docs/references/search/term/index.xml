<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>精确查询 on INFINI Easysearch</title><link>/easysearch/v1.15.3/docs/references/search/term/</link><description>Recent content in 精确查询 on INFINI Easysearch</description><generator>Hugo -- gohugo.io</generator><atom:link href="/easysearch/v1.15.3/docs/references/search/term/index.xml" rel="self" type="application/rss+xml"/><item><title>Exists 查询</title><link>/easysearch/v1.15.3/docs/references/search/term/exists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.3/docs/references/search/term/exists/</guid><description>Exists 查询 # 使用 exists 查询来搜索包含特定字段的文档。
如果出现以下任一情况，索引值将不会存在于文档字段中：
该字段在映射中指定了 &amp;quot;index&amp;quot; : false 。 源 JSON 中的字段为 null 或 [] 。 字段值的长度超过了映射中 ignore_above 的设置。 字段值格式错误，并且映射中定义了 ignore_malformed 。 索引值将在以下情况下存在于文档字段中：
该值是一个包含一个或多个 null 元素和一个或多个非 null 元素的数组（例如， [&amp;quot;one&amp;quot;, null] ）。 该值是一个空字符串（ &amp;quot;&amp;quot; 或 &amp;quot;-&amp;quot; ）。 该值是一个自定义的 null_value ，如字段映射中所定义。 参考样例 # 例如，假设索引包含以下两个文档：
PUT testindex/_doc/1 { &amp;quot;title&amp;quot;: &amp;quot;The wind rises&amp;quot; } PUT testindex/_doc/2 { &amp;quot;title&amp;quot;: &amp;quot;Gone with the wind&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;A 1939 American epic historical film&amp;quot; } 以下查询搜索包含 description 字段的文档：</description></item><item><title>IDs 查询</title><link>/easysearch/v1.15.3/docs/references/search/term/ids/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.3/docs/references/search/term/ids/</guid><description>IDs 查询 # 使用 ids 查询在 _id 字段中搜索具有一个或多个特定文档 ID 值的文档。例如，以下查询请求 ID 为 34229 和 91296 的文档：
GET shakespeare/_search { &amp;quot;query&amp;quot;: { &amp;quot;ids&amp;quot;: { &amp;quot;values&amp;quot;: [ 34229, 91296 ] } } } 参数说明 # 查询接受以下参数。
参数 数据类型 描述 values Array of strings 要搜索的文档 ID。必填。 boost Float 一个浮点值，用于指定此字段相对于相关性分数的权重。值高于 1.0 会增加字段的相关性。值介于 0.0 和 1.0 之间会降低字段的相关性。默认值为 1.0。</description></item><item><title>Term 精确查询</title><link>/easysearch/v1.15.3/docs/references/search/term/term/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.3/docs/references/search/term/term/</guid><description>Term 精确查询 # 使用 term 查询在字段中搜索确切的词项。例如，以下查询搜索包含确切的行号的行：
GET shakespeare/_search { &amp;quot;query&amp;quot;: { &amp;quot;term&amp;quot;: { &amp;quot;line_id&amp;quot;: { &amp;quot;value&amp;quot;: &amp;quot;61809&amp;quot; } } } } 当文档被索引时， text 字段会被分词。分词包括对文本进行分词和转换为小写，并移除标点符号。与分词查询文本的 match 查询不同， term 查询仅匹配确切的词项，因此可能不会返回具有相关性的结果。避免在 text 字段上使用 term 查询。更多信息，请参阅精确查询与全文检索的对比。
您可以在 case_insensitive 参数中指定查询应不区分大小写：
GET shakespeare/_search { &amp;quot;query&amp;quot;: { &amp;quot;term&amp;quot;: { &amp;quot;speaker&amp;quot;: { &amp;quot;value&amp;quot;: &amp;quot;HAMLET&amp;quot;, &amp;quot;case_insensitive&amp;quot;: true } } } } 返回内容包含匹配的文档，无论大小写是否有差异：
&amp;quot;hits&amp;quot;: { &amp;quot;total&amp;quot;: { &amp;quot;value&amp;quot;: 1582, &amp;quot;relation&amp;quot;: &amp;quot;eq&amp;quot; }, &amp;quot;max_score&amp;quot;: 2, &amp;quot;hits&amp;quot;: [ { &amp;quot;_index&amp;quot;: &amp;quot;shakespeare&amp;quot;, &amp;quot;_id&amp;quot;: &amp;quot;32700&amp;quot;, &amp;quot;_score&amp;quot;: 2, &amp;quot;_source&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;line&amp;quot;, &amp;quot;line_id&amp;quot;: 32701, &amp;quot;play_name&amp;quot;: &amp;quot;Hamlet&amp;quot;, &amp;quot;speech_number&amp;quot;: 9, &amp;quot;line_number&amp;quot;: &amp;quot;1.</description></item><item><title>前缀查询</title><link>/easysearch/v1.15.3/docs/references/search/term/prefix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.3/docs/references/search/term/prefix/</guid><description>前缀查询 # 使用 prefix 查询可以搜索以特定前缀开头的词。例如，以下查询会搜索 speaker 字段包含以 KING H 开头的词的文档。
GET shakespeare/_search { &amp;quot;query&amp;quot;: { &amp;quot;prefix&amp;quot;: { &amp;quot;speaker&amp;quot;: &amp;quot;KING H&amp;quot; } } } 为了提供参数，您可以使用与前面的查询相同的形式，并使用以下扩展语法
GET shakespeare/_search { &amp;quot;query&amp;quot;: { &amp;quot;prefix&amp;quot;: { &amp;quot;speaker&amp;quot;: { &amp;quot;value&amp;quot;: &amp;quot;KING H&amp;quot; } } } } 参数说明 # 查询接受字段名称（ &amp;lt;field&amp;gt; ）作为顶级参数：
GET _search { &amp;quot;query&amp;quot;: { &amp;quot;prefix&amp;quot;: { &amp;quot;&amp;lt;field&amp;gt;&amp;quot;: { &amp;quot;value&amp;quot;: &amp;quot;sample&amp;quot;, ... } } } } &amp;lt;field&amp;gt; 接受以下参数。除了 value 之外，所有参数都是可选的。
参数 数据类型 描述 value String 在由 指定的字段中搜索的词项。 boost Float 一个浮点值，用于指定该字段对相关性评分的权重。值大于 1.</description></item><item><title>多词项查询</title><link>/easysearch/v1.15.3/docs/references/search/term/terms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.3/docs/references/search/term/terms/</guid><description>多词项查询 # 使用 terms 多词项查询在同一字段中搜索多个词项。例如，以下查询搜索具有 ID 61809 和 61810 的文档：
GET shakespeare/_search { &amp;quot;query&amp;quot;: { &amp;quot;terms&amp;quot;: { &amp;quot;line_id&amp;quot;: [ &amp;quot;61809&amp;quot;, &amp;quot;61810&amp;quot; ] } } } 如果文档与数组中的任何词项匹配，则会返回该文档。
默认情况下， terms 查询中允许的最大词项数量为 65,536。要更改最大词项数量，请更新 index.max_terms_count 设置。
为了更好的查询性能，请传递包含已排序词项的长期数组（按 UTF-8 字节值升序排序）。
根据高亮器类型和查询中词项的数量，高亮显示词项查询结果的能力可能无法保证。
参数说明 # 该查询接受以下参数。所有参数都是可选的。
参数 数据类型 描述 &amp;lt;field&amp;gt; String 要搜索的字段。只有当文档的字段值与查询中至少一个词项完全匹配（包括正确的空格和大小写）时，该文档才会出现在结果中。 boost Float 一个浮点数值，用于指定该字段对相关性分数的权重。大于 1.0 的值会增加字段的权重。介于 0.0 和 1.0 之间的值会降低字段的权重。默认值为 1.0。 _name String 查询标签的查询名称。可选。 value_type String 指定用于过滤的值类型。有效值为 default 和 bitmap 。如果省略，则值默认为 default 。 条件查找 # 条件查找功能会检索单个文档的字段值并将其用作搜索词。您可以使用条件查找功能来搜索大量词项。</description></item><item><title>模糊查询</title><link>/easysearch/v1.15.3/docs/references/search/term/fuzzy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.3/docs/references/search/term/fuzzy/</guid><description>模糊查询 # 模糊查询用于搜索包含与搜索词相似的词条的文档，相似度在允许的最大 Damerau-Levenshtein 距离范围内。Damerau-Levenshtein 距离衡量将一个词条变为另一个词条所需的一字符变化的数量。这些变化包括：
Replacements: 替换，cat 变为 bat Insertions: 插入，cat 变为 cats Deletions: 删除，cat 变为 at Transpositions: 转换，cat 变为 act 模糊查询会生成一个包含所有可能扩展的搜索词列表，这些扩展在 Damerau-Levenshtein 距离内。你可以在 max_expansions 字段中指定此类扩展的最大数量。查询然后会搜索匹配任何扩展的文档。如果你将 transpositions 参数设置为 false ，则搜索将使用经典的 Levenshtein 距离。
以下示例查询搜索发言者 HALET （误写为 HAMLET ）。未指定最大编辑距离，因此使用默认的 AUTO 编辑距离：
GET shakespeare/_search { &amp;quot;query&amp;quot;: { &amp;quot;fuzzy&amp;quot;: { &amp;quot;speaker&amp;quot;: { &amp;quot;value&amp;quot;: &amp;quot;HALET&amp;quot; } } } } 返回内容包含所有发言者为 HAMLET 的文档。
以下示例查询使用高级参数搜索单词 HALET ：
GET shakespeare/_search { &amp;quot;query&amp;quot;: { &amp;quot;fuzzy&amp;quot;: { &amp;quot;speaker&amp;quot;: { &amp;quot;value&amp;quot;: &amp;quot;HALET&amp;quot;, &amp;quot;fuzziness&amp;quot;: &amp;quot;2&amp;quot;, &amp;quot;max_expansions&amp;quot;: 40, &amp;quot;prefix_length&amp;quot;: 0, &amp;quot;transpositions&amp;quot;: true, &amp;quot;rewrite&amp;quot;: &amp;quot;constant_score&amp;quot; } } } } 参数说明 # 查询接受字段名称（ ）作为顶级参数：</description></item><item><title>正则查询</title><link>/easysearch/v1.15.3/docs/references/search/term/regexp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.3/docs/references/search/term/regexp/</guid><description>正则查询 # 使用 regexp 正则查询来搜索符合正则表达式的词项。有关编写正则表达式的更多信息，请参见正则表达式语法。
以下查询搜索以任何大写或小写字母开头的任何词项 amlet ：
GET shakespeare/_search { &amp;quot;query&amp;quot;: { &amp;quot;regexp&amp;quot;: { &amp;quot;play_name&amp;quot;: &amp;quot;[a-zA-Z]amlet&amp;quot; } } } 请注意以下重要事项：
正则表达式应用于字段中的词条（即，标记/token），而不是整个字段。 默认情况下，正则表达式的最大长度为 1,000 个字符。要更改最大长度，请更新 index.max_regex_length 设置。 正则表达式使用 Lucene 语法，这与更标准的实现有所不同。请充分测试以确保获得预期的结果。要了解更多信息，请参阅 Lucene 文档。 为了提高正则表达式查询的性能，避免使用没有前缀或后缀的通配符模式，例如 .* 或 .*?+ 。 regexp 查询可能会非常耗时，并且需要将 search.allow_expensive_queries 设置为 true 。在频繁执行 regexp 查询之前，请测试其对集群性能的影响，并考虑使用其他可能达到类似效果的查询。 通配符字段类型构建了一个特别为通配符和正则表达式查询设计的索引。 参数说明 # 查询接受字段名称（ &amp;lt;field&amp;gt; ）作为顶级参数：
GET _search { &amp;quot;query&amp;quot;: { &amp;quot;regexp&amp;quot;: { &amp;quot;&amp;lt;field&amp;gt;&amp;quot;: { &amp;quot;value&amp;quot;: &amp;quot;[Ss]ample&amp;quot;, ... } } } } &amp;lt;field&amp;gt; 接受以下参数。除了 value 之外，所有参数都是可选的。</description></item><item><title>范围查询</title><link>/easysearch/v1.15.3/docs/references/search/term/range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.3/docs/references/search/term/range/</guid><description>范围查询 # 您可以使用 range 范围查询搜索字段中的值范围。
要搜索 line_id 值为 &amp;gt;= 10 和 &amp;lt;= 20 的文档，请使用以下请求：
GET shakespeare/_search { &amp;quot;query&amp;quot;: { &amp;quot;range&amp;quot;: { &amp;quot;line_id&amp;quot;: { &amp;quot;gte&amp;quot;: 10, &amp;quot;lte&amp;quot;: 20 } } } } 运算符 # 范围查询中的字段参数接受以下可选运算符参数：
gte：大于或等于 gt：大于 lte：小于或等于 lt：小于 日期字段 # 您可以对包含日期的字段使用范围查询。例如，假设您有一个products索引，并且想要查找 2019 年添加的所有产品：
GET products/_search { &amp;quot;query&amp;quot;: { &amp;quot;range&amp;quot;: { &amp;quot;created&amp;quot;: { &amp;quot;gte&amp;quot;: &amp;quot;2019/01/01&amp;quot;, &amp;quot;lte&amp;quot;: &amp;quot;2019/12/31&amp;quot; } } } } 日期格式 # 要在查询中使用字段映射格式以外的日期格式，请在 format 字段中指定它。</description></item><item><title>词项集查询</title><link>/easysearch/v1.15.3/docs/references/search/term/terms-set/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.3/docs/references/search/term/terms-set/</guid><description>词项集查询 # 使用 terms_set 词项集查询，您可以在指定字段中搜索匹配一定数量的精确词的文档。与 terms 查询类似，您可以指定返回文档所需的匹配词的最小数量。您可以直接在索引字段中指定这个数量，也可以通过脚本指定。
例如，假设有一个索引，其中包含学生的姓名和他们所选的课程。在设置该索引的映射时，您需要提供一个数值字段，以指定返回文档所需的最小匹配项数量：
PUT students { &amp;quot;mappings&amp;quot;: { &amp;quot;properties&amp;quot;: { &amp;quot;name&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;classes&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot; }, &amp;quot;min_required&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot; } } } } 接下来，索引两个与学生相关的文档：
PUT students/_doc/1 { &amp;quot;name&amp;quot;: &amp;quot;Mary Major&amp;quot;, &amp;quot;classes&amp;quot;: [ &amp;quot;CS101&amp;quot;, &amp;quot;CS102&amp;quot;, &amp;quot;MATH101&amp;quot; ], &amp;quot;min_required&amp;quot;: 2 } PUT students/_doc/2 { &amp;quot;name&amp;quot;: &amp;quot;John Doe&amp;quot;, &amp;quot;classes&amp;quot;: [ &amp;quot;CS101&amp;quot;, &amp;quot;MATH101&amp;quot;, &amp;quot;ENG101&amp;quot; ], &amp;quot;min_required&amp;quot;: 2 } 现在搜索已经修读了以下至少两门课程的学生： CS101 ， CS102 ， MATH101 ：</description></item><item><title>通配符查询</title><link>/easysearch/v1.15.3/docs/references/search/term/wildcard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.3/docs/references/search/term/wildcard/</guid><description>通配符查询 # 使用 wildcard 通配符查询来搜索匹配通配符模式的词项。通配符查询支持以下操作符。
操作符 描述 * 匹配零个或多个字符。 ? 匹配任意单个字符。 case_insensitive 若 true 为真，则通配符查询不区分大小写；若 false 为真，则通配符查询区分大小写。默认情况下 false 为真（区分大小写）。 若进行区分大小写的搜索，查找以 H 开头且以 Y 结尾的词，可使用以下请求：
GET shakespeare/_search { &amp;quot;query&amp;quot;: { &amp;quot;wildcard&amp;quot;: { &amp;quot;speaker&amp;quot;: { &amp;quot;value&amp;quot;: &amp;quot;H*Y&amp;quot;, &amp;quot;case_insensitive&amp;quot;: false } } } } 如果你将 * 更改为 ? ，则不会有任何匹配，因为 ? 引用的是一个单一字符。
通配符查询通常速度较慢，因为它们需要遍历大量的词项。避免在查询的开头使用通配符字符，因为这在资源和时间方面都可能是一项非常昂贵的操作。
通配符(wildcard)字段类型构建了一个特别为通配符和正则表达式查询设计的索引。
参数说明 # 查询接受字段名称（ &amp;lt;field&amp;gt; ）作为顶级参数：</description></item></channel></rss>