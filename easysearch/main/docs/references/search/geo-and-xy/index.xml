<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>地理查询 on INFINI Easysearch</title><link>/easysearch/main/docs/references/search/geo-and-xy/</link><description>Recent content in 地理查询 on INFINI Easysearch</description><generator>Hugo -- gohugo.io</generator><atom:link href="/easysearch/main/docs/references/search/geo-and-xy/index.xml" rel="self" type="application/rss+xml"/><item><title>地理多边形查询</title><link>/easysearch/main/docs/references/search/geo-and-xy/geopolygon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/main/docs/references/search/geo-and-xy/geopolygon/</guid><description>地理多边形查询 # 地理多边形查询返回包含指定多边形内地理点的文档。如果一个文档包含多个地理点，只要至少有一个地理点匹配查询，该文档就匹配查询。
多边形通过坐标形式的顶点列表指定。与为地理形状字段指定多边形不同，多边形不需要闭合（指定第一个和最后一个点相同是不必要的）。尽管点不需要遵循顺时针或逆时针顺序，但建议您按照这两种顺序之一列出它们。这将确保正确捕获多边形。
搜索的文档字段必须映射为 geo_point 。
参考样例 # 创建一个映射，将 point 字段映射为 geo_point ：
PUT /testindex1 { &amp;quot;mappings&amp;quot;: { &amp;quot;properties&amp;quot;: { &amp;quot;point&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;geo_point&amp;quot; } } } } 索引一个地理点，指定其纬度和经度：
PUT testindex1/_doc/1 { &amp;quot;point&amp;quot;: { &amp;quot;lat&amp;quot;: 73.71, &amp;quot;lon&amp;quot;: 41.32 } } 搜索包含指定 geo_polygon 的 point 对象的文档：
GET /testindex1/_search { &amp;quot;query&amp;quot;: { &amp;quot;bool&amp;quot;: { &amp;quot;must&amp;quot;: { &amp;quot;match_all&amp;quot;: {} }, &amp;quot;filter&amp;quot;: { &amp;quot;geo_polygon&amp;quot;: { &amp;quot;point&amp;quot;: { &amp;quot;points&amp;quot;: [ { &amp;quot;lat&amp;quot;: 74.</description></item><item><title>地理形状查询</title><link>/easysearch/main/docs/references/search/geo-and-xy/geoshape/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/main/docs/references/search/geo-and-xy/geoshape/</guid><description>地理形状查询 # 使用地理形状（geoshape）查询来搜索包含地理点（geopoint）或地理形状字段（geoshape）的文档。您可以使用查询中定义的地理形状或使用预索引的地理形状来过滤文档。
搜索的文档字段必须映射为 geo_point 或 geo_shape 。
空间关系 # 当您向地理形状查询提供地理形状时，文档中的地理点和地理形状字段将使用以下空间关系与提供的形状进行匹配。
关系 描述 支持地理字段类型 INTERSECTS （默认）匹配与查询中提供的形状相交的 geopoint 或 geoshape 的文档。 geo_point, geo_shape DISJOINT 匹配与查询中提供的形状不相交的 geoshape 的文档。 geo_shape WITHIN 匹配完全位于查询中提供的形状内的 geoshape 的文档。 geo_shape CONTAINS 匹配完全包含查询中提供的形状的文档。 geo_shape 在 geoshape 查询中定义形状 # 您可以在 geoshape 查询中通过在查询时提供新的形状定义或引用另一个索引中预先索引的形状名称来定义形状以过滤文档。
使用新的形状定义 # 为了向地理形状查询提供新的形状，请在 geo_shape 字段中定义它。您必须以 GeoJSON 格式定义地理形状。</description></item><item><title>地理距离查询</title><link>/easysearch/main/docs/references/search/geo-and-xy/geodistance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/main/docs/references/search/geo-and-xy/geodistance/</guid><description>地理距离查询 # 地理距离查询返回包含地理点的文档，这些地理点位于提供的地理点指定距离内。如果一个文档包含多个地理点，只要至少有一个地理点与查询匹配，该文档就符合查询条件。
搜索的文档字段必须映射为 geo_point 。
参考样例 # 创建一个映射，将 point 字段映射为 geo_point ：
PUT testindex1 { &amp;quot;mappings&amp;quot;: { &amp;quot;properties&amp;quot;: { &amp;quot;point&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;geo_point&amp;quot; } } } } 索引一个地理点，指定其纬度和经度：
PUT testindex1/_doc/1 { &amp;quot;point&amp;quot;: { &amp;quot;lat&amp;quot;: 74.00, &amp;quot;lon&amp;quot;: 40.71 } } 搜索距离指定的 point 内包含指定 distance 对象的文档：
GET /testindex1/_search { &amp;quot;query&amp;quot;: { &amp;quot;bool&amp;quot;: { &amp;quot;must&amp;quot;: { &amp;quot;match_all&amp;quot;: {} }, &amp;quot;filter&amp;quot;: { &amp;quot;geo_distance&amp;quot;: { &amp;quot;distance&amp;quot;: &amp;quot;50mi&amp;quot;, &amp;quot;point&amp;quot;: { &amp;quot;lat&amp;quot;: 73.</description></item><item><title>地理边界框查询</title><link>/easysearch/main/docs/references/search/geo-and-xy/geo-bounding-box/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/main/docs/references/search/geo-and-xy/geo-bounding-box/</guid><description>地理边界框查询 # 要搜索包含地理点字段的文档，请使用地理边界框查询。地理边界框查询返回地理点位于查询中指定的边界框内的文档。如果一个文档包含多个地理点，只要至少有一个地理点位于边界框内，该文档就与查询匹配。
参考样例 # 您可以使用地理边界框查询来搜索包含地理点的文档。
创建一个映射，将 point 字段映射为 geo_point ：
PUT testindex1 { &amp;quot;mappings&amp;quot;: { &amp;quot;properties&amp;quot;: { &amp;quot;point&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;geo_point&amp;quot; } } } } 以经纬度作为对象索引三个地理点：
PUT testindex1/_doc/1 { &amp;quot;point&amp;quot;: { &amp;quot;lat&amp;quot;: 74.00, &amp;quot;lon&amp;quot;: 40.71 } } PUT testindex1/_doc/2 { &amp;quot;point&amp;quot;: { &amp;quot;lat&amp;quot;: 72.64, &amp;quot;lon&amp;quot;: 22.62 } } PUT testindex1/_doc/3 { &amp;quot;point&amp;quot;: { &amp;quot;lat&amp;quot;: 75.00, &amp;quot;lon&amp;quot;: 28.00 } } 搜索所有文档，并筛选出查询中定义的矩形内的点所在的文档：
GET testindex1/_search { &amp;quot;query&amp;quot;: { &amp;quot;bool&amp;quot;: { &amp;quot;must&amp;quot;: { &amp;quot;match_all&amp;quot;: {} }, &amp;quot;filter&amp;quot;: { &amp;quot;geo_bounding_box&amp;quot;: { &amp;quot;point&amp;quot;: { &amp;quot;top_left&amp;quot;: { &amp;quot;lat&amp;quot;: 75, &amp;quot;lon&amp;quot;: 28 }, &amp;quot;bottom_right&amp;quot;: { &amp;quot;lat&amp;quot;: 73, &amp;quot;lon&amp;quot;: 41 } } } } } } } 返回内容包含匹配的文档：</description></item></channel></rss>