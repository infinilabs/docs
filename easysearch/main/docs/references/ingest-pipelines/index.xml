<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>管道处理 on INFINI Easysearch</title><link>/easysearch/main/docs/references/ingest-pipelines/</link><description>Recent content in 管道处理 on INFINI Easysearch</description><generator>Hugo -- gohugo.io</generator><atom:link href="/easysearch/main/docs/references/ingest-pipelines/index.xml" rel="self" type="application/rss+xml"/><item><title>创建管道</title><link>/easysearch/main/docs/references/ingest-pipelines/create-ingest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/main/docs/references/ingest-pipelines/create-ingest/</guid><description>创建管道 # 使用创建管道 API 操作在 Easysearch 中创建或更新管道。请注意，该管道要求您至少定义一个处理器来指定如何更改文档。
创建路径 # 将 替换为您的管道 ID：
PUT _ingest/pipeline/&amp;lt;pipeline-id&amp;gt; 下面是一个 JSON 格式的示例，它创建了一个包含两个 set 处理器和一个 uppercase 处理器的采集管道。第一个 set 处理器将 grad_year 设置为 2023 ，第二个 set 处理器将 graduated 为 true 。 uppercase 处理器将 name 字段转换为大写。
PUT _ingest/pipeline/my-pipeline { &amp;quot;description&amp;quot;: &amp;quot;This pipeline processes student data&amp;quot;, &amp;quot;processors&amp;quot;: [ { &amp;quot;set&amp;quot;: { &amp;quot;description&amp;quot;: &amp;quot;Sets the graduation year to 2023&amp;quot;, &amp;quot;field&amp;quot;: &amp;quot;grad_year&amp;quot;, &amp;quot;value&amp;quot;: 2023 } }, { &amp;quot;set&amp;quot;: { &amp;quot;description&amp;quot;: &amp;quot;Sets graduated to true&amp;quot;, &amp;quot;field&amp;quot;: &amp;quot;graduated&amp;quot;, &amp;quot;value&amp;quot;: true } }, { &amp;quot;uppercase&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;name&amp;quot; } } ] } 请求内容字段 # 下表列出了用于创建或更新管道的请求内容字段。</description></item><item><title>摄取管道模拟器</title><link>/easysearch/main/docs/references/ingest-pipelines/simulate-ingest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/main/docs/references/ingest-pipelines/simulate-ingest/</guid><description>摄取管道模拟器 # 使用模拟摄取管道 API 操作来运行或测试管道。
路径使用 # 以下请求模拟创建的最新摄取管道 ：
GET _ingest/pipeline/_simulate POST _ingest/pipeline/_simulate 以下请求根据管道 ID 模拟单个管道 ：
GET _ingest/pipeline/&amp;lt;pipeline-id&amp;gt;/_simulate POST _ingest/pipeline/&amp;lt;pipeline-id&amp;gt;/_simulate 请求内容字段 # 下表列出了用于模拟管道的请求正文字段。
参数名 是否必需 类型 描述 docs 必需的 数组 用于测试管道的文档内容。 pipeline 可选 对象 要模拟的管道。如果未包含管道标识符，则模拟使用的是最新创建的管道。 docs 字段可以包含下表中列出的子字段。
参数名 是否必需 类型 描述 source 必需的 对象 文档的 JSON 正文。 id 可选 字符串 一个独特的文档标识符。该标识符不能在索引的其它地方使用。 index 可选 字符串 文档的转换数据出现的索引。 查询参数 # 下表列出了模拟管道的查询参数。</description></item><item><title>获取管道</title><link>/easysearch/main/docs/references/ingest-pipelines/get-ingest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/main/docs/references/ingest-pipelines/get-ingest/</guid><description>获取管道 # 使用获取摄取管道 API 操作来检索有关管道的所有信息。
检索有关所有管道的信息 # 以下示例请求返回有关所有摄取管道的信息：
GET _ingest/pipeline/ 检索特定管道的信息 # 以下示例请求返回有关特定管道的信息，本例中为 my-pipeline ：
GET _ingest/pipeline/my-pipeline 返回内容包含管道信息：
{ &amp;quot;my-pipeline&amp;quot;: { &amp;quot;description&amp;quot;: &amp;quot;This pipeline processes student data&amp;quot;, &amp;quot;processors&amp;quot;: [ { &amp;quot;set&amp;quot;: { &amp;quot;description&amp;quot;: &amp;quot;Sets the graduation year to 2023&amp;quot;, &amp;quot;field&amp;quot;: &amp;quot;grad_year&amp;quot;, &amp;quot;value&amp;quot;: 2023 } }, { &amp;quot;set&amp;quot;: { &amp;quot;description&amp;quot;: &amp;quot;Sets graduated to true&amp;quot;, &amp;quot;field&amp;quot;: &amp;quot;graduated&amp;quot;, &amp;quot;value&amp;quot;: true } }, { &amp;quot;uppercase&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;name&amp;quot; } } ] } }</description></item><item><title>删除管道</title><link>/easysearch/main/docs/references/ingest-pipelines/delete-ingest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/main/docs/references/ingest-pipelines/delete-ingest/</guid><description>删除管道 # 使用以下请求来删除一个管道。
要删除特定的管道，请将管道 ID 作为参数传递：
DELETE /_ingest/pipeline/&amp;lt;pipeline-id&amp;gt; 要删除集群中的所有管道，请使用通配符字符（ * ）：
DELETE /_ingest/pipeline/*</description></item><item><title>在管道中访问数据</title><link>/easysearch/main/docs/references/ingest-pipelines/accessing-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/main/docs/references/ingest-pipelines/accessing-data/</guid><description>在管道中访问数据 # 在摄取管道中，您可以使用 ctx 对象访问文档数据。此对象表示已处理的文档，并允许您读取、修改或丰富文档字段。管道处理器对文档的 _source 字段及其元数据字段都具有读写访问权限。
访问文档字段 # ctx 对象公开了所有文档字段。您可以直接使用点符号访问它们。
示例：访问顶级字段 # 给定以下示例文档：
{ &amp;quot;user&amp;quot;: &amp;quot;alice&amp;quot; } 您可以通过以下方式访问 user ：
&amp;quot;field&amp;quot;: &amp;quot;ctx.user&amp;quot; 示例：访问嵌套字段 # 给定以下示例文档：
{ &amp;quot;user&amp;quot;: { &amp;quot;name&amp;quot;: &amp;quot;alice&amp;quot; } } 您可以通过以下方式访问 user.name ：
&amp;quot;field&amp;quot;: &amp;quot;ctx.user.name&amp;quot; 访问源中的字段 # 要访问文档中的字段 _source ，请通过字段名称进行引用：
{ &amp;quot;set&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;environment&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;production&amp;quot; } } 或者，您可以显式使用 _source ：
{ &amp;quot;set&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;_source.environment&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;production&amp;quot; } } 访问元数据字段 # 您可以读取或写入以下元数据字段：</description></item><item><title>处理管道故障</title><link>/easysearch/main/docs/references/ingest-pipelines/pipeline-failures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/main/docs/references/ingest-pipelines/pipeline-failures/</guid><description>处理管道故障 # 每个摄取管道由一系列按顺序应用于文档的处理程序组成。如果处理程序失败，整个管道将失败。您有两种处理故障的选项：
Fail the entire pipeline：使整个管道失败。如果处理程序失败，整个管道将失败，文档将不会被索引。 Fail the current processor and continue with the next processor：使当前处理程序失败并继续下一个处理程序。如果您想在某个处理程序失败的情况下继续处理文档，这可能会很有用。 默认情况下，如果管道中的某个处理器失败，则摄取管道会停止。如果您希望在处理器失败时继续运行管道，您可以在创建管道时将该处理器的 ignore_failure 参数设置为 true ：
PUT _ingest/pipeline/my-pipeline/ { &amp;quot;description&amp;quot;: &amp;quot;Rename 'provider' field to 'cloud.provider'&amp;quot;, &amp;quot;processors&amp;quot;: [ { &amp;quot;rename&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;provider&amp;quot;, &amp;quot;target_field&amp;quot;: &amp;quot;cloud.provider&amp;quot;, &amp;quot;ignore_failure&amp;quot;: true } } ] } 您可以将 on_failure 参数指定为在处理器失败后立即运行。如果您已指定 on_failure ，即使 on_failure 配置为空，Easysearch 也会运行管道中的其他处理器：
PUT _ingest/pipeline/my-pipeline/ { &amp;quot;description&amp;quot;: &amp;quot;Add timestamp to the document&amp;quot;, &amp;quot;processors&amp;quot;: [ { &amp;quot;date&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;timestamp_field&amp;quot;, &amp;quot;formats&amp;quot;: [&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;], &amp;quot;target_field&amp;quot;: &amp;quot;@timestamp&amp;quot;, &amp;quot;on_failure&amp;quot;: [ { &amp;quot;set&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;ingest_error&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;failed&amp;quot; } } ] } } ] } 如果处理器失败，Easysearch 会记录失败并继续运行搜索管道中剩余的所有处理器。要检查是否有任何失败，您可以使用摄取管道指标。</description></item></channel></rss>