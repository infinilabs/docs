<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>管道聚合 on INFINI Easysearch</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/</link><description>Recent content in 管道聚合 on INFINI Easysearch</description><generator>Hugo -- gohugo.io</generator><atom:link href="/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/index.xml" rel="self" type="application/rss+xml"/><item><title>分组排序聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/bucket-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/bucket-sort/</guid><description>分组排序聚合 # bucket_sort 分组排序聚合是一个父聚合，它对其父多存储分组聚合生成的存储分组进行排序或截断。
在 bucket_sort 聚合中，您可以按多个字段对存储分组进行排序，每个字段都有自己的排序顺序。可以按存储分组的键、文档计数或子聚合中的值进行排序。您还可以使用 from 和 size 参数来截断结果，无论是否进行排序。
有关指定排序顺序的信息，请参阅排序结果 。
参数说明 # bucket_sort 聚合采用以下参数。
参数 必需/可选 数据类型 描述 gap_policy 可选 String 要应用于缺失数据的策略。有效值为 skip 和 insert_zeros。默认值为 skip。请参阅数据差距 。 sort 可选 String 要排序的字段列表。请参阅排序结果 。 from 可选 String 要返回的第一个结果的索引。必须是非负整数。默认值为 0。请参阅 from 和 size 参数 。 size 可选 String 要返回的最大结果数。必须是正整数。请参阅 from 和 size 参数 。 您必须至少提供一个 sort、from 和 size。</description></item><item><title>存储分组脚本聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/bucket-script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/bucket-script/</guid><description>存储分组脚本聚合 # bucket_script 存储分组脚本聚合是一个父管道聚合，它执行脚本以跨一组存储分组执行每个存储分组的数字计算。使用 bucket_script 聚合对分分组聚合中的多个指标执行自定义数值计算。例如，您可以：
计算派生指标和复合指标。 使用 if/else 语句应用条件逻辑。 计算特定于业务的 KPI，例如自定义评分指标。 参数说明 # bucket_script 聚合采用以下参数。
参数 必需/可选 数据类型 描述 buckets_path 必需 Object 一个变量名称到分分组指标的映射，用于识别脚本中使用的指标。这些指标必须是数值型。参见脚本变量 。 script 必需 String 或 Object 要执行的脚本。可以是内联脚本、存储脚本或脚本文件。脚本可以访问通过 buckets_path 参数定义的变量名。必须返回一个数值。 gap_policy 可选 String 应用于缺失数据的策略。有效值为 skip 和 insert_zeros 。默认值为 skip 。详见 数据空缺。 format 可选 String 一个 DecimalFormat 格式化字符串。将在聚合的 value_as_string 参数中返回格式化后的输出。 脚本变量 # buckets_path 参数将脚本变量名称映射到父聚合的指标。然后可以在脚本中使用这些变量。</description></item><item><title>存储分组选择聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/bucket-selector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/bucket-selector/</guid><description>存储分组选择聚合 # bucket_selector 存储分组选择聚合是一个父管道聚合，它评估脚本以确定直方图 （或 date_histogram ）聚合返回的存储分组是否应包含在最终结果中。
与创建新值的管道聚合不同，bucket_selector 聚合充当筛选器，根据指定的条件保留或删除整个存储分组。使用此聚合可根据存储分组的计算指标筛选存储分组。
参数说明 # bucket_selector 聚合采用以下参数。
参数 必需/可选 数据类型 描述 buckets_path 必需 Object 变量名称到分分组指标的映射，用于标识要在脚本中使用的指标。指标必须是数字。请参阅脚本变量 。 script 必需 String 或 Object 要执行的脚本。可以是内联脚本、存储脚本或脚本文件。该脚本可以访问 buckets_path 参数中定义的变量名称。必须返回布尔值。返回 false 的存储分组将从最终输出中删除。 gap_policy 可选 String 应用于缺失数据的策略。有效值为 skip 和 insert_zeros 。默认值为 skip 。详见 数据空缺。 参考样例 # 以下示例创建间隔为一周的日期直方图。sum 子聚合计算每周所有销售额的总和。最后，bucket_selector 聚合会筛选生成的每周存储分组，删除所有总值不超过 75,000 美元的存储分组：
GET sample_data_ecommerce/_search { &amp;quot;size&amp;quot;: 0, &amp;quot;aggs&amp;quot;: { &amp;quot;sales_per_week&amp;quot;: { &amp;quot;date_histogram&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;order_date&amp;quot;, &amp;quot;calendar_interval&amp;quot;: &amp;quot;week&amp;quot; }, &amp;quot;aggs&amp;quot;: { &amp;quot;weekly_sales&amp;quot;: { &amp;quot;sum&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;taxful_total_price&amp;quot;, &amp;quot;format&amp;quot;: &amp;quot;$#,###.</description></item><item><title>导数聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/derivative/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/derivative/</guid><description>导数聚合 # derivative 导数聚合是一个父聚合，用于计算聚合每个分组的一阶和二阶导数。
对于有序的分组序列， derivative 将当前分组和前一个分组中的指标值之差近似为一阶导数。
参数说明 # derivative 聚合采用以下参数。
参数 必需/可选 数据类型 描述 buckets_path 必需 String 要聚合的聚合分组的路径。参见分组路径。 gap_policy 可选 String 应用于缺失数据的策略。有效值为 skip 和 insert_zeros 。默认为 skip 。参见数据间隙。 format 可选 String DecimalFormat 格式字符串。返回聚合的 value_as_string 属性中的格式化输出。 示例：一阶导数 # 以下示例创建一个每月间隔的日期直方图。 sum 子聚合计算每个月所有字节的和。最后， derivative 聚合计算 sum 子聚合的一阶导数。一阶导数估计为当前月份和上个月字节数之间的差值：
GET sample_data_logs/_search { &amp;quot;size&amp;quot;: 0, &amp;quot;aggs&amp;quot;: { &amp;quot;sales_per_month&amp;quot;: { &amp;quot;date_histogram&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;@timestamp&amp;quot;, &amp;quot;calendar_interval&amp;quot;: &amp;quot;month&amp;quot; }, &amp;quot;aggs&amp;quot;: { &amp;quot;number_of_bytes&amp;quot;: { &amp;quot;sum&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;bytes&amp;quot; } }, &amp;quot;bytes_deriv&amp;quot;: { &amp;quot;derivative&amp;quot;: { &amp;quot;buckets_path&amp;quot;: &amp;quot;number_of_bytes&amp;quot; } } } } } } 返回内容显示了为第二和第三个分组计算出的导数：</description></item><item><title>平均分组聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/avg-bucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/avg-bucket/</guid><description>平均分组聚合 # avg_bucket 平均分组聚合是一个同级聚合，它计算上一个聚合的每个分组中的指标平均值。
指定的指标必须是数值型的，且同级聚合必须是多分组聚合。
参数说明 # avg_bucket 聚合采用以下参数。
参数 必需/可选 数据类型 描述 buckets_path 必需 String 要聚合的聚合存储分组的路径。请参阅存储分组路径 。 gap_policy 可选 String 要应用于缺失数据的策略。有效值为 skip 和 insert_zeros。默认值为 skip。请参阅数据差距 。 format 可选 String DecimalFormat 格式字符串。返回聚合的 value_as_string 属性中的格式化输出 。 参考样例 # 以下示例创建间隔为一个月的日期直方图。sum 子聚合计算每个月的字节总和。最后，avg_bucket 聚合根据这些总和计算每月的平均字节数：
POST sample_data_logs/_search { &amp;quot;size&amp;quot;: 0, &amp;quot;aggs&amp;quot;: { &amp;quot;visits_per_month&amp;quot;: { &amp;quot;date_histogram&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;@timestamp&amp;quot;, &amp;quot;interval&amp;quot;: &amp;quot;month&amp;quot; }, &amp;quot;aggs&amp;quot;: { &amp;quot;sum_of_bytes&amp;quot;: { &amp;quot;sum&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;bytes&amp;quot; } } } }, &amp;quot;avg_monthly_bytes&amp;quot;: { &amp;quot;avg_bucket&amp;quot;: { &amp;quot;buckets_path&amp;quot;: &amp;quot;visits_per_month&amp;gt;sum_of_bytes&amp;quot; } } } } 返回内容 # 聚合返回每月存储分组的平均字节数：</description></item><item><title>序列差分聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/serial-diff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/serial-diff/</guid><description>序列差分聚合 # serial_diff 序列差分聚合是一个父级管道聚合，用于计算当前分组中指标值与上一个分组中指标值之间的差值。它将结果存储在当前分组中。
使用 serial_diff 聚合来计算具有指定滞后的时间段之间的变化。 lag 参数（一个正整数值）指定要从中减去当前值的哪个先前分组的值。默认的 lag 值是 1 ，这意味着 serial_diff 从当前分组中的值减去立即前一个分组中的值。
参数说明 # serial_diff 聚合采用以下参数。
参数 必需/可选 数据类型 描述 buckets_path 必需 String 要聚合的聚合分组的路径。参见分组路径。 gap_policy 可选 String 应用于缺失数据的策略。有效值为 skip 和 insert_zeros 。默认为 skip 。参见数据间隙。 format 可选 String DecimalFormat 格式字符串。返回聚合的 value_as _string 属性中的格式化输出。 lag 可选 Integer 用于从当前数据分组中减去的历史数据分组。必须是正整数。默认为 1 。 参考样例 # 以下示例创建一个日期直方图，间隔为一个月。 sum 子聚合计算每个月的字节总和。最后， serial_diff 聚合计算这些总和之间的月度字节差异：</description></item><item><title>扩展统计分组聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/extended-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/extended-stats/</guid><description>扩展统计分组聚合 # extended_stats_bucket 扩展统计分组聚合是 stats_bucket 同级聚合的更全面的版本。除了 stats_bucket 提供的基本统计度量外， extended_stats_bucket 还计算以下指标：
平方和 方差 总体方差 抽样方差 标准差 总体标准差 抽样标准差 标准差界限： ** 上限 ** 下限 ** 种群上限 ** 种群下限 ** 采样上限 ** 采样下限 标准差和方差是总体统计量；它们分别始终等于总体标准差和方差。
std_deviation_bounds 对象定义了一个范围，该范围在均值（默认为两个标准差）的上方和下方跨越指定的标准差数量。此对象始终包含在输出中，但仅对正态分布的数据才有意义。在解释这些值之前，请验证您的数据集是否遵循正态分布。
指定的指标必须是数值型，并且同级聚合必须是多分组聚合。
参数说明 # extended_stats_bucket 聚合采用以下参数。
参数 必需/可选 数据类型 描述 buckets_path 必需 String 要聚合的聚合分组的路径。参见分组路径。 gap_policy 可选 String 应用于缺失数据的策略。有效值为 skip 和 insert_zeros 。默认为 skip 。参见数据间隙。 format 可选 String DecimalFormat 格式字符串。返回聚合的 value_as_string 属性中的格式化输出。 sigma 可选 Double 非负） 用于计算 std_deviation_bounds 区间的均值上方和下方的标准差数量。默认值为 2 。参见 extended_stats 中定义范围。 参考样例 # 以下示例创建一个以一个月为间隔的日期直方图。 sum 子聚合计算每个月的字节总和。最后， extended_stats_bucket 聚合返回这些总和的扩展统计信息：</description></item><item><title>最大分组聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/max-bucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/max-bucket/</guid><description>最大分组聚合 # max_bucket 最大分组聚合是一个同级聚合，用于计算先前聚合中每个分组中某个指标的最大值。
指定的指标必须是数值型，并且同级聚合必须是多分组聚合。
参数说明 # max_bucket 聚合采用以下参数。
参数 必需/可选 数据类型 描述 buckets_path 必需 String 要聚合的聚合分组的路径。参见分组路径。 gap_policy 可选 String 应用于缺失数据的策略。有效值为 skip 和 insert_zeros 。默认为 skip 。参见数据间隙。 format 可选 String DecimalFormat 格式字符串。返回聚合的 value_as_string 属性中的格式化输出。 参考样例 # 以下示例创建一个日期直方图，间隔为一个月。 sum 子聚合计算每个月的字节总和。最后， max_bucket 聚合找到最大值——这些分组中最大的那个：
POST sample_data_logs/_search { &amp;quot;size&amp;quot;: 0, &amp;quot;aggs&amp;quot;: { &amp;quot;visits_per_month&amp;quot;: { &amp;quot;date_histogram&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;@timestamp&amp;quot;, &amp;quot;interval&amp;quot;: &amp;quot;month&amp;quot; }, &amp;quot;aggs&amp;quot;: { &amp;quot;sum_of_bytes&amp;quot;: { &amp;quot;sum&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;bytes&amp;quot; } } } }, &amp;quot;max_monthly_bytes&amp;quot;: { &amp;quot;max_bucket&amp;quot;: { &amp;quot;buckets_path&amp;quot;: &amp;quot;visits_per_month&amp;gt;sum_of_bytes&amp;quot; } } } } 返回内容 # max_bucket 聚合返回跨多个分组的指定指标的最大值。在这个示例中，它计算了 sum_of_bytes 指标在 visits_per_month 中的每月最大字节数。 value 字段显示了在所有分组中找到的最大值。 keys 数组包含观察到该最大值的分组的键。它是一个数组，因为多个分组可以具有相同最大值。在这种情况下，所有匹配的分组键都会被包含。这确保了即使多个时间段（或分组项）具有相同最大值，结果也是准确的：</description></item><item><title>最小值分组聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/min-bucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/min-bucket/</guid><description>最小值分组聚合 # min_bucket 最小值分组聚合是一个同级聚合，用于计算先前聚合中每个分组中某个指标的最小值。
指定的指标必须是数值型，并且同级聚合必须是多分组聚合。
参数说明 # min_bucket 聚合采用以下参数。
参数 必需/可选 数据类型 描述 buckets_path 必需 String 要聚合的聚合分组的路径。参见分组路径。 gap_policy 可选 String 应用于缺失数据的策略。有效值为 skip 和 insert_zeros 。默认为 skip 。参见数据间隙。 format 可选 String DecimalFormat 格式字符串。返回聚合的 value_as _string 属性中的格式化输出。 参考样例 # 以下示例创建一个日期直方图，间隔为一个月。 sum 子聚合计算每个月的字节总和。最后， min_bucket 聚合找到最小值——这些分组中最小的一个：
POST sample_data_logs/_search { &amp;quot;size&amp;quot;: 0, &amp;quot;aggs&amp;quot;: { &amp;quot;visits_per_month&amp;quot;: { &amp;quot;date_histogram&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;@timestamp&amp;quot;, &amp;quot;interval&amp;quot;: &amp;quot;month&amp;quot; }, &amp;quot;aggs&amp;quot;: { &amp;quot;sum_of_bytes&amp;quot;: { &amp;quot;sum&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;bytes&amp;quot; } } } }, &amp;quot;min_monthly_bytes&amp;quot;: { &amp;quot;min_bucket&amp;quot;: { &amp;quot;buckets_path&amp;quot;: &amp;quot;visits_per_month&amp;gt;sum_of_bytes&amp;quot; } } } } 返回内容 # min_bucket 聚合返回跨多个分组的指定指标的最小值。在这个示例中，它计算了 sum_of_bytes 指标在 visits_per_month 中的每月最小字节数。 value 字段显示了在所有分组中找到的最小值。 keys 数组包含观察到该最小值的分组的键。它是一个数组，因为多个分组可以具有相同的最小值。在这种情况下，所有匹配的分组键都会被包含。这确保了即使多个时间段（或分组项）具有相同的最小值，结果也是准确的：</description></item><item><title>求和分组聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/sum-bucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/sum-bucket/</guid><description>求和分组聚合 # sum_bucket 聚合是一个同级聚合，用于计算先前聚合中每个分组中指标的总和。
指定的指标必须是数值型，并且同级聚合必须是多分组聚合。
参数说明 # sum_bucket 聚合采用以下参数。
参数 必需/可选 数据类型 描述 buckets_path 必需 String 要聚合的聚合分组的路径。参见分组路径。 gap_policy 可选 String 应用于缺失数据的策略。有效值为 skip 和 insert_zeros 。默认为 skip 。参见数据间隙。 format 可选 String DecimalFormat 格式字符串。返回聚合的 value_as _string 属性中的格式化输出。 参考样例 # 以下示例创建一个日期直方图，间隔为一个月。 sum 子聚合计算每个月的字节总和。最后， sum_bucket 聚合通过汇总这些总和来计算每个月的总字节数：
POST sample_data_logs/_search { &amp;quot;size&amp;quot;: 0, &amp;quot;aggs&amp;quot;: { &amp;quot;visits_per_month&amp;quot;: { &amp;quot;date_histogram&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;@timestamp&amp;quot;, &amp;quot;interval&amp;quot;: &amp;quot;month&amp;quot; }, &amp;quot;aggs&amp;quot;: { &amp;quot;sum_of_bytes&amp;quot;: { &amp;quot;sum&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;bytes&amp;quot; } } } }, &amp;quot;sum_monthly_bytes&amp;quot;: { &amp;quot;sum_bucket&amp;quot;: { &amp;quot;buckets_path&amp;quot;: &amp;quot;visits_per_month&amp;gt;sum_of_bytes&amp;quot; } } } } 返回内容 # 该聚合返回所有月度分组中的字节总和：</description></item><item><title>百分位数分组聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/percentiles-bucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/percentiles-bucket/</guid><description>百分位数分组聚合 # percentiles_bucket 百分位数分组聚合是一个同级聚合，用于计算分位数的位置。
percentiles_bucket 聚合精确计算分位数，不使用近似或插值。每个分位数都返回为目标分位数小于或等于的最近值。
percentiles_bucket 聚合需要将整个值列表临时保存在内存中，即使对于大型数据集也是如此。相比之下， percentiles 指标聚合使用更少的内存，但会近似百分比。
指定的指标必须是数值型，并且同级聚合必须是多分组聚合。
参数说明 # percentiles_bucket聚合采用以下参数。
参数 必需/可选 数据类型 描述 buckets_path 必需 String 要聚合的聚合分组的路径。参见分组路径。 gap_policy 可选 String 应用于缺失数据的策略。有效值为 skip 和 insert_zeros 。默认为 skip 。参见数据间隙。 format 可选 String DecimalFormat 格式字符串。返回聚合的 value_as _string 属性中的格式化输出。 percents 可选 List 一个包含任意数量数值百分比值的列表，这些值将被包含在输出中。有效值为 0.0 到 100.0（含）。默认为 [1.0, 5.0, 25.0, 50.0, 75.0, 95.0, 99.0] 。 keyed 可选 Boolean 是否将输出格式化为字典，而不是键值对对象数组。默认为 true （以键值对格式化输出）。 参考样例 # 以下示例创建一个以一周为间隔的日期直方图。 sum 子聚合为每周汇总 taxful_total_price 。最后， percentiles_bucket 聚合计算这些汇总的每周百分位数值：</description></item><item><title>移动函数聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/moving-function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/moving-function/</guid><description>移动函数聚合 # moving_fn 移动函数聚合是一个父级管道聚合，它在滑动窗口上执行脚本。滑动窗口在从父级 histogram 或 date histogram 聚合中提取的一系列值上移动。窗口一次向右移动一个分组； moving_fn 每次窗口移动时都会运行脚本。
使用 moving_fn 聚合在滑动窗口内的数据上执行任何数值计算。你可以使用 moving_fn 用于以下目的：
趋势分析 异常值检测 自定义时间序列分析 自定义平滑算法 数字信号处理 (DSP) 参数说明 # moving_fn 聚合采用以下参数。
参数 必需/可选 数据类型 描述 buckets_path 必需 String 要聚合的聚合分组的路径。参见分组路径。 script 必需 String 或 Object 为每个数据窗口计算值的脚本。可以是内联脚本、存储脚本或脚本文件。该脚本可以访问在 buckets_path 参数中定义的变量名。 window 必需 Integer 滑动窗口中的分组的数量。必须是正整数。 gap_policy 可选 String 应用于缺失数据的策略。有效值为 skip 和 insert_zeros 。默认为 skip 。参见数据间隙。 format 可选 String DecimalFormat 格式字符串。返回聚合的 value_as_string 属性中的格式化输出。 shift 可选 Integer 窗口要移动的分组的数量。可以是正数（向未来的分组右移）或负数（向过去的分组左移）。默认是 0 ，将窗口立即放置在当前分组的左侧。参见移动窗口。 移动函数的工作原理 # moving_fn 聚合操作在有序分组序列上的滑动窗口上。从父聚合中的第一个分组开始， moving_fn 执行以下操作：</description></item><item><title>移动平均聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/moving-avg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/moving-avg/</guid><description>移动平均聚合 # 一个 moving_avg 移动平均聚合是一个父级管道聚合，它计算有序数据集中窗口（相邻子集）内指标的一系列平均值。
要创建一个 moving_avg 聚合，您首先创建一个 histogram 或 date_histogram 聚合。然后，您可以选择在直方图聚合中嵌入一个指标聚合。最后，您在直方图中嵌入 moving_avg 聚合，并将 buckets_path 参数设置为要跟踪的嵌入指标。
窗口的大小是窗口中连续数据值的数量。在每次迭代中，算法计算窗口中所有数据点的平均值，然后向前滑动一个数据值，排除上一个窗口的第一个值，并包含下一个窗口的第一个值。
例如，给定数据 [1, 5, 8, 23, 34, 28, 7, 23, 20, 19] ，一个窗口大小为 5 的移动平均如下：
(1 + 5 + 8 + 23 + 34) / 5 = 14.2 (5 + 8 + 23 + 34 + 28) / 5 = 19.6 (8 + 23 + 34 + 28 + 7) / 5 = 20 .</description></item><item><title>累积和聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/cumulative-sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/cumulative-sum/</guid><description>累积和聚合 # cumulative_sum 累积和聚合是一个父聚合，用于计算上一个聚合的存储分组的累积总和。
累积和是给定序列的部分和的序列。例如，序列 {a，b，c,...} 的累积和为 a、a+b、a+b+c 等。您可以使用累积总和来可视化字段随时间的变化率。
参数说明 # cumulative_sum 聚合采用以下参数。
参数 必需/可选 数据类型 描述 buckets_path 必需 String 要聚合的聚合存储分组的路径。请参阅存储分组路径 。 format 可选 String DecimalFormat 格式字符串。返回聚合的 value_as_string 属性中的格式化输出。 参考样例 # 以下示例创建间隔为一个月的日期直方图。sum 子聚合计算每个月所有字节的总和。最后，cumulative_sum 聚合计算每个月存储分组的累积字节数：
GET sample_data_logs/_search { &amp;quot;size&amp;quot;: 0, &amp;quot;aggs&amp;quot;: { &amp;quot;sales_per_month&amp;quot;: { &amp;quot;date_histogram&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;@timestamp&amp;quot;, &amp;quot;calendar_interval&amp;quot;: &amp;quot;month&amp;quot; }, &amp;quot;aggs&amp;quot;: { &amp;quot;no-of-bytes&amp;quot;: { &amp;quot;sum&amp;quot;: { &amp;quot;field&amp;quot;: &amp;quot;bytes&amp;quot; } }, &amp;quot;cumulative_bytes&amp;quot;: { &amp;quot;cumulative_sum&amp;quot;: { &amp;quot;buckets_path&amp;quot;: &amp;quot;no-of-bytes&amp;quot; } } } } } } 返回内容</description></item><item><title>统计分组聚合</title><link>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/stats-bucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/easysearch/v1.15.5/docs/references/aggregation/pipeline-aggregations/stats-bucket/</guid><description>统计分组聚合 # stats_bucket 统计分组聚合是一个同级聚合，它为先前聚合的分组返回各种统计信息（ count 、 min 、 max 、 avg 和 sum ）。
指定的指标必须是数值型，并且同级聚合必须是多分组聚合。
参数说明 # stats_bucket 聚合采用以下参数。
参数 必需/可选 数据类型 描述 buckets_path 必需 String 要聚合的聚合分组的路径。参见分组路径。 gap_policy 可选 String 应用于缺失数据的策略。有效值为 skip 和 insert_zeros 。默认为 skip 。参见数据间隙。 format 可选 String DecimalFormat 格式字符串。返回聚合的 value_as _string 属性中的格式化输出。 参考样例 # 以下示例创建一个以一个月为间隔的日期直方图。 sum 子聚合计算每个月所有字节的总和。最后， stats_bucket 聚合从这些总和中返回 count 、 avg 、 sum 、 min 和 max 统计信息：</description></item></channel></rss>