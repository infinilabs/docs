[{"category":null,"content":"Query URL Parameters #  The query URL parameters can be used in many places (e.g., HTTP API endpoints, internal service calls, debug consoles). We use them to unify how queries are received and processed across different components of the system. This provides a powerful, composable, and human-readable way to construct both full-text search and structured filters, while also supporting advanced features like fuzziness, field selection, and pagination.\nðŸ”§ Query URL Parameters #  These URL parameters are used to construct a rich and dynamic search query.\n   Name Type Description Example     query string The main query string. Supports field boosting (field^boost:value). query=title^2:search engine   filter string[] One or more filter clauses. Can be negated with - or !. Supports: filter=status:active, filter=-exists(deleted_at)     - field=value, field!=value, field\u0026gt;=x, field\u0026lt;y filter=age\u0026gt;=18, filter=tag!=archived     - exists(field) filter=exists(status)   sort string Sort rules separated by comma. Each rule is field[:asc|desc]. sort=published_at:desc,_score   from int Pagination offset. from=20   size int Number of results to return. size=10   fuzziness int Fuzziness level for the query (0â€“5). fuzziness=3   default_operator string Operator between terms if not specified (AND or OR). default_operator=AND   default_fields string Comma-separated list of fields used as fallback for both query and filter. default_fields=title,description   default_query_fields string Comma-separated list of fields used only for full-text search. default_query_fields=title,body   default_filter_fields string Comma-separated list of fields used only for filters. default_filter_fields=status,tag   _source_includes string Comma-separated fields to include in _source. _source_includes=title,author   _source_excludes string Comma-separated fields to exclude from _source. _source_excludes=internal_notes,raw_data     ðŸ§  Filter Syntax Summary #     Syntax Meaning Example     field=value Term query status=active   field!=value Negated term status!=deleted   field\u0026gt;=value Range query (greater than or equal) views\u0026gt;=1000   field\u0026lt;value Range query (less than) age\u0026lt;30   any(value1,value2) Terms filter (any term can be match) any(tag1,tag2,tag3)   exists(field) Field existence check exists(tags)   -filterExpr / !filterExpr Negate any filter expression !exists(deleted_at)    ðŸš€ Example #  Simple Search #  GET /search?query=go+language\u0026amp;default_fields=title,description Filtered and Sorted #  GET /search?query=distributed+search\u0026amp;filter=status=active\u0026amp;sort=_score:desc,created_at:desc Advanced with Fuzziness and Range #  GET /search?query=search\u0026amp;fuzziness=3\u0026amp;filter=age\u0026gt;=18\u0026amp;filter=!exists(deleted_at)\u0026amp;size=20  ðŸ§© Notes #   Filters are ANDed together by default. Negated filters use either - or ! prefix. If query is not provided, only filters will be applied. Supports combining query string logic and JSON body input (BuildQueryDSLOnTopOfDSL handles merging). Values in filters are auto-casted to int, bool, or string.  Example usage:\nq := orm.NewQuery().Must( orm.ShouldQuery( orm.MatchQuery(\u0026#34;lang\u0026#34;, \u0026#34;en\u0026#34;), orm.MatchQuery(\u0026#34;lang\u0026#34;, \u0026#34;zh\u0026#34;), ), orm.MustNotQuery( orm.TermQuery(\u0026#34;deleted\u0026#34;, true), ), ).Size(10).SortBy( orm.Sort{Field: \u0026#34;score\u0026#34;, SortType: orm.DESC}, ) ","subcategory":null,"summary":"","tags":null,"title":"Query URL Parameters","url":"/framework/v1.2.0/docs/references/query_url/"},{"category":null,"content":"HTTP Client Configuration #  The http_client section defines configurations for HTTP clients, where each key represents a unique client profile. The default key is a special profile that serves as the fallback configuration when no specific profile is specified. Additional profiles can be added and accessed dynamically.\nSample Configuration #  http_client: default: proxy: enabled: true default_config: http_proxy: http://127.0.0.1:7890 socket5_proxy: socks5://127.0.0.1:7890 override_system_proxy_env: true # Override system proxy environment settings permitted: - \u0026#34;google.com\u0026#34; denied: - \u0026#34;localhost\u0026#34; - \u0026#34;infinilabs.com\u0026#34; - \u0026#34;api.coco.rs\u0026#34; domains: \u0026#34;github.com\u0026#34;: http_proxy: http://127.0.0.1:7890 socket5_proxy: socks5://127.0.0.1:7890 custom_profile: proxy: enabled: false Parameters #  HTTP Client Configuration: http_client #     Name Type Description     key map[string]HTTPClientConfig Each key represents a named HTTP client configuration. For example, default or custom.   default HTTPClientConfig The default configuration used as a fallback when no specific configuration is specified.     HTTP Client Config: HTTPClientConfig #     Name Type Description     proxy ProxyConfig Configuration for proxy usage, including domain rules and proxy settings.   timeout string The overall timeout for HTTP requests.   dial_timeout string The timeout for establishing connections.   read_timeout string The timeout for reading data from the connection.   write_timeout string The timeout for writing data to the connection.   read_buffer_size int The size of the read buffer.   write_buffer_size int The size of the write buffer.   tls_config TLSConfig Configuration for TLS settings.   max_connection_per_host int The maximum number of connections per host.     Proxy Configuration: ProxyConfig #     Name Type Description     enabled boolean Enables or disables the use of a proxy.   default_config ProxyDetails Default proxy settings, including HTTP and SOCKS5 proxies.   override_system_proxy_env boolean Whether to override system-wide proxy environment variables.   permitted list List of domains allowed to use the proxy.   denied list List of domains denied from using the proxy.   domains map Proxy settings per domain.     Proxy Details: ProxyDetails #     Name Type Description     http_proxy string URL of the HTTP proxy.   socket5_proxy string URL of the SOCKS5 proxy.   using_proxy_env boolean Whether to use system environment proxy settings (e.g., HTTP_PROXY).    ","subcategory":null,"summary":"","tags":null,"title":"Http Client","url":"/framework/v1.2.0/docs/references/http_client/"},{"category":null,"content":"Makefile #  The framework simplifies managing your application by providing reusable commands and variables. Below is an example of how Loadgen utilizes this framework in its Makefile:\nUse Loadgen for example, here is the project\u0026rsquo;s Makefile looks like:\nâžœ loadgen git:(main) cat Makefile SHELL=/bin/bash # APP info APP_NAME := loadgen APP_VERSION := 1.0.0_SNAPSHOT APP_CONFIG := $(APP_NAME).yml $(APP_NAME).dsl APP_EOLDate ?= \u0026quot;2025-12-31T10:10:10Z\u0026quot; APP_STATIC_FOLDER := .public APP_STATIC_PACKAGE := public APP_UI_FOLDER := ui APP_PLUGIN_FOLDER := proxy\ninclude ../framework/Makefile Highlights #\n  Modular and Reusable: By including ../framework/Makefile, this project inherits a suite of predefined commands and variables, reducing redundancy. Customizable Variables: Project-specific details (e.g., name, version, config files, and folders) are declared at the top for easy configuration. Framework Integration: The framework/Makefile provides consistent functionality across projects, enabling streamlined workflows.  This approach ensures better maintainability and faster setup for new projects.\nExample #  To build the Loadgen application using the framework, you can run the following command:\nâžœ loadgen git:(main) DEV=false OFFLINE_BUILD=true make build Explanation of the Command:\n DEV=false: Sets the development mode to false, indicating a production build. OFFLINE_BUILD=true: Enables offline build mode, ensuring the build process avoids fetching resources from external sources. make build: Invokes the build target defined in the frameworkâ€™s Makefile, compiling the application according to the specified settings.  This example demonstrates how you can customize the build process using environment variables while leveraging the reusable commands provided by the framework.\nCommands #     Command Description Dependencies/Notes     default Default target, builds the application with race detection Depends on build-race   env Prints environment variables for debugging Outputs key paths and repository settings   build Builds the main application binary    build-dev Builds the application with debug symbols and development tags    build-cmd Builds all binaries in the cmd folder    cross-build-cmd Cross-compiles binaries for Windows and Linux    update-plugins Updates plugin files using plugin discovery tool Requires framework discovery binary   build-race Builds the application with race detection and debug information Depends on clean, config, update-vfs   tar Creates a tarball of the application binary and config file Depends on build   cross-build Cross-compiles the application for Windows, macOS, and Linux    build-win Builds the application binary for Windows    build-linux-* Builds the application binary for specific Linux architectures (e.g., amd64, arm64)    build-darwin Builds the application binary for macOS Supports amd64 and arm64   build-bsd Builds the application binary for BSD systems Supports FreeBSD, NetBSD, and OpenBSD   all Cleans, configures, and builds binaries for all supported platforms    all-platform Builds binaries for all platforms, including BSD, Linux, macOS, and Windows    format Formats all Go files excluding vendor directory Uses go fmt   clean_data Removes data and logs directories    clean Cleans all build artifacts and resets the output directory Depends on clean_data   init Initializes the build environment Checks/clones framework repositories     Variables #     Variable Description Default Value     APP_NAME Application name framework   APP_VERSION Application version 1.0.0_SNAPSHOT   APP_CONFIG Configuration file name $(APP_NAME).yml   APP_EOLDate End-of-life date for the application \u0026quot;2023-12-31T10:10:10Z\u0026quot;   APP_STATIC_FOLDER Path to static folder .public   APP_STATIC_PACKAGE Static package name public   APP_UI_FOLDER UI folder path ui   APP_PLUGIN_FOLDER Plugins folder path plugins   APP_PLUGIN_PKG Plugins package name $(APP_PLUGIN_FOLDER)   APP_NEED_CGO Determines if CGO is required (0 = disabled, 1 = enabled) 0   VERSION Release version from the environment    GOPATH Go workspace path ~/go   BUILD_NUMBER Build number 001   DEV Enables or disables development mode. Set to true for development builds, false for production builds. false   OFFLINE_BUILD Enables offline build mode, preventing the download of external resources during the build process. false   GO Go environment settings GO15VENDOREXPERIMENT=\u0026quot;1\u0026quot; GO111MODULE=off go   FRAMEWORK_FOLDER Path to INFINI Framework folder $(INFINI_BASE_FOLDER)/framework   FRAMEWORK_REPO Framework repository URL https://github.com/infinilabs/framework.git   FRAMEWORK_BRANCH Git branch for the framework main   FRAMEWORK_VENDOR_FOLDER Path to framework vendor folder $(FRAMEWORK_FOLDER)/../vendor/   FRAMEWORK_VENDOR_REPO Vendor repository URL https://github.com/infinilabs/framework-vendor.git   FRAMEWORK_VENDOR_BRANCH Vendor repository branch main   PREFER_MANAGED_VENDOR Determines whether to use a managed vendor directory or fetch dependencies dynamically. If set to 1, the build process will prioritize the pre-downloaded vendor folder (FRAMEWORK_VENDOR_FOLDER). If set to 0, dependencies will be fetched from the FRAMEWORK_VENDOR_REPO. 1     Notes #   Framework Dependencies: This Makefile integrates with INFINI Framework, requiring external repositories for the framework and vendor files. Ensure these are cloned and accessible. Cross-Platform Builds: Targets like build-linux and build-darwin compile binaries for multiple architectures, ensuring compatibility across platforms. Plugin Updates: Plugins are dynamically discovered and updated using a tool within the framework. Ensure plugin-discovery exists and is built. Environment Variables: Many configurations (e.g., GOPATH, VERSION, EOL) can be overridden via environment variables for flexibility.  ","subcategory":null,"summary":"","tags":null,"title":"Makefile","url":"/framework/v1.2.0/docs/references/makefile/"},{"category":null,"content":"Create New Application #  Let\u0026rsquo;s use the NewAPP as the new project for example.\nCreate the project folder #  Use the name new_app as the project id, and create the project folder as below:\ncd ~/go/src/infini.sh/ mkdir new_app  Note: Ensure that new_app is located in the same directory as the framework folder. This structure is required for the Makefile to function correctly.\n Create the main file #  Create a empty main.go file, and paste the code as below:\npackage main import ( \u0026quot;infini.sh/framework\u0026quot; \u0026quot;infini.sh/framework/core/module\u0026quot; \u0026quot;infini.sh/framework/core/util\u0026quot; \u0026quot;infini.sh/framework/modules/api\u0026quot; \u0026quot;infini.sh/new_app/config\u0026quot; )\nfunc main() {\n terminalHeader :\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026quot;color:#e6db74\u0026quot;\u0026gt;\u0026amp;#34; __ _ ___ ___ \\n\u0026amp;#34;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt; terminalHeader \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;+=\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026quot;color:#e6db74\u0026quot;\u0026gt;\u0026amp;#34; /\\\\ \\\\ \\\\_____ __/_\\\\ / _ \\\\/ _ \\\\\\n\u0026amp;#34;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt; terminalHeader \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;+=\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026quot;color:#e6db74\u0026quot;\u0026gt;\u0026amp;#34; / \\\\/ / _ \\\\ \\\\ /\\\\ / //_\\\\\\\\ / /_)/ /_)/\\n\u0026amp;#34;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt; terminalHeader \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;+=\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026quot;color:#e6db74\u0026quot;\u0026gt;\u0026amp;#34;/ /\\\\ / __/\\\\ V V / _ \\\\/ ___/ ___/ \\n\u0026amp;#34;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt; terminalHeader \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;+=\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026quot;color:#e6db74\u0026quot;\u0026gt;\u0026amp;#34;\\\\_\\\\ \\\\/ \\\\___| \\\\_/\\\\_/\\\\_/ \\\\_/\\\\/ \\\\/ \\n\\n\u0026amp;#34;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt; terminalFooter :\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026quot;color:#e6db74\u0026quot;\u0026gt;\u0026amp;#34;Goodbye~\u0026amp;#34;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt; app :\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; framework.NewApp\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026quot;color:#e6db74\u0026quot;\u0026gt;\u0026amp;#34;new_app\u0026amp;#34;\u0026lt;/span\u0026gt;, \u0026lt;span style=\u0026quot;color:#e6db74\u0026quot;\u0026gt;\u0026amp;#34;Make a golang application is such easy~.\u0026amp;#34;\u0026lt;/span\u0026gt;, util.TrimSpaces\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;config.Version\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt;, util.TrimSpaces\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;config.BuildNumber\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt;, util.TrimSpaces\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;config.LastCommitLog\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt;, util.TrimSpaces\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;config.BuildDate\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt;, util.TrimSpaces\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;config.EOLDate\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt;, terminalHeader, terminalFooter\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt; app.IgnoreMainConfigMissing\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;()\u0026lt;/span\u0026gt; app.Init\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;nil\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt; defer app.Shutdown\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;()\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026quot;color:#66d9ef\u0026quot;\u0026gt;if\u0026lt;/span\u0026gt; app.Setup\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;func\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;()\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;{\u0026lt;/span\u0026gt; module.RegisterSystemModule\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026amp;amp;api.APIModule\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;{})\u0026lt;/span\u0026gt; module.Start\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;()\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;}\u0026lt;/span\u0026gt;, func\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;()\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;{\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;}\u0026lt;/span\u0026gt;, nil\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;{\u0026lt;/span\u0026gt; app.Run\u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;()\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026quot;color:#f92672\u0026quot;\u0026gt;}\u0026lt;/span\u0026gt;  } \nYou may use this online tool to generate your beauty ASCII based terminal header: http://patorjk.com/software/taag/#p=display\u0026amp;h=2\u0026amp;v=1\u0026amp;f=Ogre\u0026amp;t=NewAPP\n Create the config file #  touch new_app.yml Create the makefile #  create a empty Makefile, and paste the code as below:\nSHELL=/bin/bash # APP info APP_NAME := new_app APP_VERSION := 1.0.0_SNAPSHOT APP_CONFIG := $(APP_NAME).yml APP_EOLDate ?= \u0026quot;2025-12-31T10:10:10Z\u0026quot; APP_STATIC_FOLDER := .public APP_STATIC_PACKAGE := public APP_UI_FOLDER := ui APP_PLUGIN_FOLDER := plugins PREFER_MANAGED_VENDOR=fase\ninclude ../framework/Makefile Build the application #\n âžœ new_app OFFLINE_BUILD=true make build building new_app 1.0.0_SNAPSHOT main /Users/medcl/go/src/infini.sh/new_app framework path: /Users/medcl/go/src/infini.sh/framework fatal: not a git repository (or any of the parent directories): .git update generated info update configs (cd ../framework/ \u0026amp;\u0026amp; make update-plugins) || true # build plugins in framework GOPATH=~/go:~/go/src/infini.sh/framework/../vendor/ CGO_ENABLED=0 GRPC_GO_REQUIRE_HANDSHAKE=off GO15VENDOREXPERIMENT=\u0026#34;1\u0026#34; GO111MODULE=off go build -a -gcflags=all=\u0026#34;-l -B\u0026#34; -ldflags \u0026#39;-static\u0026#39; -ldflags=\u0026#39;-s -w\u0026#39; -gcflags \u0026#34;-m\u0026#34; --work -o /Users/medcl/go/src/infini.sh/new_app/bin/new_app WORK=/var/folders/j5/qd4qt3n55dz053d93q2mswfr0000gn/T/go-build435280758 # infini.sh/new_app ./main.go:17:9: can inline main.deferwrap1 ./main.go:21:12: can inline main.func2 ./main.go:18:22: func literal does not escape ./main.go:19:45: \u0026amp;api.APIModule{} escapes to heap ./main.go:21:12: func literal escapes to heap restore generated info Run the application #  âžœ new_app git:(main) âœ— ./bin/new_app __ _ ___ ___ /\\ \\ \\_____ __/_\\  / _ \\/ _ \\  / \\/ / _ \\ \\ /\\ / //_\\\\ / /_)/ /_)/ / /\\  / __/\\ V V / _ \\/ ___/ ___/ \\_\\ \\/ \\___| \\_/\\_/\\_/ \\_/\\/ \\/ [NEW_APP] Make a golang application is such easy~. [NEW_APP] 1.0.0_SNAPSHOT#001, 2024-12-16 06:15:10, 2025-12-31 10:10:10, HEAD [12-16 14:15:19] [INF] [env.go:203] configuration auto reload enabled [12-16 14:15:19] [INF] [env.go:209] watching config: /Users/medcl/go/src/infini.sh/new_app/config [12-16 14:15:19] [INF] [app.go:311] initializing new_app, pid: 64426 [12-16 14:15:19] [INF] [app.go:312] using config: /Users/medcl/go/src/infini.sh/new_app/new_app.yml [12-16 14:15:19] [INF] [api.go:214] local ips: 192.168.3.17 [12-16 14:15:19] [INF] [api.go:312] api server listen at: http://0.0.0.0:2900 [12-16 14:15:19] [INF] [module.go:159] started module: api [12-16 14:15:19] [INF] [module.go:184] all modules are started [12-16 14:15:19] [INF] [instance.go:101] workspace: /Users/medcl/go/src/infini.sh/new_app/data/new_app/nodes/ctfs8hbq50kevmkb3m6g [12-16 14:15:19] [INF] [app.go:537] new_app is up and running now. ^C [NEW_APP] got signal: interrupt, start shutting down [12-16 14:15:23] [INF] [module.go:213] all modules are stopped [12-16 14:15:23] [INF] [app.go:410] new_app now terminated. [NEW_APP] 1.0.0_SNAPSHOT, uptime: 4.13334s\nGoodbye~ Conclusion #\n By leveraging the INFINI Framework, creating a Go application becomes significantly simpler and more efficient. The framework provides built-in commands and modules, streamlining the development process and enabling you to focus on building your application\u0026rsquo;s core functionality.\n","subcategory":null,"summary":"","tags":null,"title":"Create New Application","url":"/framework/v1.2.0/docs/development/create_new_application/"},{"category":null,"content":"Setup IntelliJ IDEA #  This guide provides step-by-step instructions to configure IntelliJ IDEA for Go development, ensuring optimal compatibility with project requirements.\n Configure GOPATH #  Set the GOPATH for your project in IntelliJ IDEA:\nNavigate to: Preferences | Languages \u0026amp; Frameworks | Go | GOPATH\n Adjust Run/Debug Configurations #  For projects that rely on legacy dependency management (e.g., the vendor folder), configure the necessary environment variables:\nGO15VENDOREXPERIMENT=\u0026#34;1\u0026#34;; GO111MODULE=off Set these variables in: Preferences | Run/Debug Configurations | Templates\nAdd Copyright Header Templates #  Ensure all new files include the appropriate copyright notice.\nNavigate to: Preferences | Editor | File and Code Templates\nAdd the following header template:\n/* Copyright Â© INFINI LTD. All rights reserved. * Web: https://infinilabs.com * Email: hello#infini.ltd */ Disable Unused Modules (For Higher Versions) #  In newer versions of IntelliJ IDEA, disabling unused modules can improve performance and reduce conflicts.\nTo improve code quality, enable static analysis tools like GoLint or GoVet in IntelliJ IDEA.\nOptimize Performance #  For large projects, increase IntelliJ IDEAâ€™s memory allocation by editing the idea.vmoptions file.\nExample:\n-Xms1024m -Xmx2048m ","subcategory":null,"summary":"","tags":null,"title":"Setup IntelliJ IDEA","url":"/framework/v1.2.0/docs/development/setup_intellij_idea/"},{"category":null,"content":"Setting Up the Golang Environment #  Refer the official guide to install Golang: https://go.dev/doc/install\nGolang Version #  Verify your Go version:\nâžœ loadgen git:(master) âœ— go version go version go1.23.3 darwin/arm64 Directory Setup #  Create the necessary directory structure:\ncd ~/go/src/ mkdir -p infini.sh/  Note: The code must be located under your personal directory at ~/go/src/infini.sh.\nOther locations are not allowedâ€”this is a strict requirement.\n Cloning Dependencies #  Clone the required dependency repositories:\ncd ~/go/src/infini.sh git@github.com:infinilabs/framework.git Cloning Application Code #  For example, to work with the Loadgen project:\ncd ~/go/src/infini.sh git@github.com:infinilabs/loadgen.git Building the Project #  Build the project using the Makefile:\ncd loadgen make The make command will automatically download the required dependency repositories.\nCustomization Build with Built-in Environments #  For example, if you want to expose more debug-level information, such as detecting data races, you can compile a debug build. You may also specify the GOPATH as needed. Use the following command:\nDEV=true GOPATH=\u0026#34;/Users/\u0026lt;Replace_with_your_username\u0026gt;/go\u0026#34; make build To learn more about the Makefile and its commands, refer to this Reference.\n","subcategory":null,"summary":"","tags":null,"title":"Setting Up the Golang Environment","url":"/framework/v1.2.0/docs/development/setup_golang_environment/"}]