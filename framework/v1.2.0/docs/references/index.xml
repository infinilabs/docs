<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>References on INFINI Framework</title><link>/framework/v1.2.0/docs/references/</link><description>Recent content in References on INFINI Framework</description><generator>Hugo -- gohugo.io</generator><atom:link href="/framework/v1.2.0/docs/references/index.xml" rel="self" type="application/rss+xml"/><item><title>Makefile</title><link>/framework/v1.2.0/docs/references/makefile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/framework/v1.2.0/docs/references/makefile/</guid><description>Makefile # The framework simplifies managing your application by providing reusable commands and variables. Below is an example of how Loadgen utilizes this framework in its Makefile:
Use Loadgen for example, here is the project&amp;rsquo;s Makefile looks like:
âžœ loadgen git:(main) cat Makefile SHELL=/bin/bash # APP info APP_NAME := loadgen APP_VERSION := 1.0.0_SNAPSHOT APP_CONFIG := $(APP_NAME).yml $(APP_NAME).dsl APP_EOLDate ?= &amp;#34;2025-12-31T10:10:10Z&amp;#34; APP_STATIC_FOLDER := .public APP_STATIC_PACKAGE := public APP_UI_FOLDER := ui APP_PLUGIN_FOLDER := proxy include .</description></item><item><title>Http Client</title><link>/framework/v1.2.0/docs/references/http_client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/framework/v1.2.0/docs/references/http_client/</guid><description>HTTP Client Configuration # The http_client section defines configurations for HTTP clients, where each key represents a unique client profile. The default key is a special profile that serves as the fallback configuration when no specific profile is specified. Additional profiles can be added and accessed dynamically.
Sample Configuration # http_client: default: proxy: enabled: true default_config: http_proxy: http://127.0.0.1:7890 socket5_proxy: socks5://127.0.0.1:7890 override_system_proxy_env: true # Override system proxy environment settings permitted: - &amp;#34;google.</description></item><item><title>Query URL Parameters</title><link>/framework/v1.2.0/docs/references/query_url/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/framework/v1.2.0/docs/references/query_url/</guid><description>Query URL Parameters # The query URL parameters can be used in many places (e.g., HTTP API endpoints, internal service calls, debug consoles). We use them to unify how queries are received and processed across different components of the system. This provides a powerful, composable, and human-readable way to construct both full-text search and structured filters, while also supporting advanced features like fuzziness, field selection, and pagination.
ðŸ”§ Query URL Parameters # These URL parameters are used to construct a rich and dynamic search query.</description></item></channel></rss>