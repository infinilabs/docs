[{"category":null,"content":"如何在 Console 告警功能中使用环境变量 #  简介 #  在 Console 中配置告警规则的时候，经常可能会遇到这样一个情况，在设置模版的时候，有些内容都是复制粘贴的。 当这部分内容需要修改时，就需要一个个规则去修改，相当的麻烦。这时候您可能会想到能不能使用一个自定义全局变量来 定义这部分内容，这样在模版中使用的地方直接引用就可以了。如果您有这种需求，那么使用 Console 1.2.0 版本就可以了。\n准备 #   下载并安装最新版 INFINI Console (版本要求 1.2.0 及以上)  告警模版中使用环境变量 #  以下是 INFINI Conosle 内置的一个告警规则 Shard Storage \u0026gt;= 55G 配置的告警内容模版，如下图：\n模版配置文本内容如下：\nTimestamp:{{.timestamp | datetime}} RuleID:{{.rule_id}} EventID:{{.event_id}} {{range .results}} ClusterID:{{index .group_values 0}}; ClusterName:{{lookup \u0026quot;category=metadata，object=cluster，property=name，default=N/A\u0026quot; (index .group_values 0) }}; Index: [{{index .group_values 1}}]({{$.env.INFINI_CONSOLE_ENDPOINT}}/#/cluster/overview/{{ index .group_values 0}}/indices/{{ index .group_values 1}}?_g={%22cluster_name%22:%22{{ index .group_values 0}}%22}); Max Shard Storage：{{.result_value | format_bytes 2}}; {{end}} 可以看到这个模版中我们使用了环境变量 INFINI_CONSOLE_ENDPOINT，在模版内容中是通过 {{$.env.INFINI_CONSOLE_ENDPOINT}} 这种书写方式来使用的。 那么要怎么配置这个环境变量呢，有以下两种方法：\n 设置系统环境变量 在 Console 配置文件中设置 env 变量   告警模版在 range 块中，这时候如果省略 $，用 {{.env.INFINI_CONSOLE_ENDPOINT}} 这种写法是没法正确解析的，需要使用 {{$.env.INFINI_CONSOLE_ENDPOINT}} 来访问根部变量 env\n 设置系统环境变量 #  以 Macos 为例，启动 Console 时设置环境变量 INFINI_CONSOLE_ENDPOINT=\u0026quot;https://play.infinilabs.com:64443\u0026quot; ./bin/console\n在配置文件中设置 #  只需在 Console 配置文件 console.yml 中添加以下配置：\nenv: INFINI_CONSOLE_ENDPOINT: \u0026#34;https://play.infinilabs.com:64443\u0026#34; 这中方式修改配置之后，无需重启 Console 即可生效\n 以上两种方式设置的环境变量，系统环境变量优先级会高于配置文件环境变量\n 设置完成之后系统触发规则告警之后，会看到如下图所示告警内容：\n从上图中标注部分可以看到使用的环境变量INFINI_CONSOLE_ENDPOINT 成功地渲染成了 https://play.infinilabs.com:64443。\n小结 #  在 Console 告警功能可以使用系统环境变量（启动时设置）以及在配置文件中 env 配置节下定义变量 两种方式定义环境变量，并在告警模版内容中快速使用 。\n","subcategory":null,"summary":"","tags":null,"title":"如何在 Console 告警功能中使用环境变量","url":"/console/v1.29.3/zh/docs/tutorials/use-env-variable-in-alert-template/"},{"category":null,"content":"如何使用 Console 查看 INFINI 组件实时日志 #  简介 #  如果你安装了几十个 INFINI Gateway 实例，现在有个需求是查看 gateway 的日志，怎么办呢？登录服务器，然后用 tail -f gateway.log 去查看日志。这样操作是可以，但是有没有更高端的操作呢？肯定是有的，下面我们就以查看 INFINI Gateway 实时日志为例详细介绍 如何使用 Console 查看 INFINI 组件实时日志\n准备 #   下载并安装最新版 INFINI Console (版本要求 1.1.0 及以上) 下载并安装最新版的 INFINI Gateway (版本要求 1.13.0 及以上)  配置说明 #  api: enabled: true network: binding: \u0026quot;localhost:2900\u0026quot; websocket: enabled: true #忽略客户端 host 检查 skip_host_verify: true #设置允许连接的客户端 host 列表，skip_host_verify 为 false 时生效 permitted_hosts: [\u0026quot;localhost:2900\u0026quot;] 以 INFINI Gateway v1.13.0 及以上默认配置都是开启 websocket 并且忽略客户端 host 检查的。\n注册网关实例 #  在 Console 中查看 Gateway 日志，首先得把 Gateway 实例在 Console 中注册，详细步骤请参考文档 实例管理\n查看 gateway 实时日志 #  登录 Console 之后点击左侧菜单 资源管理 \u0026gt; 实例管理，如下图：\n然后选择相应的 Gateway 实例，点击 Logging 进入查看日志页面，如下图：\n到这里，如上图先查看右侧连接状态是否正常，选择推送实时日志级别，然后点击 Start 按钮就可以查看实时的推送日志了，如下图：\n 这里默认会自动滚动日志，查看最新日志，也可关闭开关 如果需要过滤日志，可以先点击 Stop 停止，然后再相应输入框中根据文件名，调用函数名，消息内容过滤，输入完成之后重新 点击开始，即可接受到服务器端根据条件过滤后的日志了。  小结 #  通过 Console 查看 Gateway 的实时日志可以说非常方便快捷，无需登录服务器，然后找到日志文件查看日志这些 繁琐的操作，在管理多个实例的时候使用此功能优势就更明显了。\n","subcategory":null,"summary":"","tags":null,"title":"如何使用 Console 查看 INFINI 组件实时日志","url":"/console/v1.29.3/zh/docs/tutorials/view-real-time-logs/"},{"category":null,"content":"为 Console 集成 Github 单点登录 #  简介 #  使用用户名和密码来登录 Console 后台有时候确实很麻烦，密码修改几次自己都忘求了。如果能够通过单点登录那多方便，今天给大家介绍一下具体怎么操作。\n准备 #  首先在 Github 里面的个人设置里面或者组织设置里面，找到开发者设置，如下图：\n选择 OAuth Apps，点击 New OAuth App 按钮，申请一个 OAuth 应用的账号，如下图：\n注意，上面标红的地址换成你部署的 Console 正常访问的地址，Github 登录之后会通过这个地址进行信息的回调，/sso/callback 是 Console 固定的用于单点登录的路径，不要修改。\n如果不出任何意外的话，应该可以跳转到创建成功的页面，在这里可以看到这个 OAuth 应用的 Client ID，另外，我们点击 Generate a new client secret 来创建一个 Client secrets，并复制保存，待会配置的时候会用到。\n创建角色 #  不同的用户登录之后可能需要分配不同的角色，比如我们为登录成功的用户默认分配只读角色，包括平台功能角色和集群权限，如下图：\n设置角色 ReadonlyUI 如下：\n设置角色 AllClusters 如下：\n修改配置 #  进入 Console 配置所在的目录，新增一个配置文件 oauth.yml，添加如下配置信息：\nsecurity: oauth: enabled: true client_id: \u0026#34;替换为你的 client_id\u0026#34; client_secret: \u0026#34;替换为你的 client_secret\u0026#34; default_roles: [\u0026#34;ReadonlyUI\u0026#34;, \u0026#34;AllClusters\u0026#34;] #default for all sso users if no specify roles was defined role_mapping: Github用户名: [\u0026#34;Administrator\u0026#34;] authorize_url: \u0026#34;https://github.com/login/oauth/authorize\u0026#34; token_url: \u0026#34;https://github.com/login/oauth/access_token\u0026#34; redirect_url: \u0026#34;\u0026#34; scopes: [] 替换上面的配置为实际的秘钥信息，在 role_mapping 下面可以为指定的用户设置不同的角色。\n重启生效 #  保存配置，重启 Console 即可生效，打开登录界面，点击下方的 Github 登录按钮即可。\n小结 #  通过集成单点登录，使用 Console 更加简单了。目前 Console 只支持 Github 的集成，更多服务提供方会晚点放出。\n","subcategory":null,"summary":"","tags":null,"title":"为 Console 集成 Github 单点登录","url":"/console/v1.29.3/zh/docs/tutorials/integrate-sso-login-with-github-users/"},{"category":null,"content":"如何使用 INFINI 迁移功能 #  简介 #  本文将介绍如何使用 INFINI Console 和 INFINI Gateway 来迁移 Elasticsearch 索引数据。\n准备 #   下载并安装最新版 INFINI Console (版本要求 0.9.0-1036 及以上) 下载并安装最新版的 INFINI Gateway (版本要求 1.12.0-915 及以上) 两个 Elasticsearch 集群  Gateway 迁移配置 #  下载解压之后默认配置文件名为 gateway.yml，内容如下：\n#the env section used for setup default settings，it can be overwritten by system environments. #eg: PROD_ES_ENDPOINT=http://192.168.3.185:9200 LOGGING_ES_ENDPOINT=http://192.168.3.185:9201 ./bin/gateway env: #use $[[env.LOGGING_ES_ENDPOINT]] in config instead LOGGING_ES_ENDPOINT: https://localhost:9200 LOGGING_ES_USER: admin LOGGING_ES_PASS: admin PROD_ES_ENDPOINT: https://localhost:9200 PROD_ES_USER: admin PROD_ES_PASS: admin GW_BINDING: \u0026#34;0.0.0.0:8000\u0026#34; API_BINDING: \u0026#34;0.0.0.0:2900\u0026#34; # omitted configurations # ... 一般我们只要按需修改 Elasticsearch 集群的地址和身份验证信息， 这里我们修改 env 配置节如下：\nenv: #use $[[env.LOGGING_ES_ENDPOINT]] in config instead LOGGING_ES_ENDPOINT: https://192.168.3.12:9212 LOGGING_ES_USER: admin LOGGING_ES_PASS: admin PROD_ES_ENDPOINT: https://192.168.3.12:9212 PROD_ES_USER: admin PROD_ES_PASS: admin GW_BINDING: \u0026#34;0.0.0.0:8000\u0026#34; API_BINDING: \u0026#34;0.0.0.0:2900\u0026#34;  这里需要注意的是 LOGGING_ES_ENDPOINT 配置的是日志写入的 ES 集群，这个集群需要和 Console 配置的系统 ES 集群保持一致\n 启动 Gateway #  ./gateway-xxx-xxx -config gateway.yml 注册 Gateway #  这里我们使用极限网关作为迁移任务的执行者，需要提前将网关实例注册到 Console 里面管理，后面创建迁移任务的时候会用到。 点击 INFINI Console 中左侧菜单 资源管理 \u0026gt; 网关管理，然后点击 新建 按钮注册新的实例，如下图所示：\n输入网关的地址，这里要注意网关的默认 API 地址使用的是 2900 端口，这里我们输入 192.168.3.12:2900，然后点击下一步\n点击下一步，完成网关注册\n注册源集群和目标集群 #  点击 INFINI Console 中左侧菜单 资源管理 \u0026gt; 集群管理，然后点击注册集群，先后注册源集群 es-v5616 和目标集群 es-v710，如下图所示：\n如果 Elasticsearch 集群有身份验证，需要设置身份验证信息，然后点击下一步\n确认集群信息无误，然后点击下一步\n到这里源目标集群就注册完成了，目标集群 es-v710 的注册步骤也是一样的，这里就不赘述了。\n创建迁移任务 #  点击 INFINI Console 中左侧菜单 数据工具 \u0026gt; 数据迁移，然后点击新建按钮创建迁移任务，如下图所示：\n配置迁移集群 #  在源集群列表中选择集群 es-v5616，在目标集群列表中选择集群 es-v710\n配置迁移索引 #  点击选择迁移索引按钮，如下图：\n这里我们选择了索引 test ,然后点击确认\n test 索引包含两个 type，系统自动按 type 拆分成两个索引\n 表格右方可以设置目标索引名称和文档 type，按需修改即可。 选择完索引之后，点击下一步，进行索引的初始化操作，如下图：\n点击展开后，可以看到有 mappings 和 settings 设置，如图所示， mappings 设置左侧显示的是源集群索引的 mappings， 可以点击中间按钮复制到右侧， 然后点击 Auto Optimize 自动优化（兼容性优化）。设置完成后点击 Start 执行初始化 mappings 和 settings 操作，若没有设置，则自动跳过。\n 如果已通过其他方式初始化索引 settings 和 mappings， 这里可以直接点击下一步跳过\n 完成索引初始化之后，点击下一步，进行迁移任务的数据范围设置和分区设置，如下图：\n配置数据范围 #  如果需要过滤数据迁移，可以进行数据范围的设置，这里我们进行全量的数据迁移，就不设置了\n配置数据分区 #  如果一个索引数据量特别大，可以进行数据分区的设置。数据分区根据设置的字段，以及分区步长将数据拆成多段，系统最终会将一个分段的数据作为一个子任务去运行，迁移数据， 这样的话即使，一个分段迁移过程出现异常，只需要重跑这个子任务。\n数据分区设置目前支持按照日期类型字段（date），和数字类型 (number) 拆分分区，如上图所示，我们选择日期类型字段 now_widh_format 进行拆分分区，分区步长设置为 5 分钟(5m)，然后点击预览按钮，可以看到根据设置拆分可以得到 8 个分区（文档数为 0 的分区最终不会生成子任务）。 根据预览信息确认分区设置无误之后，点击保存关闭分区设置并保存，然后点击下一步进行运行设置。\n运行设置 #  一般情况下使用默认设置，然后执行节点选择先前注册的网关实例 Nebula，然后点击创建任务。\n启动迁移任务 #  创建迁移任务成功后会看到任务列表，如下图：\n可以看到，最近一条任务就是我们刚创建的，然后在表格右侧操作栏中点击 start 开始任务\n 任务开始之前，需要确认如果迁移索引涉及到 ILM 配置，需要确认目标集群中相关索引模版，ILM 别名是否配置好。\n 点击开始按钮 启动迁移任务。\n查看迁移任务进度 #  任务启动成功之，点击详情进入任务详情页查看任务执行状态。点击 Refresh 按钮开启自动刷新之后，我们可以看到任务详情有如下变化：\n图中蓝色方块表示，子任务（分区任务）已经在运行，灰色表示任务还没有开始\n上图中可以看到方块变成了绿色，表示子任务（分区任务）已经数据迁移完成，索引 test-doc 的迁移进度是 100%，索引 test-doc1 迁移进度是 21.11\n上图中可以看到所有方块变成了绿色，索引迁移进度都是 100%，表示数据已经迁移完成。 如果迁移过程中有方块变成了红色，则表示迁移过程出现了错误，这时候可以点击任务方块进度信息里面的 View Log 查看错误日志，定位具体错误原因。\n小结 #  使用 INFINI 数据迁移功能可以很方便地将 Elasticsearch 数据进行跨版本迁移，并且可以很直观地查看当前数据的迁移进度。\n","subcategory":null,"summary":"","tags":null,"title":"如何使用 INFINI 迁移功能","url":"/console/v1.29.3/zh/docs/tutorials/data_migration/"},{"category":null,"content":"如何监控 Elasticsearch 集群节点的 JVM 使用率 #  简介 #  本文将介绍如何使用 INFINI Console 监控 Elasticsearch 集群节点 JVM 的使用率，并进行告警。\n准备 #   下载并安装最新版 INFINI Console 使用 INFINI Console 注册 Elasticsearch 集群  创建告警规则 #  在浏览器中打开 INFINI Console，点击左侧菜单 告警管理 \u0026gt; 规则管理 进入告警管理页，然后点击 新建 按钮进入创建告警规则页。按以下步骤创建告警规则：\n 选择集群（这里需要选择 INFINI Console 存储数据的 Elasticsearch 集群，也就是在配置文件 console.yml 配置的 Elasticsearch 集群，如果没有注册到 INFINI Console，请先注册） 输入告警对象 .infini_metrics*（选择 Elasticsearch 集群下的索引，或者输入索引 pattern，这里因为 INFINI Console 采集的监控数据存放在索引 .infini_metrics 里面） 输入筛选条件（Elasticsearch 查询 DSL）这里我们需要过滤监控指标类别为 node_stats 及元数据分类为 elasticsearch，DSL 如下：  { \u0026#34;bool\u0026#34;: { \u0026#34;must\u0026#34;: [ { \u0026#34;term\u0026#34;: { \u0026#34;metadata.name\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;node_stats\u0026#34; } } }, { \u0026#34;term\u0026#34;: { \u0026#34;metadata.category\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;elasticsearch\u0026#34; } } } ] } }  选择时间字段 timestamp 和统计周期用于做 date histogram 聚合   输入规则名称 分组设置（可选，可配置多个），当统计指标需要分组的时候设置，由于所有注册到 INFINI Console 的 Elasticsearch 集群监控指标都存储在索引 .infini_metrics 里面，所以需要先根据集群 ID 分组，然后再根据节点 ID 分组，这里我们选择 metadata.labels.cluster_id 和 metadata.labels.node_id 配置告警指标，选择聚合字段 payload.elasticsearch.node_stats.jvm.mem.heap_used_percent，统计方法 p90。 配置指标公式（当配置了一个以上的告警指标的时候，需要设置一个公式来计算目标指标），这里公式 fx 配置为 a。然后设置变量 a 的数值类型为比率 Ratio 配置告警条件，这里配置三个告警条件，配置 持续一个周期 JVM 使用率 大于 50 的时候，触发 P2(Medium) 告警；配置 持续一个周期 JVM 使用率 大于 90 的时候，触发 P1(High) 告警；配置 持续一个周期 JVM 使用率 大于 95 的时候，触发 P0(Critical) 告警； 设置执行周期，这里配置一分钟执行一次检查 设置事件标题，事件标题是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里 设置事件内容，事件内容是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里  Priority:{{.priority}} Timestamp:{{.timestamp | datetime_in_zone \u0026quot;Asia/Shanghai\u0026quot;}} RuleID:{{.rule_id}} EventID:{{.event_id}} {{range .results}} ClusterID:{{index .group_values 0}}; NodeID:{{index .group_values 1}}; JVM used percent：{{.result_value | to_fixed 2}}%; {{end}}  打开配置告警渠道开关，选择右上角 add 快速选择一个告警渠道模版填充，关于怎么创建告警渠道模版请参考 这里 设置沉默周期 1 小时，即触发告警规则后，一个小时内只发送通知消息一次 设置接收时段，默认 00:00-23:59，即全天都可接收通知消息  设置完成之后点击保存按钮提交。\n收到告警通知消息 #  等待一会儿，收到钉钉告警消息通知如下：\n可以看到告警通知消息里面显示了当前规则触发的 Elasticsearch 集群 ID，节点 ID，当前 JVM 使用率。\n查看告警消息中心 #  除了会收到外部通知消息外，INFINI Console 告警消息中心也会生成一条告警消息。点击菜单 告警管理 \u0026gt; 告警中心 进入\n小结 #  通过使用 INFINI Console 告警功能， 可以很方便地监控 Elasticsearch 集群节点的 JVM 使用率。配置告警规则之后，一旦有任何 Elasticsearch 节点 JVM 使用率超过设定的阈值就会触发告警并发送告警消息。\n","subcategory":null,"summary":"","tags":null,"title":"如何监控 Elasticsearch 集群节点的 JVM 使用率","url":"/console/v1.29.3/zh/docs/tutorials/cluster_node_jvm_usage/"},{"category":null,"content":"如何监控 Elasticsearch 集群节点的 CPU 使用率 #  简介 #  本文将介绍如何使用 INFINI Console 监控 Elasticsearch 集群节点磁盘的使用率，并进行告警。\n准备 #   下载并安装最新版 INFINI Console 使用 INFINI Console 注册 Elasticsearch 集群  创建告警规则 #  在浏览器中打开 INFINI Console，点击左侧菜单 告警管理 \u0026gt; 规则管理 进入告警管理页，然后点击 新建 按钮进入创建告警规则页。按以下步骤创建告警规则：\n 选择集群（这里需要选择 INFINI Console 存储数据的 Elasticsearch 集群，也就是在配置文件 console.yml 配置的 Elasticsearch 集群，如果没有注册到 INFINI Console，请先注册） 输入告警对象 .infini_metrics*（选择 Elasticsearch 集群下的索引，或者输入索引 pattern，这里因为 INFINI Console 采集的监控数据存放在索引 .infini_metrics 里面） 输入筛选条件（Elasticsearch 查询 DSL）这里我们需要过滤监控指标类别为 node_stats 及元数据分类为 elasticsearch，DSL 如下：  { \u0026#34;bool\u0026#34;: { \u0026#34;must\u0026#34;: [ { \u0026#34;term\u0026#34;: { \u0026#34;metadata.name\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;node_stats\u0026#34; } } }, { \u0026#34;term\u0026#34;: { \u0026#34;metadata.category\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;elasticsearch\u0026#34; } } } ] } }  选择时间字段 timestamp 和统计周期用于做 date histogram 聚合   输入规则名称 分组设置（可选，可配置多个），当统计指标需要分组的时候设置，由于所有注册到 INFINI Console 的 Elasticsearch 集群监控指标都存储在索引 .infini_metrics 里面，所以需要先根据集群 ID 分组，然后再根据节点 ID 分组， 这里我们选择 metadata.labels.cluster_id 和 metadata.labels.node_id。 配置告警指标，选择聚合字段 payload.elasticsearch.node_stats.process.cpu.percent，统计方法 avg。 配置指标公式（当配置了一个以上的告警指标的时候，需要设置一个公式来计算目标指标），这里公式 fx 配置为 a。然后设置变量 a 的数值类型为比率 Ratio。 配置告警条件，这里配置三个告警条件，配置 持续一个周期 CPU 使用率 大于 80 的时候，触发 P2(Medium) 告警; 配置 持续一个周期 CPU 使用率 大于 90 的时候，触发 P1(High) 告警; 配置 持续一个周期 CPU 使用率 大于 95 的时候，触发 P0(Critical) 告警; 设置执行周期，这里配置一分钟执行一次检查 设置事件标题，事件标题是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里 设置事件内容，事件内容是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里  Priority:{{.priority}} Timestamp:{{.timestamp | datetime_in_zone \u0026quot;Asia/Shanghai\u0026quot;}} RuleID:{{.rule_id}} EventID:{{.event_id}} {{range .results}} ClusterID:{{index .group_values 0}}; NodeID:{{index .group_values 1}}; CPU:{{.result_value | to_fixed 2}}%; {{end}}  打开配置告警渠道开关，选择右上角 add 快速选择一个告警渠道模版填充，关于怎么创建告警渠道模版请参考 这里 设置沉默周期 1 小时，即触发告警规则后，一个小时内只发送通知消息一次 设置接收时段，默认 00:00-23:59，即全天都可接收通知消息  设置完成之后点击保存按钮提交。\n收到告警通知消息 #  等待一会儿，收到钉钉告警消息通知如下：\n可以看到告警通知消息里面显示了当前规则触发的 Elasticsearch 集群 ID，节点 ID，当前 CPU 使用率。\n查看告警消息中心 #  除了会收到外部通知消息外，INFINI Console 告警消息中心也会生成一条告警消息。点击菜单 告警管理 \u0026gt; 告警中心 进入\n小结 #  通过使用 INFINI Console 告警功能， 可以很方便地监控 Elasticsearch 集群节点的 CPU 使用率。配置告警规则之后，一旦有任何 Elasticsearch 节点 CPU 使用率超过设定的阈值就会触发告警并发送告警消息。\n","subcategory":null,"summary":"","tags":null,"title":"如何监控 Elasticsearch 集群节点的 CPU 使用率","url":"/console/v1.29.3/zh/docs/tutorials/cluster_node_cpu_usage/"},{"category":null,"content":"如何监控 Elasticsearch 集群节点磁盘使用率 #  简介 #  当系统磁盘使用率过高时，Elasticsearch 集群会出现数据写入不进去的情况，这样很可能导致数据丢失，所以监控 Elasticsearch 集群节点磁盘使用率是很有必要的。本文将介绍如何使用 INFINI Console 告警功能监控 Elasticsearch 集群节点磁盘的使用率。\n准备 #   下载并安装最新版 INFINI Console 使用 INFINI Console 注册 Elasticsearch 集群  创建告警规则 #  在浏览器中打开 INFINI Console，点击左侧菜单 告警管理 \u0026gt; 规则管理 进入告警管理页，然后点击 新建 按钮进入创建告警规则页。按以下步骤创建告警规则：\n 选择集群（这里需要选择 INFINI Console 存储数据的 Elasticsearch 集群，也就是在配置文件 console.yml 配置的 Elasticsearch 集群，如果没有注册到 INFINI Console，请先注册） 输入告警对象 .infini_metrics*（选择 Elasticsearch 集群下的索引，或者输入索引 pattern，这里因为 INFINI Console 采集的监控数据存放在索引 .infini_metrics 里面） 输入筛选条件（Elasticsearch 查询 DSL）这里我们需要过滤监控指标类别为 node_stats，DSL 如下：  { \u0026#34;bool\u0026#34;: { \u0026#34;must\u0026#34;: [ { \u0026#34;term\u0026#34;: { \u0026#34;metadata.name\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;node_stats\u0026#34; } } } ] } }  选择时间字段 timestamp 和统计周期用于做 date histogram 聚合   输入规则名称 分组设置（可选，可配置多个），当统计指标需要分组的时候设置，由于所有注册到 INFINI Console 的 Elasticsearch 集群监控指标都存储在索引 .infini_metrics 里面，所以需要先根据集群 ID 分组，然后再根据节点 ID 分组， 这里我们选择 metadata.labels.cluster_id 和 metadata.labels.node_id 配置告警指标，选择聚合字段 payload.elasticsearch.node_stats.fs.total.free_in_bytes，统计方法 avg。然后再添加一个告警指标，选择聚合字段 payload.elasticsearch.node_stats.fs.total.total_in_bytes，统计方法 avg。 配置指标公式（当配置了一个以上的告警指标的时候，需要设置一个公式来计算目标指标），这里公式 fx 配置为 ((b-a)/b)*100，意思是先用 总的磁盘空间 减去 剩余磁盘空间 得到 磁盘的已使用空间，然后用 磁盘的已使用空间 除以 总的磁盘空间 再乘以 100，得到 磁盘的使用率 配置告警条件，这里配置三个告警条件，配置 持续一个周期 磁盘使用率 大于 80 的时候，触发 P2(Medium) 告警；配置 持续一个周期 磁盘使用率 大于 90 的时候，触发 P1(High) 告警；配置 持续一个周期 磁盘使用率 大于 95 的时候，触发 P0(Critical) 告警 设置执行周期，这里配置一分钟执行一次检查 设置事件标题，事件标题是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里 设置事件内容，事件内容是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里  Priority:{{.priority}} Timestamp:{{.timestamp | datetime}} RuleID:{{.rule_id}} EventID:{{.event_id}} {{range .results}} ClusterID：{{index .group_values 0}} ; NodeID：{{index .group_values 1}} ; Disk Usage:{{.result_value | to_fixed 2}}%； Free Storage:{{.relation_values.a | format_bytes 2}}； {{end}}  打开配置告警渠道开关，选择右上角 add 快速选择一个告警渠道模版填充，关于怎么创建告警渠道模版请参考 这里 设置沉默周期 1 小时，即触发告警规则后，一个小时内只发送通知消息一次 设置接收时段，默认 00:00-23:59，即全天都可接收通知消息  设置完成之后点击保存按钮提交。\n收到告警通知消息 #  等待一会儿，收到钉钉告警消息通知如下：\n可以看到告警通知消息里面显示了磁盘使用率过高的 Elasticsearch 集群 ID，节点 ID，磁盘剩余空间。\n查看告警消息中心 #  除了会收到外部通知消息外，INFINI Console 告警消息中心也会生成一条告警消息。点击菜单 告警管理 \u0026gt; 告警中心 进入\n小结 #  通过使用 INFINI Console 告警功能， 可以很方便地监控 Elasticsearch 集群节点磁盘使用率。配置告警规则之后，一旦有任何 Elasticsearch 节点磁盘使用率超过设定的阈值就会触发告警并发送告警消息。\n","subcategory":null,"summary":"","tags":null,"title":"如何监控 Elasticsearch 集群节点磁盘使用率","url":"/console/v1.29.3/zh/docs/tutorials/cluster_node_disk_usage/"},{"category":null,"content":"如何监控 Elasticsearch 集群健康状态 #  简介 #  很多时候 Elasticsearch 集群会因为某些原因，集群健康状态会变为红色，这个时候 Elasticsearch 集群至少存在一个主分片未分配或者丢失。所以监控 Elasticsearch 集群健康状态是很有必要的。本文将介绍如何使用 INFINI Console 告警功能监控 Elasticsearch 集群健康状态。\n准备 #   下载并安装最新版 INFINI Console 使用 INFINI Console 注册 Elasticsearch 集群  创建告警规则 #  在浏览器中打开 INFINI Console, 点击左侧菜单 告警管理 \u0026gt; 规则管理 进入告警管理页，然后点击 新建 按钮进入创建告警规则页。按以下步骤创建告警规则：\n 选择集群（这里需要选择 INFINI Console 存储数据的 Elasticsearch 集群，也就是在配置文件 console.yml 配置的 Elasticsearch 集群，如果没有注册到 INFINI Console , 请先注册） 选择告警对象 .infini_metrics（选择 Elasticsearch 集群下的索引，或者输入索引 pattern, 这里因为 INFINI Console 采集的监控数据存放在索引 .infini_metrics 里面） 输入筛选条件（Elasticsearch 查询 DSL） 这里我们需要过滤监控指标类别为 cluster_health，并且健康状态为红色的数据，DSL 如下：  { \u0026#34;bool\u0026#34;: { \u0026#34;must\u0026#34;: [ { \u0026#34;match\u0026#34;: { \u0026#34;payload.elasticsearch.cluster_health.status\u0026#34;: \u0026#34;red\u0026#34; } }, { \u0026#34;term\u0026#34;: { \u0026#34;metadata.name\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;cluster_health\u0026#34; } } } ] } }  选择时间字段和统计周期用于做 date histogram 聚合   输入规则名称 分组设置（可选，可配置多个），当统计指标需要分组的时候设置，由于所有注册到 INFINI Console 的 Elasticsearch 集群监控指标都存储在索引 .infini_metrics 里面，所以需要根据集群 ID 分组，这里我们选择 metadata.labels.cluster_id 配置告警指标，选择聚合字段 payload.elasticsearch.cluster_health.status，统计方法 count 配置告警条件，配置 持续一个周期 聚合结果 大于等于 1，即触发 Critical 告警 设置执行周期，这里配置一分钟执行一次检查 设置事件标题，事件标题是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里 设置事件内容，事件内容是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里   打开配置告警渠道开关，选择右上角 add 快速选择一个告警渠道模版填充，关于怎么创建告警渠道模版请参考 这里 设置沉默周期 1 小时，即触发告警规则后，一个小时内只发送通知消息一次 设置接收时段，默认 00:00-23:59，即全天都可接收通知消息  设置完成之后点击保存按钮提交。\n模拟触发告警规则 #  打开 INFINI Console 开发工具（Ctrl+Shift+O），输入如下图所示命令：\n收到告警通知消息 #  等待一分钟左右，收到钉钉告警消息通知如下：\n可以看到告警通知消息里面显示了健康状态变红的 Elasticsearch 集群 ID，点击消息下方的链接查看告警详细信息如下：\n查看告警消息中心 #  除了会收到外部通知消息外，INFINI Console 告警消息中心也会生成一条告警消息。点击菜单 告警管理 \u0026gt; 告警中心 进入\n小结 #  通过使用 INFINI Console 告警功能， 可以很方便地监控 Elasticsearch 集群健康状态。配置告警规则之后，一旦有任何 Elasticsearch 集群状态变红，都会触发告警并发送告警消息。\n","subcategory":null,"summary":"","tags":null,"title":"如何监控 Elasticsearch 集群健康状态","url":"/console/v1.29.3/zh/docs/tutorials/cluster_health_change/"},{"category":null,"content":"如何监控 Elasticsearch 里面的慢查询请求 #  简介 #  很多时候，Elasticsearch 集群会出现数据写入或者查询流量高峰期的情况，这个时候 Elasticsearch 集群压力会很大，通过对 Elasticsearch 索引查询的延迟的监控告警。可以让我们定位 Elasticsearch 集群的压力主要集中在哪些索引。本文将介绍如何使用 INFINI Console 告警功能监控 Elasticsearch 里面的慢查询请求索引。\n准备 #   下载并安装最新版 INFINI Console 使用 INFINI Console 注册 Elasticsearch 集群  创建告警规则 #  在浏览器中打开 INFINI Console，点击左侧菜单 告警管理 \u0026gt; 规则管理 进入告警管理页，然后点击 新建 按钮进入创建告警规则页。按以下步骤创建告警规则：\n 选择集群（这里需要选择 INFINI Console 存储数据的 Elasticsearch 集群，也就是在配置文件 console.yml 配置的 Elasticsearch 集群，如果没有注册到 INFINI Console，请先注册） 输入告警对象 .infini_metrics*（选择 Elasticsearch 集群下的索引，或者输入索引 pattern，这里因为 INFINI Console 采集的监控数据存放在索引 .infini_metrics 里面） 输入筛选条件（Elasticsearch 查询 DSL）这里我们需要过滤监控指标类别为 index_stats，并且索引名称不能为 _all，DSL 如下：  { \u0026#34;bool\u0026#34;: { \u0026#34;must\u0026#34;: [ { \u0026#34;term\u0026#34;: { \u0026#34;metadata.name\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;index_stats\u0026#34; } } }, { \u0026#34;term\u0026#34;: { \u0026#34;metadata.category\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;elasticsearch\u0026#34; } } } ], \u0026#34;must_not\u0026#34;: [ { \u0026#34;term\u0026#34;: { \u0026#34;metadata.labels.index_name\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;_all\u0026#34; } } } ] } }  选择时间字段 timestamp 和统计周期用于做 date histogram 聚合   输入规则名称 分组设置（可选，可配置多个），当统计指标需要分组的时候设置，由于所有注册到 INFINI Console 的 Elasticsearch 集群监控指标都存储在索引 .infini_metrics 里面，所以需要先根据集群 ID 分组，然后再根据索引名称分组， 这里我们选择 metadata.labels.cluster_id 和 metadata.labels.index_name 配置告警指标，选择聚合字段 payload.elasticsearch.index_stats.total.search.query_time_in_millis，统计方法求导 derivative。然后再添加一个告警指标，选择聚合字段 payload.elasticsearch.index_stats.total.search.query_total，统计方法 derivative 配置指标公式（当配置了一个以上的告警指标的时候，需要设置一个公式来计算目标指标），这里公式 fx 配置为 a/b 来计算延时， 配置告警条件，这里配置三个告警条件，配置 持续一个周期 延时 大于 100 的时候，触发 P3(Low) 告警；配置 持续一个周期 延时 大于 500 的时候，触发 P1(High) 告警；配置 持续一个周期 延时 大于 1000 的时候，触发 P0(Critical) 告警 设置执行周期，这里配置一分钟执行一次检查 设置事件标题，事件标题是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里 设置事件内容，事件内容是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里  Priority:{{.priority}} Timestamp:{{.timestamp | datetime_in_zone \u0026quot;Asia/Shanghai\u0026quot;}} RuleID:{{.rule_id}} EventID:{{.event_id}} {{range .results}} ClusterID:{{index .group_values 0}}; Index name:{{index .group_values 1}}; Current value:{{.result_value | to_fixed 2}}ms; {{end}}  打开配置告警渠道开关，选择右上角 add 快速选择一个告警渠道模版填充，关于怎么创建告警渠道模版请参考 这里 设置沉默周期 1 小时，即触发告警规则后，一个小时内只发送通知消息一次 设置接收时段，默认 00:00-23:59，即全天都可接收通知消息  设置完成之后点击保存按钮提交。\n收到告警通知消息 #  等待一会儿，收到钉钉告警消息通知如下：\n可以看到告警通知消息里面显示了查询延时过高的 Elasticsearch 集群 ID，索引名称，延时大小。\n查看告警消息中心 #  除了会收到外部通知消息外，INFINI Console 告警消息中心也会生成一条告警消息。点击菜单 告警管理 \u0026gt; 告警中心 进入\n小结 #  通过使用 INFINI Console 告警功能， 可以很方便地监控 Elasticsearch 集群慢索引。配置告警规则之后，一旦有任何 Elasticsearch 索引查询延时过高，都会触发告警并发送告警消息。\n","subcategory":null,"summary":"","tags":null,"title":"如何监控 Elasticsearch 里面的慢查询请求","url":"/console/v1.29.3/zh/docs/tutorials/cluster_slow_request/"},{"category":null,"content":"角色管理 #  简介 #  角色管理包括对角色的增删改查操作。 INFINI Console 内置了一个管理员角色，角色名为 Administrator, 该角色拥有所有的操作权限, 包括所有的平台权限和数据权限。 数据角色用于控制 elasticsearch 集群的访问权限, 包括 elasticsearch API 的访问权限， elasticsearch API 的列表可以在安装目录下的 config/permission.json 文件中配置。\n创建平台角色 #   输入唯一的角色名. 选择平台权限，不能为空. 按需输入角色描述 点击保存按钮保存  All 权限代表同时拥有读和写的权限, Read 代表只读权限, None 代表没有权限。\n创建数据角色 #   输入唯一的角色名. 选择一个或者多个集群， * 代表选择所有集群. 配置集群级别 API 权限, * 代表所有集群级别 API 权限. 配置索引级别 API 权限, * 代表所有索引级别 API 权限. 按需输入角色描述 点击保存按钮保存  查询角色 #  输入关键字点击搜索按钮查询角色。\n更新平台角色 #  按需修改角色，然后点击保存按钮保存。\n更新数据角色 #  按需修改角色，然后点击保存按钮保存。\n","subcategory":null,"summary":"","tags":null,"title":"角色管理","url":"/console/v1.29.3/zh/docs/reference/system/security/role/"},{"category":null,"content":"容器部署 #  INFINI Console 支持容器方式部署。\n下载镜像 #  INFINI Console 的镜像发布在 Docker 的官方仓库，地址如下：\nhttps://hub.docker.com/r/infinilabs/console\n使用下面的命令即可获取最新的容器镜像：\ndocker pull infinilabs/console:1.29.3-2018 验证镜像 #  将镜像下载到本地之后，可以看到 INFINI Console 平台的容器镜像非常小，只有不到 30MB，所以下载的速度应该是非常快的。\n➜ docker images |grep \u0026#34;console\u0026#34; |grep \u0026#34;1.29.3-2018\u0026#34; REPOSITORY TAG IMAGE ID CREATED SIZE infinilabs/console latest 8c27cd334e4c 47 minutes ago 26.4MB 启动平台 #  使用如下命令启动极限网关容器：\ndocker run -p 9000:9000 infinilabs/console:1.29.3-2018 Docker Compose #  还可以使用 docker compose 来管理容器实例，新建一个 docker-compose.yml 文件如下：\nversion: \u0026#34;3.5\u0026#34; services: infini-console: image: infinilabs/console:1.29.3-2018 ports: - 9000:9000 container_name: \u0026quot;infini-console\u0026quot; 在配置文件所在目录，执行如下命令即可启动，如下：\ndocker-compose up ","subcategory":null,"summary":"","tags":null,"title":"容器部署","url":"/console/v1.29.3/zh/docs/getting-started/docker/"},{"category":null,"content":"Helm 部署 #  INFINI Console 支持 Helm 方式部署。\n添加仓库 #  Chart 仓库地址在这里 https://helm.infinilabs.com。\n使用下面的命令添加仓库：\nhelm repo add infinilabs https://helm.infinilabs.com 前提 #  Chart 包中默认配置的 StorageClass 是 local-path，可参考 这里安装。\n如果想使用其他已安装的 StorageClass, 可以创建一个 YAML 文件（例如：values.yaml），添加如下配置\nstorageClassName: \\\u0026lt;storageClassName\\\u0026gt; 创建的时候使用 -f 参数指定，替换默认值。\n安装 #  helm install console infinilabs/console -n \u0026lt;namespace\u0026gt; 卸载 #  helm uninstall console -n \u0026lt;namespace\u0026gt; kubectl delete pvc console-data-console-0 console-config-console-0 -n \u0026lt;namespace\u0026gt; ","subcategory":null,"summary":"","tags":null,"title":"Helm 部署","url":"/console/v1.29.3/zh/docs/getting-started/helm/"},{"category":null,"content":"如何给 INFINI Console 账户分配 Elasticsearch 索引级别权限 #  简介 #  本文将介绍使用 INFINI Console 限定某个账户只有 Elasticsearch 集群里面某些索引的管理权限\n准备 #   下载并安装最新版 INFINI Console 开启 INFINI Console 安全功能 注册至少两个 Elasticsearch 集群到 INFINI Console  创建角色 #  点击 INFINI Console 左侧菜单 系统管理 \u0026gt; 安全设置，选择角色 Tab 页进入角色管理页。\n新建平台角色 platform_role #  点击新建按钮，选择平台角色，新建一个平台角色 platform_role\n新建数据角色 test_index_only #  点击新建按钮，选择数据角色，新建一个数据角色 test_index_only，然后做如下配置：\n 将集群只选择 es-v7140 （限制该角色只有 Elasticsearch 集群 es-v7140 的访问权限） 设置索引权限 索引只输入索引 pattern test* （限制该角色只有索引名称匹配 test* 的索引访问权限）  配置完成之后点击保存按钮提交。\n创建账户 #  点击 INFINI Console 左侧菜单 系统管理 \u0026gt; 安全设置，选择用户 Tab 页进入账户管理页。\n新建账户 liming #  点击新建按钮，新建账户 liming，并赋予这个账户角色 platform_role，test_index_only\n点击保存按钮提交创建成功之后，保存一下账户密码\n使用管理员账号登录 #  使用管理员账号登录之后，点击菜单数据管理里面的索引管理，选择集群 es-v7140， 然后可以看到：\n使用账号 liming 登录 #  使用账号 liming 登录之后，点击菜单数据管理里面的索引管理，选择集群 es-v7140， 然后可以看到：\n小结 #  通过指定角色的 Elasticsearch 集群权限以及索引权限，可以轻松地将用户的权限分配精准控制到索引级别。\n","subcategory":null,"summary":"","tags":null,"title":"如何给 INFINI Console 账户分配 Elasticsearch 索引级别权限","url":"/console/v1.29.3/zh/docs/tutorials/role_with_index_limit/"},{"category":null,"content":"如何给不同 INFINI Console 账户分配不同 Elasticsearch 集群访问权限 #  简介 #  本文将介绍使用 INFINI Console 给两个不同账户分配两个不同的 Elasticsearch 集群管理权限\n准备 #   下载并安装最新版 INFINI Console 开启 INFINI Console 安全功能 注册至少两个 Elasticsearch 集群到 INFINI Console  创建角色 #  点击 INFINI Console 左侧菜单 系统管理 \u0026gt; 安全设置，选择角色 Tab 页进入角色管理页。\n新建平台角色 platform_role #  点击新建按钮，选择平台角色，新建一个平台角色 platform_role，操作步骤如下：\n 输入角色名称 platform_role 展开所有的功能权限 除了系统设置下面的安全功能，其他所有的功能都选择 All 权限。 系统设置下面的安全功能 设置为 None 权限。 点击保存按钮提交  选择某个功能的 All 权限代表拥有这个功能的读和写的操作权限， Read 代表只拥有读的权限， None 代表没有该功能权限（用户登录之后菜单中没有该功能）\n   新建数据角色 es-v7171 #  点击新建按钮，选择数据角色，新建一个数据角色 es-v7171\n新建数据角色 es-v630 #  点击新建按钮，选择数据角色，新建一个数据角色 es-v630，配置同角色 es-v7171 类似\n创建账户 #  点击 INFINI Console 左侧菜单 系统管理 \u0026gt; 安全设置，选择用户 Tab 页进入账户管理页。\n新建账户 zhangsan #  点击新建按钮，新建账户 zhangsan，并赋予这个账户角色 platform_role，es-v717\n点击保存按钮提交创建成功之后，保存一下账户密码\n新建账户 wangwu #  点击新建按钮，新建账户 wangwu，并赋予这个账户角色 platform_role，es-v630 ,配置同账户 zhangsan 类似\n使用管理员账号登录 #  使用管理员账号登录之后，查看平台概览，注册的 13 个集群都可以看到\n使用账号 zhangsan 登录 #  使用账号 zhangsan 登录之后，查看平台概览，只能看到集群 es-v7171\n使用账号 wangwu 登录 #  使用账号 zhangsan 登录之后，查看平台概览，只能看到集群 es-v630\n小结 #  通过创建不同的角色并且赋予不同的 Elasticsearch 集群权限，然后将角色赋予用户，我们可以快速的实现 对不同用户赋予不同的 Elasticsearch 集群权限。\n","subcategory":null,"summary":"","tags":null,"title":"如何给不同 INFINI Console 账户分配不同 Elasticsearch 集群访问权限","url":"/console/v1.29.3/zh/docs/tutorials/role_with_different_rights/"},{"category":null,"content":"如何轻松创建一个 Elasticsearch “游客” 用户 #  简介 #  有些情况下，我们想给客户分享一下某些功能或者数据，但是又不希望数据被修改。这个时候我们就需要创建一个“游客” 用户了。本文简单地介绍了如何使用 INFINI Console 创建\u0026quot;游客\u0026quot;用户。\n准备 #   下载并安装最新版 INFINI Console 开启 INFINI Console 安全功能  创建角色 #  点击 INFINI Console 左侧菜单 系统管理 \u0026gt; 安全设置，选择角色 Tab 页进入角色管理页。\n新建平台角色 readonly #  点击新建按钮，选择平台角色，新建一个平台角色 readonly，操作步骤如下：\n 输入角色名称 readonly 展开所有的功能权限 除了系统设置下面的安全功能，其他所有的功能都选择 Read 权限。 系统设置下面的安全功能 设置为 None 权限。 点击保存按钮提交  选择某个功能的 All 权限代表拥有这个功能的读和写的操作权限， Read 代表只拥有读的权限， None 代表没有该功能权限（用户登录之后菜单中没有该功能）\n   新建数据角色 es-v7171 #  点击新建按钮，选择数据角色，新建一个数据角色 es-v7171，操作步骤如下：\n 输入角色名称 es-v7171 集群权限选择集群 es-v7171 点击保存按钮提交  新建账户 guest #  点击 INFINI Console 左侧菜单 系统管理 \u0026gt; 安全设置，选择用户 Tab 页进入账户管理页。 点击新建按钮，新建账户 guest，并赋予这个账户角色 readonly，es-v7171\n点击保存提交，创建成功之后就可以使用 guest 账户登录 INFINI Console，并且只拥有只读权限。\n","subcategory":null,"summary":"","tags":null,"title":"如何轻松创建一个 Elasticsearch “游客” 用户","url":"/console/v1.29.3/zh/docs/tutorials/create_readonly_account/"},{"category":null,"content":"容器部署 #  探针 (INFINI Agent) 支持容器方式部署。\n下载镜像 #  探针(INFINI Agent) 的镜像发布在 Docker 的官方仓库，地址如下：\n https://hub.docker.com/r/infinilabs/agent\n使用下面的命令即可获取最新的容器镜像：\ndocker pull infinilabs/agent:1.29.3-2018 验证镜像 #  将镜像下载到本地之后，可以看到 探针 (INFINI Agent) 的容器镜像非常小，只有不到 20MB，所以下载是非常快的。\n✗ docker images |grep \u0026quot;agent\u0026quot; |grep \u0026quot;1.29.3-2018\u0026quot; REPOSITORY TAG IMAGE ID CREATED SIZE infinilabs/agent latest 1.29.3-2018 4 days ago 13.8MB 创建配置 #  现在需要创建一个配置文件 agent.yml，来进行基本的配置，如下：\napi: enabled: true network: binding: 0.0.0.0:8080 metrics: enabled: true queue: metrics network: enabled: true summary: true details: true memory: metrics: - swap - memory disk: metrics: - ioqs - usage cpu: metrics: - idle - system - user - iowait - load elasticsearch: enabled: true agent_mode: true node_stats: true index_stats: true cluster_stats: true\nelasticsearch:\n name: default enabled: true endpoint: http://192.168.3.4:9200 monitored: false discovery: enabled: true  pipeline:\n name: metrics_ingest auto_start: true keep_running: true processor:  json_indexing: index_name: \u0026quot;.infini_metrics\u0026quot; elasticsearch: \u0026quot;default\u0026quot; input_queue: \u0026quot;metrics\u0026quot; output_queue: name: \u0026quot;metrics_requests\u0026quot; label: tag: \u0026quot;metrics\u0026quot; worker_size: 1 bulk_size_in_mb: 10   name: consume-metrics_requests auto_start: true keep_running: true processor:  bulk_indexing: bulk: compress: true batch_size_in_mb: 10 batch_size_in_docs: 5000 consumer: fetch_max_messages: 100 queues: type: indexing_merge when: cluster_available: [ \u0026quot;default\u0026quot; ]    agent: major_ip_pattern: \u0026quot;192.*\u0026quot; labels: env: dev tags: - linux - x86 - es7 - v7.5\npath.data: data path.logs: log\nagent.manager.endpoint: http://192.168.3.4:9000 Note: 上面配置里面的 Elasticsearch 的相关配置，请改成实际的服务器连接地址和认证信息，需要版本 v7.3 及以上。\n启动 Agent #  使用如下命令启动 Agent 容器：\ndocker run -p 8080:8080 -v=`pwd`/agent.yml:/agent.yml infinilabs/agent:1.29.3-2018 Docker Compose #  还可以使用 docker compose 来管理容器实例，新建一个 docker-compose.yml 文件如下：\nversion: \u0026quot;3.5\u0026quot; services: infini-agent: image: infinilabs/agent:latest ports: - 8080:8080 container_name: \u0026quot;infini-agent\u0026quot; volumes: - ./agent.yml:/agent.yml\nvolumes: dist: 在配置文件所在目录，执行如下命令即可启动，如下：\n➜ docker-compose up Recreating infini-agent ... done Attaching to infini-agent infini-agent | _ ___ __ __ _____ infini-agent | /_\\ / _ \\ /__\\/\\ \\ \\/__ \\ infini-agent | //_\\\\ / /_\\//_\\ / \\/ / / /\\/ infini-agent | / _ \\/ /_\\\\//__/ /\\ / / / infini-agent | \\_/ \\_/\\____/\\__/\\_\\ \\/ \\/ infini-agent | infini-agent | [AGENT] A light-weight, powerful and high-performance elasticsearch agent. infini-agent | [AGENT] 0.1.0_SNAPSHOT#15, 2022-08-26 15:05:43, 2025-12-31 10:10:10, 164bd8a0d74cfd0ba5607352e125d72b46a1079e infini-agent | [08-31 09:11:45] [INF] [app.go:164] initializing agent. infini-agent | [08-31 09:11:45] [INF] [app.go:165] using config: /agent.yml. infini-agent | [08-31 09:11:45] [INF] [instance.go:72] workspace: /data/agent/nodes/cc7ibke5epac7314bf9g infini-agent | [08-31 09:11:45] [INF] [metrics.go:63] ip:172.18.0.2, host:bd9f43490911, labels:, tags: infini-agent | [08-31 09:11:45] [INF] [api.go:261] api listen at: http://0.0.0.0:8080 infini-agent | [08-31 09:11:45] [INF] [actions.go:367] elasticsearch [default] is available infini-agent | [08-31 09:11:45] [INF] [module.go:116] all modules are started infini-agent | [08-31 09:11:45] [INF] [manage.go:180] register agent to console infini-agent | [08-31 09:11:45] [INF] [app.go:334] agent is up and running now.   ","subcategory":null,"summary":"","tags":null,"title":"容器部署","url":"/console/v1.29.3/zh/docs/reference/agent/docker/"},{"category":null,"content":"安装探针 #  探针支持两种方式安装，一种是手动下载安装配置，还有一种是结合新版本的 Console (\u0026gt;=1.3.0)，生成一键安装脚本。 只要执行一键安装脚本即可在主机上完成探针的安装。我们推荐使用结合 Console 来安装探针，简单和方便管理。\n一键安装 #  安装前准备 #  安装并运行 INFINI Console\n复制一键安装脚本 #  在 INFINI Console 左侧菜单 资源管理\u0026gt;探针管理，进入页面之后点击 Install Agent 按钮，即可复制类似如下一键安装脚本：\ncurl -sSL http://localhost:9000/agent/install.sh?token=cjctdrms4us1c6fu04ag |sudo bash -s -- -u https://release.infinilabs.com/agent/stable -v 0.6.0-262 -t /opt/agent  -u和-v参数表示从指定的 URL 下载指定版本的 Agent，-t参数表示安装的路径，在联网的环境中，\u0026ndash; 及后面的参数都可以忽略，默认情况下将从官网下载最新的 Agent 版本进行安装。\n 将一键安装脚本粘贴到终端执行即可完成安装，安装之后该探针实例会被自动注册到 INFINI Console。具体操作步骤参考 Agent 快速安装\n下载安装 #  根据您所在的操作系统和平台选择下面相应的下载地址：\n https://release.infinilabs.com/agent/\n容器部署 #  探针(INFINI Agent) 也支持 Docker 容器方式部署。\n了解更多  配置 #  下载安装包解压之后，打开 agent.yml 配置文件，我们可以看到以下配置：\nenv: LOGGING_ES_ENDPOINT: http://localhost:9200 LOGGING_ES_USER: admin LOGGING_ES_PASS: admin API_BINDING: \u0026quot;0.0.0.0:2900\u0026quot; path.data: data path.logs: log\napi: enabled: true network: binding: $[[env.API_BINDING]]\nomitted \u0026hellip; 通常，我们只需要修改 LOGGING_ES_ENDPOINT 环境变量配置，若 Elasticsearch 开启了安全验证，则需要修改 LOGGING_ES_USER 和 LOGGING_ES_PASS 配置。\n这里的用户要求具备集群的元数据、索引的元数据以及 .infini* 索引的完全访问权限，以及索引模板的创建权限。\n启动 INFINI Agent #  直接运行程序即可启动 探针(INFINI Agent) 了(这里使用的是 Mac 版本的，不同平台的程序文件名称略有不同)，如下：\n _ ___ __ __ _____ /_\\ / _ \\ /__\\/\\ \\ \\/__ \\ //_\\\\ / /_\\//_\\ / \\/ / / /\\/ / _ \\/ /_\\\\//__/ /\\ / / / \\_/ \\_/\\____/\\__/\\_\\ \\/ \\/ [AGENT] A light-weight, powerful and high-performance elasticsearch agent. [AGENT] 0.1.0#14, 2022-08-26 14:09:29, 2025-12-31 10:10:10, 4489a8dff2b68501a0dd9ae15276cf5751d50e19 [08-31 15:52:07] [INF] [app.go:164] initializing agent. [08-31 15:52:07] [INF] [app.go:165] using config: /Users/INFINI/agent/agent-0.1.0-14-mac-arm64/agent.yml. [08-31 15:52:07] [INF] [instance.go:72] workspace: /Users/INFINI/agent/agent-0.1.0-14-mac-arm64/data/agent/nodes/cc7h5qitoaj25p2g9t20 [08-31 15:52:07] [INF] [metrics.go:63] ip:192.168.3.22, host:INFINI-MacBook.local, labels:, tags: [08-31 15:52:07] [INF] [api.go:261] api listen at: http://0.0.0.0:8080 [08-31 15:52:07] [INF] [module.go:116] all modules are started [08-31 15:52:07] [INF] [manage.go:180] register agent to console [08-31 15:52:07] [INF] [actions.go:367] elasticsearch [default] is available [08-31 15:52:07] [INF] [manage.go:203] registering, waiting for review [08-31 15:52:07] [INF] [app.go:334] agent is up and running now. 看到上面的启动信息，说明 探针 (INFINI Agent) 已经成功运行了!\n停止 INFINI Agent #  如果需要停止 探针(INFINI Agent) ，按 Ctrl+C 即可停止 探针(INFINI Agent)，如下：\n^C [AGENT] got signal: interrupt, start shutting down [08-31 15:57:13] [INF] [module.go:145] all modules are stopped [08-31 15:57:13] [INF] [app.go:257] agent now terminated. [AGENT] 0.1.0, uptime: 5m6.240314s  / // |/ // __// // |/ // / / // || // / / // || // / ////|/// ////|//_/\n©INFINI.LTD, All Rights Reserved. 配置服务后台运行 #\n 如果希望将 探针(INFINI Agent) 以后台任务的方式运行，如下：\n➜ ./agent -service install Success ➜ ./agent -service start Success 卸载服务也很简单，如下：\n➜ ./agent -service stop Success ➜ ./agent -service uninstall Success 手动配置 Agent 采集功能 #  如果希望手动配置 Elasticsearch 日志和指标采集，可以参考 agent.yml 提供的默认参考配置。如果需要添加其他 Elasticsearch 集群的采集，需要在 elasticsearch 增加相应的集群配置信息，并配置对应的 pipeline 来采集该集群的数据。\n如果你需要手动关闭某一项日志采集，把对应的采集 pipeline enabled 选项设置为 false。\n采集 Elasticsearch 指标 #  配置采集节点 stats：\n - name: collect_default_node_stats enabled: false auto_start: true keep_running: true retry_delay_in_ms: 10000 processor: - es_node_stats: elasticsearch: default 配置采集集群索引 stats：\n - name: collect_default_index_stats enabled: false auto_start: true keep_running: true retry_delay_in_ms: 10000 processor: - es_index_stats: elasticsearch: default 配置采集集群 stats：\n - name: collect_default_cluster_stats enabled: false auto_start: true keep_running: true retry_delay_in_ms: 10000 processor: - es_cluster_stats: elasticsearch: default 配置采集集群健康信息：\n - name: collect_default_cluster_health enabled: false auto_start: true keep_running: true retry_delay_in_ms: 10000 processor: - es_cluster_health: elasticsearch: default 采集 Elasticsearch 日志 #  配置采集节点日志，elasticsearch 需要配置采集节点的 endpoint：\n - name: collect_default_es_logs enabled: false auto_start: true keep_running: true retry_delay_in_ms: 3000 processor: - es_logs_processor: queue_name: \u0026quot;logs\u0026quot; elasticsearch: default 如果有多个 Elasticsearch 节点在当前主机运行，每个 Elasticsearch 需要配置的对应的集群信息和 pipeline：\nelasticsearch: # omitted ... - name: cluster-a-node-1 enabled: true endpoint: http://localhost:9202 monitored: false discovery: enabled: true omitted \u0026hellip;  name: collect_node_1_es_logs enabled: false auto_start: true keep_running: true retry_delay_in_ms: 3000 processor:  es_logs_processor: queue_name: \u0026quot;logs\u0026quot; elasticsearch: cluster-a-node-1    采集本地日志文件 #\n 如果 es_logs_processor 提供的配置选项不够灵活，或者你想采集主机上其他日志文件，也可以通过 logs_processor 来配置任意目录下的日志采集。agent.yml 默认提供了一个采集 Elasticsearch 日志的配置来作为参考，你可以修改这个配置或者增加新的配置来适配本地的日志文件，并添加对应的标签和 metadata 信息来方便过滤筛选。\n - name: log_collect enabled: false auto_start: true keep_running: true retry_delay_in_ms: 3000 processor: - logs_processor: queue_name: \u0026quot;logs\u0026quot; logs_path: \u0026quot;/opt/es/elasticsearch-7.7.1/logs\u0026quot; # metadata for all log items metadata: category: elasticsearch # patterns are matched in order patterns: - pattern: \u0026quot;.*_server.json$\u0026quot; # file name pattern to match # log type, json/text/multiline type: json # metadata for matched files metadata: name: server # (json) timestamp fields in json message, match the first one timestamp_fields: [\u0026quot;timestamp\u0026quot;, \u0026quot;@timestamp\u0026quot;] # (json) remove fields with specified key path remove_fields: [ \u0026quot;type\u0026quot;, \u0026quot;cluster.name\u0026quot;, \u0026quot;cluster.uuid\u0026quot;, \u0026quot;node.name\u0026quot;, \u0026quot;node.id\u0026quot;, \u0026quot;timestamp\u0026quot;, \u0026quot;@timestamp\u0026quot;, ] - pattern: \u0026quot;gc.log$\u0026quot; # file name pattern to match # log type, json/text/multiline type: json # metadata for matched files metadata: name: gc # (text) regex to match timestamp in the log entries timestamp_patterns: - \u0026quot;\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}T\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}.\\\\d{3}\\\\+\\\\d{4}\u0026quot; - \u0026quot;\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} \\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2},\\\\d{3}\u0026quot; - \u0026quot;\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}T\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2},\\\\d{3}\u0026quot; - pattern: \u0026quot;.*.log$\u0026quot; # file name pattern to match # log type, json/text/multiline type: multiline # (multiline) the pattern to match a new line line_pattern: '^\\[' # metadata for matched files metadata: name: server # (text) regex to match timestamp in the log entries timestamp_patterns: - \u0026quot;\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}T\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}.\\\\d{3}\\\\+\\\\d{4}\u0026quot; - \u0026quot;\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} \\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2},\\\\d{3}\u0026quot; - \u0026quot;\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}T\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2},\\\\d{3}\u0026quot; ","subcategory":null,"summary":"","tags":null,"title":"下载安装","url":"/console/v1.29.3/zh/docs/reference/agent/install/"},{"category":null,"content":"用户管理 #  简介 #  用户管理包括对用户的增删改查操作以及重置用户密码.\n创建用户 #   用户名是必填的并且需要唯一，作为登录账号名. 昵称, 手机号, 邮箱都是可选的. 给用户分配一个或者多个角色. 用户标签是可选的，可用于给用户分组.  查询用户 #  输入关键字，点击搜索按钮查询用户\n更新用户 #  按需修改，点击保存按钮保存\n重置用户密码 #  输入新密码点击保存按钮重置密码\n","subcategory":null,"summary":"","tags":null,"title":"用户管理","url":"/console/v1.29.3/zh/docs/reference/system/security/user/"},{"category":null,"content":"功能介绍 #  简介 #  INFINI Agent 是 INFINI Console 的一个可选组件，负责采集和上传 Elasticsearch, Easysearch, Opensearch 集群的日志和指标信息，通过 INFINI Console 管理。INFINI Agent 支持主流操作系统和平台，安装包轻量且无任何外部依赖，可以快速方便地安装。\nAgent 功能特性：\n 采集上传 Elasticsearch 等集群健康信息/集群 stats/索引 stats/节点 stats 信息 采集上传 Elasticsearch 等实例节点日志 采集主机指标信息  快速安装探针 #  进入菜单 资源管理 \u0026gt; 探针管理 点击按钮 Install Agent。 可以看到 Console 会自动生成一段安装脚本，然后只需要点击脚本右上方的复制 Icon， 就可以复制安装脚本了。\n将在 Console 中复制的安装脚本粘贴到目标主机上就可以实现一键快速安装了，生成的配置文件内容类似如下：\npath.configs: config configs.auto_reload: true env: API_BINDING: 0.0.0.0:8080 path.data: data path.logs: log\napi: enabled: true tls: enabled: true cert_file: config/client.crt key_file: config/client.key ca_file: config/ca.crt skip_insecure_verify: false network: binding: $[[env.API_BINDING]]\nbadger: value_log_max_entries: 1000000 value_log_file_size: 104857600 value_threshold: 1024\nagent: major_ip_pattern: .* 这里的证书在安装的时候由 console 自动生成的，安装成功之后探针实例会被自动注册到 Console， Console 后续和 agent 通过 mtls 的方式通信。安装过成中使用的 token 仅供快速安装 agent 时使用，不能 用于其他 API, token 有效期为 一个小时。\n 这里要求 Console 所在主机和安装 Agent 主机网络是互通的\n 探针实例注册 #  第一步填写探针地址，按需开启 TLS 和 身份验证（开启身份验证后需要输入用户名和密码）。\n第二步，信息确认，按需修改探针名称，标签，描述信息。\n输入完成之后，点击下一步完成注册\n 通过 INFINI Console 一键安装脚本安装 Agent 会自动注册 Console，无需手动注册\n 探针实例列表 #  在探针实例列表可以查询注册的探针实例，如下：\n表格行展开可以看到探针上所有的 Elasticsearch, Easysearch, Opensearch 节点实例进程列表，展开后点击右上角刷新按钮可以刷新进程列表信息\n节点进程关联到 Console 已注册集群 #  将探针自动发现的 Elasticsearch, Easysearch, Opensearch 节点实例进程关联到 Console 中已注册的集群，即可使用 Agent 采集集群指标以及节点日志。 采集的集群指标数据直接可以在 Console 监控功能中使用，关联具体操作流程如下。\n在节点实例进程列表中点击 关联 会出现如下界面：\n 如果该节点进程实例集群已经注册到 Console， 那么只需要在弹出窗口点击 关联 即可完成操作。关联成功之后，Agent 会自动采集集群指标以及 节点日志。 如果该节点进程需要身份验证信息，关联弹出窗口如下图所示：  这里需要输入节点地址，和身份验证信息之后尝试连接，获取节点所在集群信息\n 如果该节点所在集群还没有在 Console 中注册，关联弹出窗口如下图所示：  这里只需要按照提示，点击 go to register 去注册集群，注册集群成功之后，再进行关联操作即可。\n编辑探针信息 #  点击探针列表表格中的编辑按钮，进入更新界面\n按需修改配置，然后点击保存按钮提交\n删除探针实例 #  进入菜单 资源管理 \u0026gt; 探针管理，在列表中点击对应列的 删除，确认之后，探针即被删除。\n","subcategory":null,"summary":"","tags":null,"title":"功能介绍","url":"/console/v1.29.3/zh/docs/reference/agent/manage/manage/"},{"category":null,"content":"安装 INFINI Console #  INFINI Console 支持主流的操作系统和平台，程序包很小，没有任何额外的外部依赖，安装起来应该是很快的 :)\n安装前准备 #  准备一个可以存储数据的 Elasticsearch 集群，要求为 5.3 及以上版本，用于 INFINI Console 存储相关数据。\n 推荐使用 INFINI Easysearch 来作存储，可通过配置开启 ZSTD 来节约存储空间。安装操作如如下\n   autoplay=\u0026quot;1\u0026quot; preload=\u0026quot;1\u0026quot; start-at=\u0026quot;0\u0026quot; speed=\u0026quot;2\u0026quot; \u0026gt;\u0026lt;/asciinema-player\u0026gt;   查看完整操作代码 # 使用 root 用户操作 whoami \u0026amp;\u0026amp; cat /etc/redhat-release \u0026amp;\u0026amp; uptime # 安装 jdk yum -y install java-11 # 创建 infini 用户 groupadd -g 602 infini useradd -u 602 -g infini -m -d /home/infini -c \u0026#39;infini\u0026#39; -s /bin/bash infini # 安装 Easysearch \u0026amp; Console curl -sSL http://get.infini.cloud | bash -s -- -p easysearch curl -sSL http://get.infini.cloud | bash -s -- -p console # 配置 Easysearch jdk ln -s /usr/lib/jvm/java-11-openjdk-11.0.19.0.7-1.el7_9.x86_64 /opt/easysearch/jdk sed -i \u0026#39;s/1g/512m/g\u0026#39; /opt/easysearch/config/jvm.options # 初始化  cd /opt/easysearch \u0026amp;\u0026amp; bin/initialize.sh # 调整目录权限 chown -R infini.infini /opt/easysearch # 运行 Easysearch su infini -c \u0026#34;/opt/easysearch/bin/easysearch -d\u0026#34; # 运行 Console cd /opt/console \u0026amp;\u0026amp; ./console-linux-amd64 -service install \u0026amp;\u0026amp; ./console-linux-amd64 -service start # 检查 Easysearch curl -ku admin:44e4e00cded8d82c16cf https://localhost:9200 #在 INFINI Console 中可以使用以上凭证来进行连接   在线安装 #  自动安装\ncurl -sSL http://get.infini.cloud | bash -s -- -p console  通过以上脚本可自动下载相应平台的 console 最新版本并解压到 /opt/console\n脚本的可选参数如下：\n -v [版本号]（默认采用最新版本号） -d [安装目录]（默认安装到 /opt/console）   手动安装\n根据您所在的操作系统和平台选择相应的下载包，下载地址如下：\nhttps://release.infinilabs.com/console/\n容器部署 #  INFINI Console 也支持 Docker 容器方式部署。\n了解更多  启动 INFINI Console #  下载完成，直接运行程序即可启动 INFINI Console 了（这里使用的是 mac 版本的，不同平台的程序文件名称略有不同），如下：\n➜ ./console-mac-amd64 ___ __ ___ ___ / __\\/ / /___\\/\\ /\\ / \\ / / / / // // / \\ \\/ /\\ / / /__/ /__/ \\_//\\ \\_/ / /_// \\____|____|___/ \\___/___,\u0026#39; ___ ___ __ __ ___ __ __ / __\\/___\\/\\ \\ \\/ _\\ /___\\/ / /__\\ / / // // \\/ /\\ \\ // // / /_\\ / /__/ \\_// /\\ / _\\ \\/ \\_// /__//__ \\____|___/\\_\\ \\/ \\__/\\___/\\____|__/ [CONSOLE] INFINI Cloud Console, The easiest way to operate your own search platform. [CONSOLE] 0.3.0_SNAPSHOT, 2022-03-31 10:26:41, 2023-12-31 10:10:10, fa04f6010144b7c5267c71ccaee30230ddf2432d [03-31 20:27:40] [INF] [app.go:174] initializing console. [03-31 20:27:40] [INF] [app.go:175] using config: /console-0.3.0_SNAPSHOT-447-mac-amd64/console.yml. [03-31 20:27:40] [INF] [instance.go:72] workspace: /console-0.3.0_SNAPSHOT-447-mac-amd64/data/console/nodes/c92psf1pdamk8rdhgqpg [03-31 20:27:40] [INF] [app.go:283] console is up and running now. [03-31 20:27:40] [INF] [ui.go:197] ui listen at: http://0.0.0.0:9000 [03-31 20:27:40] [INF] [module.go:116] all modules are started 看到上面的启动信息，说明 INFINI Console 已经成功运行了，并且监听了 9000 端口。\n停止 INFINI Console #  如果需要停止 INFINI Console，按 Ctrl+C 即可停止 INFINI Console 平台，如下：\n^C [CONSOLE] got signal: interrupt, start shutting down [03-31 20:33:10] [INF] [module.go:145] all modules are stopped [03-31 20:33:10] [INF] [app.go:267] console now terminated. [CONSOLE] 0.3.0_SNAPSHOT, uptime: 5m30.307832s __ _ __ ____ __ _ __ __ / // |/ // __// // |/ // / / // || // _/ / // || // / /_//_/|_//_/ /_//_/|_//_/ ©INFINI.LTD, All Rights Reserved. 配置服务后台运行 #\n 如果希望将 INFINI Console 以后台服务任务的方式运行，如下：\n➜ ./console -service install Success ➜ ./console -service start Success 卸载服务也很简单，如下：\n➜ ./console -service stop Success ➜ ./console -service uninstall Success 初始化 #  使用浏览器打开 http://localhost:9000 访问，可以看到如下界面，可以进行初始化配置。\n继续查看  ","subcategory":null,"summary":"","tags":null,"title":"下载安装","url":"/console/v1.29.3/zh/docs/getting-started/install/"},{"category":null,"content":"审计日志 #  简介 #  审计日志主要是为了满足合规要求、保障安全防护、支持事故调查以及辅助风险管理等。审计日志能够记录系统操作行为，帮助发现异常、定位问题根源，并识别潜在风险，从而确保企业信息系统安全、稳定运行，同时满足法规监管需求。\n日志列表 #  审计日志列表中展示了操作时间、操作人、操作类型、操作的资源类型等。\n","subcategory":null,"summary":"","tags":null,"title":"审计日志","url":"/console/v1.29.3/zh/docs/reference/system/audit/"},{"category":null,"content":"集群动态 #  简介 #  当注册的集群后，在集群动态里面可以观测到集群的动态。\n","subcategory":null,"summary":"","tags":null,"title":"集群动态","url":"/console/v1.29.3/zh/docs/reference/platform/activities/"},{"category":null,"content":"模板变量 #  简介 #  自定义告警触发事件内容时，除了自己撰写的固定文案外，事件标题、事件内容等也支持模板语法。可以使用事件中的字段实现文案的渲染。\n模板变量 #  用于渲染字段的语法为 {{ .字段名 }}，可用于模板内容渲染的变量字段如下：\n   变量字段名 字段类型 说明 示例     rule_id string rule uuid c9f663tath2e5a0vksjg   rule_name string rule name High CPU usage   resource_id string resource uuid c9f663tath2e5a0vksjg   resource_name string resource name es-v716   event_id string identifier for check details c9f663tath2e5a0vksjx   timestamp number Millisecond timestamp 1654595042399   trigger_at number Millisecond timestamp 1654595042399   duration string Alarm duration \u0026ldquo;2m10s\u0026rdquo;   objects string array resource index name [\u0026quot;.infini_metrics*\u0026quot;]   first_group_value string The first value of group_values in results c9aikmhpdamkiurn1vq0   first_threshold string The first value of threshold in results 90   priority string The highest priority in results critical   title string event title Node ({{.first_group_value}}) disk used \u0026gt;= 90%   message string event content EventID：{{.event_id}}; Cluster：{{.resource_name}}   results array result of groups    results[0].threshold array  [\u0026ldquo;90\u0026rdquo;]   results[0].priority string  high   results[0].group_values array  [\u0026ldquo;cluster-xxx\u0026rdquo;, \u0026ldquo;node-xxx\u0026rdquo;]   results[0].issue_timestamp number Millisecond timestamp 1654595042399   results[0].result_value float  91.2   results[0].relation_values map  {a:100, b:91.2}    变量使用示例 #  示例 1:\n{\u0026quot;content\u0026quot;:\u0026quot;【Alerting】Event ID: {{.event_id}}, Cluster：{{.resource_name}}\u0026quot;} 示例 2(数组遍历):\n{{range .results}} Cluster ID: {{index .group_values 0}} {{end}} 模版中使用环境变量 #  告警模版中可以解析系统环境变量和配置文件中配置的环境变量，系统环境变量优先级高于配置文件环境变量，访问方式为：\n{{$.env.VARIABLE}}  INFINI Console 版本 1.2.0 及以上支持\n 系统环境变量 #  假如存在系统环境变量 WECHAT_WEBHOOK_ENDPOINT=https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxxxxx, 那么在告警模版中使用 {{$.env.WECHAT_WEBHOOK_ENDPOINT}} 就可以引用环境变量 WECHAT_WEBHOOK_ENDPOINT 了\n配置文件中定义环境变量 #  假如 INFINI Console 配置文件 console.yml 中存在如下配置段：\nenv: INFINI_CONSOLE_ENDPOINT: \u0026quot;https://play.infinilabs.com:64443\u0026quot; WECHAT_WEBHOOK_ENDPOINT: \u0026quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxxxyy\u0026quot; 那么在告警模版中使用 {{$.env.INFINI_CONSOLE_ENDPOINT}} 就可以访问到配置文件中的环境变量 INFINI_CONSOLE_ENDPOINT 了\n 告警模版在 range 块中，这时候如果省略 $，用 {{.env.INFINI_CONSOLE_ENDPOINT}} 这种写法是没法正确解析的，需要使用 {{$.env.INFINI_CONSOLE_ENDPOINT}} 来访问根部变量 env\n 模板函数 #  除了直接展示告警事件中的字段值外，还支持使用模板函数对字段值进行进一步处理，优化输出。\n函数支持额外参数，当无需或不传递参数时，可以直接使用以下语法进行使用：\n{{ \u0026lt;模板变量\u0026gt; | \u0026lt;模板函数\u0026gt; }}\n具体实例如下：\n模板函数不带参数：\n告警事件触发时间：{{ .timestamp | datetime }} 模板函数带参数：\n告警事件触发时间：{{ .timestamp | datetime_in_zone \u0026quot;Asia/Shanghai\u0026quot; }} 多个函数组合使用：\n字节类型的数值格式化后再转位大写：{{.result_value | format_bytes 2 ｜ to_upper}} 完整的模板函数列表如下：\n   模板函数 参数 说明      to_fixed 固定小数位数 float 类型数值保留 N 位小数位\n示例：{{.result_value | to_fixed 2}}\n输出：10.35    format_bytes 固定小数位数 字节类型数值格式化\n示例：{{.result_value | format_bytes 2}}\n输出：10.35gb    date  时间戳转为 UTC 日期\n示例：{{.timestamp | date}}\n输出：2022-05-01    date_in_zone 时区 时间戳转为当前区域日期\n示例：{{.timestamp | date_in_zone \u0026quot;Asia/Shanghai\u0026quot;}}\n输出：2022-05-01    datetime  时间戳转为 UTC 时间\n示例：{{.timestamp | datetime}}\n输出：2022-05-01 10:10:10    datetime_in_zone 时区 时间戳转为当前区域时间\n示例：{{.timestamp | datetime_in_zone \u0026quot;Asia/Shanghai\u0026quot;}}\n输出：2022-05-01 10:10:10    to_lower  英文字符转为小写\n示例：{{.resource_name | to_lower }}\n输出：cluster    to_upper  英文字符转为大写\n示例：{{.resource_name | to_upper }}\n输出：CLUSTER    add 数值类型 数值相加\n示例：{{.result_value | add 1 }}\n输出：2    sub 数值类型 数值相减\n示例：{{sub .result_value 1 }}\n输出：0    mul 数值类型 数值相乘\n示例：{{mul .result_value 3 2 }}\n输出：6    div 数值类型 数值相除\n示例：{{div .result_value 2 }}\n输出：0.5    lookup 字符串类型 通过标识字段获取相关数据其他字段信息\n示例(根据集群 ID 获取集群名称)：{{lookup \u0026quot;category=metadata, object=cluster, property=name, default=N/A\u0026quot; \u0026quot;cg84bttath2dl9gaf50g\u0026quot;}}\n输出：es710    str_replace 字符串类型 字符串替换\n示例：{{ \u0026quot;hello world\u0026quot; | str_replace \u0026quot;world\u0026quot; \u0026quot;world!\u0026quot;}}\n输出：hello world!    md_to_html 字符串类型 markdown 转 html 格式\n示例：{{ \u0026quot;**hello world**\u0026quot; | md_to_html }}\n输出：\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;hello world\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt;      目前 lookup 函数第一个查找目录参数设置里面 category 仅支持 metadata 固定写法;object 可选值为 cluster|node|index，这三个指分别对应从 系统索引 .infini_cluster|.infini_node|.infini_index 中查找数据； property 指定获取哪个字段；default 找不到对应字段或者出错时的返回值; eg: 索引 .infini_node 中有如下一条数据\n{ \u0026quot;metadata\u0026quot;: { \u0026quot;cluster_name\u0026quot;: \u0026quot;easysearch-7201\u0026quot;, \u0026quot;cluster_id\u0026quot;: \u0026quot;cgn4f7t3q95k3acgcam0\u0026quot;, \u0026quot;host\u0026quot;: \u0026quot;10.0.0.3\u0026quot;, \u0026quot;node_name\u0026quot;: \u0026quot;node_1\u0026quot;, \u0026quot;category\u0026quot;: \u0026quot;elasticsearch\u0026quot;, \u0026quot;node_id\u0026quot;: \u0026quot;tM87zZ-3TxCCPtJeOY1hSg\u0026quot;, \u0026quot;labels\u0026quot;: { \u0026quot;ip\u0026quot;: \u0026quot;10.0.0.3\u0026quot;, \u0026quot;roles\u0026quot;: [ \u0026quot;data\u0026quot;, \u0026quot;ingest\u0026quot;, \u0026quot;master\u0026quot;, \u0026quot;remote_cluster_client\u0026quot; ], \u0026quot;transport_address\u0026quot;: \u0026quot;10.0.0.3:17201\u0026quot;, \u0026quot;version\u0026quot;: \u0026quot;1.0.0\u0026quot;, \u0026quot;status\u0026quot;: \u0026quot;unavailable\u0026quot; } }, \u0026quot;payload\u0026quot;: {...} }\n则可以使用节点 ID tM87zZ-3TxCCPtJeOY1hSg 来查询节点名称，查询方法如下：\n{{lookup \u0026quot;category=metadata, object=node, property=metadata.node_name, default=N/A\u0026quot; \u0026quot;tM87zZ-3TxCCPtJeOY1hSg\u0026quot;}}\n 常用模板语法 #  array 数组遍历：\n{{range .results}} priority: {{.priority}} {{end}} 通过数组下标取值：\n示例:group_values = [\u0026quot;value1\u0026quot;,\u0026quot;value2\u0026quot;,\u0026quot;value3\u0026quot;]\n{{index .group_values 0}} #输出值为：value1 {{index .group_values 2}} 输出值为：value3 if 条件分支：\n{{if pipeline}} T1 {{else}} T0 {{end}} 示例:\n{{if eq .priority \u0026quot;critical\u0026quot;}} \u0026quot;#C91010\u0026quot; {{else if eq .priority \u0026quot;high\u0026quot;}} \u0026quot;#EB4C21\u0026quot; {{else}} \u0026quot;#FFB449\u0026quot; {{end}} 完整的比较运算符用法：\neq Returns the boolean truth of arg1 == arg2 ne Returns the boolean truth of arg1 != arg2 lt Returns the boolean truth of arg1 \u0026lt; arg2 le Returns the boolean truth of arg1 \u0026lt;= arg2 gt Returns the boolean truth of arg1 \u0026gt; arg2 ge Returns the boolean truth of arg1 \u0026gt;= arg2 Slack message 模板完整示例 { \u0026quot;blocks\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;section\u0026quot;, \u0026quot;text\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;【test201】Alerting:\\n\u0026lt;http://localhost:8000/#/alerting/alert/{{.event_id}}|{{.title}}\u0026gt; \u0026lt;@username\u0026gt;\u0026quot; } }, { \u0026quot;type\u0026quot;: \u0026quot;section\u0026quot;, \u0026quot;text\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;*Timestamp:* {{.issue_timestamp | datetime}}\u0026quot; } } ], \u0026quot;attachments\u0026quot;: [ {{range .results}} { \u0026quot;color\u0026quot;: {{if eq .priority \u0026quot;critical\u0026quot;}} \u0026quot;#C91010\u0026quot; {{else if eq .priority \u0026quot;high\u0026quot;}} \u0026quot;#EB4C21\u0026quot; {{else}} \u0026quot;#FFB449\u0026quot; {{end}}, \u0026quot;blocks\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;section\u0026quot;, \u0026quot;fields\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;*Cluster:* {{index .group_values 0}}\u0026quot; }, { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;*Node:* {{index .group_values 1}}\u0026quot; }, { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;*Threshold:* {{index .threshold 0}}\u0026quot; }, { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;*Priority:* {{.priority}}\u0026quot; }, { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;*Monitoring value:* {{.result_value}}\u0026quot; }, { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;*Disk usage:* {{.relation_values.a | format_bytes 2 | to_upper}}\u0026quot; } ] } ] }, {{end}} ] }    更多模板语法 点击查看\n","subcategory":null,"summary":"","tags":null,"title":"模板变量","url":"/console/v1.29.3/zh/docs/reference/alerting/variables/"},{"category":null,"content":"数据视图 #  视图列表 #  创建和管理数据视图可以帮助您更好地从 Elasticsearch 获取数据。\n创建视图 #  步骤 1 定义数据视图 #   输入数据视图名称 匹配规则：匹配相应索引，也可以使用 (*) 来匹配多个索引。  步骤 2 配置 #    为数据视图索引选择时间字段作为时间过滤\n  创建完成\n  编辑数据视图 #  页面列出匹配索引的所有字段，可以对字段的 Format、Popularity 等做相关设置。\n","subcategory":null,"summary":"","tags":null,"title":"数据视图","url":"/console/v1.29.3/zh/docs/reference/data/view/"},{"category":null,"content":".infini_metrics 监控指标字段说明 #  agent #     字段名 说明     agent.hostname 主机名称   agent.id 实例 ID   agent.ips 主机 IP 列表   agent.major_ip 主 IP（配置文件 metrics.major_ip_pattern 指定）    metadata #     字段名 说明     metadata.category 指标分类   metadata.datatype 指标数据类型   metadata.name 指标名称   metadata.version 指标所属实例的版本号   metadata.labels.cluster_id 集群 ID   metadata.labels.cluster_uuid 集群 UUID（ES 生成）   metadata.labels.index_id 索引 ID   metadata.labels.index_name 索引名称   metadata.labels.index_uuid 索引 UUID（ES 生成）   metadata.labels.ip IP   metadata.labels.id 实例 ID   metadata.labels.name 实例名   metadata.labels.node_id 节点 ID   metadata.labels.node_name 节点名称   metadata.labels.transport_address ES 节点 TCP 监听地址    payload.elasticsearch.cluster_health #     字段名 说明     payload.elasticsearch.cluster_health.active_primary_shards ES 集群可用的主分片数量   payload.elasticsearch.cluster_health.active_shards ES 集群可用的总分片数量   payload.elasticsearch.cluster_health.active_shards_percent_as_number ES 集群可用的总分片数量所占百分比   payload.elasticsearch.cluster_health.cluster_name ES 集群名称   payload.elasticsearch.cluster_health.delayed_unassigned_shards ES 集群延迟未分配的分片数量   payload.elasticsearch.cluster_health.initializing_shards ES 集群正在初始化的分片数量   payload.elasticsearch.cluster_health.number_of_data_nodes ES 集群数据节点数   payload.elasticsearch.cluster_health.number_of_in_flight_fetch ES 集群未完成读取的数量   payload.elasticsearch.cluster_health.number_of_nodes ES 集群总节点数   payload.elasticsearch.cluster_health.number_of_pending_tasks ES 集群等待执行任务数量   payload.elasticsearch.cluster_health.relocating_shards ES 集群正在迁移的分片数量   payload.elasticsearch.cluster_health.status ES 集群状态   payload.elasticsearch.cluster_health.task_max_waiting_in_queue_millis ES 集群任务在队列中等待的最大时间(毫秒)   payload.elasticsearch.cluster_health.timed_out ES 集群是否超时   payload.elasticsearch.cluster_health.unassigned_shards ES 集群未分配的分片数量    payload.elasticsearch.cluster_stats #     字段名 说明     payload.elasticsearch.cluster_stats.cluster_name ES 集群名称   payload.elasticsearch.cluster_stats.cluster_uuid ES 集群 UUID（唯一标识）   payload.elasticsearch.cluster_stats.indices.analysis.analyzer_types.count ES 集群索引中使用的该分析器的次数   payload.elasticsearch.cluster_stats.indices.analysis.analyzer_types.index_count ES 集群中使用该分析器的索引数   payload.elasticsearch.cluster_stats.indices.analysis.analyzer_types.name ES 集群索引中使用的分析器类型   payload.elasticsearch.cluster_stats.indices.analysis.built_in_filters.count ES 集群索引中使用的该分析器的次数   payload.elasticsearch.cluster_stats.indices.analysis.built_in_filters.index_count ES 集群中使用该分析器的索引数   payload.elasticsearch.cluster_stats.indices.analysis.built_in_filters.name ES 集群索引中使用的分析器类型   payload.elasticsearch.cluster_stats.indices.analysis.built_in_tokenizers.count ES 集群索引中使用的该内置标记器的次数   payload.elasticsearch.cluster_stats.indices.analysis.built_in_tokenizers.index_count ES 集群中使用该内置标记器的索引数   payload.elasticsearch.cluster_stats.indices.analysis.built_in_tokenizers.name ES 集群索引中使用的内置标记器类型   payload.elasticsearch.cluster_stats.indices.completion.size_in_bytes ES 集群索引 complete 缓存使用大小   payload.elasticsearch.cluster_stats.indices.count ES 集群索引总数   payload.elasticsearch.cluster_stats.indices.docs.count ES 集群索引主分片文档数   payload.elasticsearch.cluster_stats.indices.docs.deleted ES 集群索引主分片删除的文档数   payload.elasticsearch.cluster_stats.indices.field_types.count ES 集群中使用该数据类型的数量   payload.elasticsearch.cluster_stats.indices.field_types.index_count ES 集群中使用该数据类型的索引数量   payload.elasticsearch.cluster_stats.indices.field_types.name ES 集群索引字段数据类型   payload.elasticsearch.cluster_stats.indices.fielddata.evictions ES 集群索引字段数据缓存中清除的数量（当超过堆内存阈值为了安全保护时会被驱逐，查询抛出 Data too large 异常）   payload.elasticsearch.cluster_stats.indices.fielddata.memory_size_in_bytes ES 集群索引字段数据缓存总大小   payload.elasticsearch.cluster_stats.indices.query_cache.cache_count ES 集群查询缓存中总的条目数包含被驱逐的（cache_size 与 evictions 之和）   payload.elasticsearch.cluster_stats.indices.query_cache.cache_size ES 集群索引查询缓存中当前总的条目总数   payload.elasticsearch.cluster_stats.indices.query_cache.evictions ES 集群索引查询缓存清除的总数   payload.elasticsearch.cluster_stats.indices.query_cache.hit_count ES 集群索引查询缓存命中的数量   payload.elasticsearch.cluster_stats.indices.query_cache.memory_size_in_bytes ES 集群索引查询缓存总大小   payload.elasticsearch.cluster_stats.indices.query_cache.miss_count ES 集群索引查询缓存未命中的数量   payload.elasticsearch.cluster_stats.indices.query_cache.total_count ES 集群索引查询缓存的总数量   payload.elasticsearch.cluster_stats.indices.segments.count ES 集群索引 segments 总数   payload.elasticsearch.cluster_stats.indices.segments.doc_values_memory_in_bytes ES 集群索引 doc values 占用缓存大小   payload.elasticsearch.cluster_stats.indices.segments.file_sizes ES 集群有关索引文件大小的统计信息   payload.elasticsearch.cluster_stats.indices.segments.fixed_bit_set_memory_in_bytes ES 集群索引 BitSet（带标状态的数组）占用缓存的大小   payload.elasticsearch.cluster_stats.indices.segments.index_writer_memory_in_bytes ES 集群索引 index writer 占用缓存大小   payload.elasticsearch.cluster_stats.indices.segments.max_unsafe_auto_id_timestamp ES 集群最近重试的索引请求的 unix 时间戳（毫秒）   payload.elasticsearch.cluster_stats.indices.segments.memory_in_bytes ES 集群索引 segments 使用的缓存总和   payload.elasticsearch.cluster_stats.indices.segments.norms_memory_in_bytes ES 集群索引 norms（标准信息）使用的缓存大小   payload.elasticsearch.cluster_stats.indices.segments.points_memory_in_bytes ES 集群索引 points 使用的缓存大小   payload.elasticsearch.cluster_stats.indices.segments.stored_fields_memory_in_bytes ES 集群索引 fields 使用缓存大小   payload.elasticsearch.cluster_stats.indices.segments.term_vectors_memory_in_bytes ES 集群索引 Term Vectors（词条向量）使用缓存大小   payload.elasticsearch.cluster_stats.indices.segments.terms_memory_in_bytes ES 集群索引 terms query 使用的缓存大小   payload.elasticsearch.cluster_stats.indices.segments.version_map_memory_in_bytes ES 集群索引 version maps（描述 document、fields 包含的内容）占用的缓存大小   payload.elasticsearch.cluster_stats.indices.shards.index.primaries.avg ES 集群索引的平均主分片数   payload.elasticsearch.cluster_stats.indices.shards.index.primaries.max ES 集群索引允许的最大主分片数   payload.elasticsearch.cluster_stats.indices.shards.index.primaries.min ES 集群索引允许的最小主分片数   payload.elasticsearch.cluster_stats.indices.shards.index.replication.avg ES 集群索引的平均副本数   payload.elasticsearch.cluster_stats.indices.shards.index.replication.max ES 集群索引允许的最大副本数   payload.elasticsearch.cluster_stats.indices.shards.index.replication.min ES 集群索引允许的最小副本数   payload.elasticsearch.cluster_stats.indices.shards.index.shards.avg ES 集群索引的平均分片数   payload.elasticsearch.cluster_stats.indices.shards.index.shards.max ES 集群索引允许的最大分片数   payload.elasticsearch.cluster_stats.indices.shards.index.shards.min ES 集群索引允许的最小分片数   payload.elasticsearch.cluster_stats.indices.shards.primaries ES 集群索引主分片总数   payload.elasticsearch.cluster_stats.indices.shards.replication ES 集群副本分片数/主分片数   payload.elasticsearch.cluster_stats.indices.shards.total ES 集群索引分片总数   payload.elasticsearch.cluster_stats.indices.store.reserved_in_bytes ES 集群预测进行对等恢复、快照恢复和类似活动，分片存储最终会增长多少   payload.elasticsearch.cluster_stats.indices.store.size_in_bytes ES 集群索引占用总大小   payload.elasticsearch.cluster_stats.nodes.count.coordinating_only ES 集群协作节点（coordinating）数量   payload.elasticsearch.cluster_stats.nodes.count.data ES 集群 data 节点数量   payload.elasticsearch.cluster_stats.nodes.count.data_cold ES 集群 data 冷节点数量   payload.elasticsearch.cluster_stats.nodes.count.data_content ES 集群 data_content 节点数量   payload.elasticsearch.cluster_stats.nodes.count.data_hot ES 集群 data 热节点数量   payload.elasticsearch.cluster_stats.nodes.count.data_warm ES 集群 data_warm 节点数量   payload.elasticsearch.cluster_stats.nodes.count.ingest ES 集群 ingest 节点数量   payload.elasticsearch.cluster_stats.nodes.count.master ES 集群 master 节点数量   payload.elasticsearch.cluster_stats.nodes.count.ml ES 集群 ml 节点数量   payload.elasticsearch.cluster_stats.nodes.count.remote_cluster_client ES 集群 remote_cluster_client 节点数量   payload.elasticsearch.cluster_stats.nodes.count.total ES 集群总的节点数量   payload.elasticsearch.cluster_stats.nodes.count.transform ES 集群 transform 节点数量   payload.elasticsearch.cluster_stats.nodes.count.voting_only ES 集群 data_warm 节点数量   payload.elasticsearch.cluster_stats.nodes.discovery_types.某种发现类型 ES 集群使用某种发现类型查找其他节点的节点数   payload.elasticsearch.cluster_stats.nodes.fs.available_in_bytes ES 集群节点可以的磁盘空间量   payload.elasticsearch.cluster_stats.nodes.fs.free_in_bytes ES 集群节点未分配的磁盘空间量   payload.elasticsearch.cluster_stats.nodes.fs.total_in_bytes ES 集群节点占用的磁盘空间量   payload.elasticsearch.cluster_stats.nodes.ingest.number_of_pipelines ES 集群节点 ingest 管道数量   payload.elasticsearch.cluster_stats.nodes.ingest.processor_stats.gsub.count ES 集群节点 ingest 管道进程 gsub 总数   payload.elasticsearch.cluster_stats.nodes.ingest.processor_stats.gsub.current ES 集群节点 ingest 管道进程 gsub 正在运行的数量   payload.elasticsearch.cluster_stats.nodes.ingest.processor_stats.gsub.failed ES 集群节点 ingest 管道进程 gsub 失败的数量   payload.elasticsearch.cluster_stats.nodes.ingest.processor_stats.gsub.time_in_millis ES 集群节点 ingest 管道进程 gsub 花费的时间（毫秒）   payload.elasticsearch.cluster_stats.nodes.ingest.processor_stats.script.count ES 集群节点 ingest 管道进程 script 总数   payload.elasticsearch.cluster_stats.nodes.ingest.processor_stats.script.current ES 集群节点 ingest 管道进程 script 正在运行的数量   payload.elasticsearch.cluster_stats.nodes.ingest.processor_stats.script.failed ES 集群节点 ingest 管道进程 script 失败的数量   payload.elasticsearch.cluster_stats.nodes.ingest.processor_stats.script.time_in_millis ES 集群节点 ingest 管道进程 script 花费的时间（毫秒）   payload.elasticsearch.cluster_stats.nodes.jvm.max_uptime_in_millis ES 集群节点 jvm 运行时间   payload.elasticsearch.cluster_stats.nodes.jvm.mem.heap_max_in_bytes ES 集群节点最大堆内存数   payload.elasticsearch.cluster_stats.nodes.jvm.mem.heap_used_in_bytes ES 集群节点已使用的堆内存数   payload.elasticsearch.cluster_stats.nodes.jvm.threads ES 集群节点 jvm 进程数   payload.elasticsearch.cluster_stats.nodes.jvm.versions.count ES 集群节点使用该 jvm 的数量   payload.elasticsearch.cluster_stats.nodes.jvm.versions.version ES 集群节点 jvm 版本号   payload.elasticsearch.cluster_stats.nodes.jvm.versions.vm_name ES 集群节点 jvm 名称   payload.elasticsearch.cluster_stats.nodes.jvm.versions.vm_vendor ES 集群节点 jvm 供应商   payload.elasticsearch.cluster_stats.nodes.jvm.versions.vm_version ES 集群节点 jvm 完整版本号   payload.elasticsearch.cluster_stats.nodes.network_types.http_types.security4 ES 集群节点使用 security4 HTTP 类型的数量   payload.elasticsearch.cluster_stats.nodes.network_types.transport_types.security4 ES 集群节点使用 security4 传输类型的数量   payload.elasticsearch.cluster_stats.nodes.os.allocated_processors ES 集群节点已分配的处理器核数   payload.elasticsearch.cluster_stats.nodes.os.available_processors ES 集群节点可用的处理器核数   payload.elasticsearch.cluster_stats.nodes.os.mem.free_in_bytes ES 集群节点空闲的物理内存   payload.elasticsearch.cluster_stats.nodes.os.mem.free_percent ES 集群节点空闲内存百分比   payload.elasticsearch.cluster_stats.nodes.os.mem.total_in_bytes ES 集群节点总的物理内存   payload.elasticsearch.cluster_stats.nodes.os.mem.used_in_bytes ES 集群节点已使用的物理内存   payload.elasticsearch.cluster_stats.nodes.os.mem.used_percent ES 集群节点已用内存百分比   payload.elasticsearch.cluster_stats.nodes.os.names.count ES 集群节点中该操作系统类型的数量   payload.elasticsearch.cluster_stats.nodes.os.names.name ES 集群节点操作系统类型   payload.elasticsearch.cluster_stats.nodes.os.pretty_names.count ES 集群节点中该操作系统名称的数量   payload.elasticsearch.cluster_stats.nodes.os.pretty_names.pretty_name ES 集群节点操作系统名称   payload.elasticsearch.cluster_stats.nodes.plugins.classname 用作插件入口点的类名   payload.elasticsearch.cluster_stats.nodes.plugins.description 插件的描述   payload.elasticsearch.cluster_stats.nodes.plugins.elasticsearch_version 构建插件的 ES 版本   payload.elasticsearch.cluster_stats.nodes.plugins.java_version 构建插件的 java 版本   payload.elasticsearch.cluster_stats.nodes.plugins.name ES 集群节点使用的插件名称   payload.elasticsearch.cluster_stats.nodes.plugins.version 构建插件的 ES 版本   payload.elasticsearch.cluster_stats.nodes.process.cpu.percent ES 集群节点 cpu 使用的百分比   payload.elasticsearch.cluster_stats.nodes.process.open_file_descriptors.avg ES 集群节点打开文件描述符平均数   payload.elasticsearch.cluster_stats.nodes.process.open_file_descriptors.max ES 集群节点打开文件描述符最大值   payload.elasticsearch.cluster_stats.nodes.process.open_file_descriptors.min ES 集群节点打开文件描述符最小值   payload.elasticsearch.cluster_stats.nodes.versions ES 集群节点使用的 elasticsearch 版本   payload.elasticsearch.cluster_stats.status ES 集群健康状态   payload.elasticsearch.cluster_stats.timestamp ES 集群指标刷新的最新时间戳    payload.elasticsearch.index* #     字段名 说明     payload.elasticsearch.index_routing_table 索引路由信息表   payload.elasticsearch.index_stats.index_info 索引信息列表   payload.elasticsearch.index_stats.shard_info 索引分片信息列表   payload.elasticsearch.index_stats.primaries.completion.size_in_bytes 索引主分片 completion 缓存大小（字节）   payload.elasticsearch.index_stats.primaries.docs.count 索引主分片的文档数   payload.elasticsearch.index_stats.primaries.docs.deleted 索引主分片的删除文档数   payload.elasticsearch.index_stats.primaries.fielddata.evictions 索引主分片字段数据缓存中清除的数量   payload.elasticsearch.index_stats.primaries.fielddata.memory_size_in_bytes 索引主分片字段数据缓存大小（字节）   payload.elasticsearch.index_stats.primaries.flush.periodic 索引主分片 flush 操作定时执行的次数   payload.elasticsearch.index_stats.primaries.flush.total 索引主分片 flush 操作的总数   payload.elasticsearch.index_stats.primaries.flush.total_time_in_millis 索引主分片 flush 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.primaries.get.current 索引主分片当前正在进行 get 操作的次数   payload.elasticsearch.index_stats.primaries.get.exists_time_in_millis 索引主分片 get 操作成功的总耗时（毫秒）   payload.elasticsearch.index_stats.primaries.get.exists_total 索引主分片 get 操作成功的总次数   payload.elasticsearch.index_stats.primaries.get.missing_time_in_millis 索引主分片 get 操作失败的总耗时（毫秒）   payload.elasticsearch.index_stats.primaries.get.missing_total 索引主分片 get 操作失败的总次数   payload.elasticsearch.index_stats.primaries.get.time_in_millis 索引主分片 get 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.primaries.get.total 索引主分片 get 操作的总次数   payload.elasticsearch.index_stats.primaries.indexing.delete_current 索引主分片当前正在进行删除操作的次数   payload.elasticsearch.index_stats.primaries.indexing.delete_time_in_millis 索引主分片删除操作的总耗时（毫秒）   payload.elasticsearch.index_stats.primaries.indexing.delete_total 索引主分片删除操作的总次数   payload.elasticsearch.index_stats.primaries.indexing.index_current 索引主分片当前正在进行操作的次数   payload.elasticsearch.index_stats.primaries.indexing.index_failed 索引主分片操作失败的次数   payload.elasticsearch.index_stats.primaries.indexing.index_time_in_millis 索引主分片操作消耗的时间（毫秒）   payload.elasticsearch.index_stats.primaries.indexing.index_total 索引主分片操作的总次数   payload.elasticsearch.index_stats.primaries.indexing.is_throttled 索引主分片操作是否被限流   payload.elasticsearch.index_stats.primaries.indexing.noop_update_total 索引主分片空更新的次数   payload.elasticsearch.index_stats.primaries.indexing.throttle_time_in_millis 索引主分片限流操作所花费的时间（毫秒）   payload.elasticsearch.index_stats.primaries.merges.current 索引主分片正在进行 merge 操作的数量   payload.elasticsearch.index_stats.primaries.merges.current_docs 索引主分片正在进行 merge 操作的文档数   payload.elasticsearch.index_stats.primaries.merges.current_size_in_bytes 索引主分片正在进行 merge 操作所占用的内存大小（字节）   payload.elasticsearch.index_stats.primaries.merges.total 索引主分片 merge 操作的总数   payload.elasticsearch.index_stats.primaries.merges.total_auto_throttle_in_bytes 索引主分片自动触发限流操作的阈值（字节）   payload.elasticsearch.index_stats.primaries.merges.total_docs 索引主分片 merge 操作的文档总数   payload.elasticsearch.index_stats.primaries.merges.total_size_in_bytes 索引主分片 merge 操作的总大小   payload.elasticsearch.index_stats.primaries.merges.total_stopped_time_in_millis 索引主分片 merge 操作停止的总耗时（毫秒）   payload.elasticsearch.index_stats.primaries.merges.total_throttled_time_in_millis 索引主分片 merge 操作限流的总耗时（毫秒）   payload.elasticsearch.index_stats.primaries.merges.total_time_in_millis 索引主分片 merge 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.primaries.query_cache.cache_count 索引主分片当前查询缓存中的文档数量   payload.elasticsearch.index_stats.primaries.query_cache.cache_size 索引主分片当前查询缓存中的文档大小   payload.elasticsearch.index_stats.primaries.query_cache.evictions 索引主分片查询缓存中清除的数量   payload.elasticsearch.index_stats.primaries.query_cache.hit_count 索引主分片查询缓存命中的次数   payload.elasticsearch.index_stats.primaries.query_cache.memory_size_in_bytes 索引主分片查询缓存占用的内存大小（字节）   payload.elasticsearch.index_stats.primaries.query_cache.miss_count 索引主分片查询缓存未命中的次数   payload.elasticsearch.index_stats.primaries.query_cache.total_count 索引主分片查询缓存的总次数   payload.elasticsearch.index_stats.primaries.recovery.current_as_source 索引主分片当前作为恢复源的数量   payload.elasticsearch.index_stats.primaries.recovery.current_as_target 索引主分片当前作为恢复目标的数量   payload.elasticsearch.index_stats.primaries.recovery.throttle_time_in_millis 索引主分片恢复操作的延迟时长   payload.elasticsearch.index_stats.primaries.refresh.external_total 索引主分片外部 refresh 操作的总数   payload.elasticsearch.index_stats.primaries.refresh.external_total_time_in_millis 索引主分片外部 refresh 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.primaries.refresh.listeners 索引主分片 refresh listeners 的数量   payload.elasticsearch.index_stats.primaries.refresh.total 索引主分片 refresh 操作的总数   payload.elasticsearch.index_stats.primaries.refresh.total_time_in_millis 索引主分片 refresh 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.primaries.request_cache.evictions 索引主分片请求缓存中清除的数量   payload.elasticsearch.index_stats.primaries.request_cache.hit_count 索引主分片请求缓存的命中数量   payload.elasticsearch.index_stats.primaries.request_cache.memory_size_in_bytes 索引主分片请求缓存占用的内存大小（字节）   payload.elasticsearch.index_stats.primaries.request_cache.miss_count 索引主分片请求缓存的未命中数量   payload.elasticsearch.index_stats.primaries.search.fetch_current 索引主分片当前正在进行 fetch 操作的总数量   payload.elasticsearch.index_stats.primaries.search.fetch_time_in_millis 索引主分片 fetch 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.primaries.search.fetch_total 索引主分片 fetch 操作的总数量   payload.elasticsearch.index_stats.primaries.search.open_contexts 索引主分片打开查询上下文的总数量   payload.elasticsearch.index_stats.primaries.search.query_current 索引主分片当前正在进行 query 操作的总数量   payload.elasticsearch.index_stats.primaries.search.query_time_in_millis 索引主分片 query 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.primaries.search.query_total 索引主分片 query 操作的总数量   payload.elasticsearch.index_stats.primaries.search.scroll_current 索引主分片当前正在进行 scroll 操作的总数量   payload.elasticsearch.index_stats.primaries.search.scroll_time_in_millis 索引主分片 scroll 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.primaries.search.scroll_total 索引主分片 scroll 操作的总数量   payload.elasticsearch.index_stats.primaries.search.suggest_current 索引主分片当前正在进行 suggest 操作的总数量   payload.elasticsearch.index_stats.primaries.search.suggest_time_in_millis 索引主分片 suggest 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.primaries.search.suggest_total 索引主分片 suggest 操作的总数量   payload.elasticsearch.index_stats.primaries.segments.count 索引主分片 segments 的数量   payload.elasticsearch.index_stats.primaries.segments.doc_values_memory_in_bytes 索引主分片 doc values 占用的内存大小（字节）   payload.elasticsearch.index_stats.primaries.segments.file_sizes 有关索引主分片文件大小的统计信息   payload.elasticsearch.index_stats.primaries.segments.fixed_bit_set_memory_in_bytes 索引主分片 BitSet 占用的内存大小（字节）   payload.elasticsearch.index_stats.primaries.segments.index_writer_memory_in_bytes 索引主分片 index writer 占用的内存大小（字节）   payload.elasticsearch.index_stats.primaries.segments.max_unsafe_auto_id_timestamp 索引主分片自动生成 ID 的最新时间戳   payload.elasticsearch.index_stats.primaries.segments.memory_in_bytes 索引主分片 segments 占用的内存大小（字节）   payload.elasticsearch.index_stats.primaries.segments.norms_memory_in_bytes 索引主分片 norms 占用的内存大小（字节）   payload.elasticsearch.index_stats.primaries.segments.points_memory_in_bytes 索引主分片 points 占用的内存大小（字节）   payload.elasticsearch.index_stats.primaries.segments.stored_fields_memory_in_bytes 索引主分片存储字段占用的内存大小（字节）   payload.elasticsearch.index_stats.primaries.segments.term_vectors_memory_in_bytes 索引主分片 term vectors 占用的内存大小（字节）   payload.elasticsearch.index_stats.primaries.segments.terms_memory_in_bytes 索引主分片 terms 查询占用的内存大小（字节）   payload.elasticsearch.index_stats.primaries.segments.version_map_memory_in_bytes 索引主分片 version map 占用的内存大小（字节）   payload.elasticsearch.index_stats.primaries.store.reserved_in_bytes 索引主分片快照恢复预计的大小（字节）   payload.elasticsearch.index_stats.primaries.store.size_in_bytes 索引主分片存储大小（字节）   payload.elasticsearch.index_stats.primaries.store.total_data_set_size_in_bytes 索引主分片数据集的总大小（字节）   payload.elasticsearch.index_stats.primaries.translog.earliest_last_modified_age 索引主分片事务日志最后的修改时间   payload.elasticsearch.index_stats.primaries.translog.operations 索引主分片 translog 操作的数量   payload.elasticsearch.index_stats.primaries.translog.size_in_bytes 索引主分片 translog 的大小（字节）   payload.elasticsearch.index_stats.primaries.translog.uncommitted_operations 索引主分片 translog 中未提交操作的数量   payload.elasticsearch.index_stats.primaries.translog.uncommitted_size_in_bytes 索引主分片 translog 中未提交操作的大小（字节）   payload.elasticsearch.index_stats.primaries.warmer.current 索引主分片正在运行预热的数量   payload.elasticsearch.index_stats.primaries.warmer.total 索引主分片运行预热的总量   payload.elasticsearch.index_stats.primaries.warmer.total_time_in_millis 索引主分片运行预热的总耗时（毫秒）   payload.elasticsearch.index_stats.total.completion.size_in_bytes 索引 completion 缓存大小（字节）   payload.elasticsearch.index_stats.total.docs.count 索引的文档数   payload.elasticsearch.index_stats.total.docs.deleted 索引的删除文档数   payload.elasticsearch.index_stats.total.fielddata.evictions 索引字段数据缓存中清除的数量   payload.elasticsearch.index_stats.total.fielddata.memory_size_in_bytes 索引字段数据缓存大小（字节）   payload.elasticsearch.index_stats.total.flush.periodic 索引 flush 操作定时执行的次数   payload.elasticsearch.index_stats.total.flush.total 索引 flush 操作的总数   payload.elasticsearch.index_stats.total.flush.total_time_in_millis 索引 flush 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.total.get.current 索引当前正在进行 get 操作的次数   payload.elasticsearch.index_stats.total.get.exists_time_in_millis 索引 get 操作成功的总耗时（毫秒）   payload.elasticsearch.index_stats.total.get.exists_total 索引 get 操作成功的总次数   payload.elasticsearch.index_stats.total.get.missing_time_in_millis 索引 get 操作失败的总耗时（毫秒）   payload.elasticsearch.index_stats.total.get.missing_total 索引 get 操作失败的总次数   payload.elasticsearch.index_stats.total.get.time_in_millis 索引 get 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.total.get.total 索引 get 操作的总次数   payload.elasticsearch.index_stats.total.indexing.delete_current 索引当前正在进行删除操作的次数   payload.elasticsearch.index_stats.total.indexing.delete_time_in_millis 索引删除操作的总耗时（毫秒）   payload.elasticsearch.index_stats.total.indexing.delete_total 索引删除操作的总次数   payload.elasticsearch.index_stats.total.indexing.index_current 索引当前正在进行操作的次数   payload.elasticsearch.index_stats.total.indexing.index_failed 索引操作失败的次数   payload.elasticsearch.index_stats.total.indexing.index_time_in_millis 索引操作消耗的时间（毫秒）   payload.elasticsearch.index_stats.total.indexing.index_total 索引操作的总次数   payload.elasticsearch.index_stats.total.indexing.is_throttled 索引操作是否被限流   payload.elasticsearch.index_stats.total.indexing.noop_update_total 索引空更新的次数   payload.elasticsearch.index_stats.total.indexing.throttle_time_in_millis 索引限流操作所花费的时间（毫秒）   payload.elasticsearch.index_stats.total.merges.current 索引正在进行 merge 操作的数量   payload.elasticsearch.index_stats.total.merges.current_docs 索引正在进行 merge 操作的文档数   payload.elasticsearch.index_stats.total.merges.current_size_in_bytes 索引正在进行 merge 操作所占用的内存大小（字节）   payload.elasticsearch.index_stats.total.merges.total 索引 merge 操作的总数   payload.elasticsearch.index_stats.total.merges.total_auto_throttle_in_bytes 索引自动触发限流操作的阈值（字节）   payload.elasticsearch.index_stats.total.merges.total_docs 索引 merge 操作的文档总数   payload.elasticsearch.index_stats.total.merges.total_size_in_bytes 索引 merge 操作的总大小   payload.elasticsearch.index_stats.total.merges.total_stopped_time_in_millis 索引 merge 操作停止的总耗时（毫秒）   payload.elasticsearch.index_stats.total.merges.total_throttled_time_in_millis 索引 merge 操作限流的总耗时（毫秒）   payload.elasticsearch.index_stats.total.merges.total_time_in_millis 索引 merge 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.total.query_cache.cache_count 索引当前查询缓存中的文档数量   payload.elasticsearch.index_stats.total.query_cache.cache_size 索引当前查询缓存中的文档大小   payload.elasticsearch.index_stats.total.query_cache.evictions 索引查询缓存中清除的数量   payload.elasticsearch.index_stats.total.query_cache.hit_count 索引查询缓存命中的次数   payload.elasticsearch.index_stats.total.query_cache.memory_size_in_bytes 索引查询缓存占用的内存大小（字节）   payload.elasticsearch.index_stats.total.query_cache.miss_count 索引查询缓存未命中的次数   payload.elasticsearch.index_stats.total.query_cache.total_count 索引查询缓存的总次数   payload.elasticsearch.index_stats.total.recovery.current_as_source 索引当前作为恢复源的数量   payload.elasticsearch.index_stats.total.recovery.current_as_target 索引当前作为恢复目标的数量   payload.elasticsearch.index_stats.total.recovery.throttle_time_in_millis 索引恢复操作的延迟时长   payload.elasticsearch.index_stats.total.refresh.external_total 索引外部 refresh 操作的总数   payload.elasticsearch.index_stats.total.refresh.external_total_time_in_millis 索引外部 refresh 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.total.refresh.listeners 索引 refresh listeners 的数量   payload.elasticsearch.index_stats.total.refresh.total 索引 refresh 操作的总数   payload.elasticsearch.index_stats.total.refresh.total_time_in_millis 索引 refresh 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.total.request_cache.evictions 索引请求缓存中清除的数量   payload.elasticsearch.index_stats.total.request_cache.hit_count 索引请求缓存的命中数量   payload.elasticsearch.index_stats.total.request_cache.memory_size_in_bytes 索引请求缓存占用的内存大小（字节）   payload.elasticsearch.index_stats.total.request_cache.miss_count 索引请求缓存的未命中数量   payload.elasticsearch.index_stats.total.search.fetch_current 索引当前正在进行 fetch 操作的总数量   payload.elasticsearch.index_stats.total.search.fetch_time_in_millis 索引 fetch 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.total.search.fetch_total 索引 fetch 操作的总数量   payload.elasticsearch.index_stats.total.search.open_contexts 索引打开查询上下文的总数量   payload.elasticsearch.index_stats.total.search.query_current 索引当前正在进行 query 操作的总数量   payload.elasticsearch.index_stats.total.search.query_time_in_millis 索引 query 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.total.search.query_total 索引 query 操作的总数量   payload.elasticsearch.index_stats.total.search.scroll_current 索引当前正在进行 scroll 操作的总数量   payload.elasticsearch.index_stats.total.search.scroll_time_in_millis 索引 scroll 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.total.search.scroll_total 索引 scroll 操作的总数量   payload.elasticsearch.index_stats.total.search.suggest_current 索引当前正在进行 suggest 操作的总数量   payload.elasticsearch.index_stats.total.search.suggest_time_in_millis 索引 suggest 操作的总耗时（毫秒）   payload.elasticsearch.index_stats.total.search.suggest_total 索引 suggest 操作的总数量   payload.elasticsearch.index_stats.total.segments.count 索引 segments 的数量   payload.elasticsearch.index_stats.total.segments.doc_values_memory_in_bytes 索引 doc values 占用的内存大小（字节）   payload.elasticsearch.index_stats.total.segments.file_sizes 有关索引文件大小的统计信息   payload.elasticsearch.index_stats.total.segments.fixed_bit_set_memory_in_bytes 索引 BitSet 占用的内存大小（字节）   payload.elasticsearch.index_stats.total.segments.index_writer_memory_in_bytes 索引 index writer 占用的内存大小（字节）   payload.elasticsearch.index_stats.total.segments.max_unsafe_auto_id_timestamp 索引自动生成 ID 的最新时间戳   payload.elasticsearch.index_stats.total.segments.memory_in_bytes 索引 segments 占用的内存大小（字节）   payload.elasticsearch.index_stats.total.segments.norms_memory_in_bytes 索引 norms 占用的内存大小（字节）   payload.elasticsearch.index_stats.total.segments.points_memory_in_bytes 索引 points 占用的内存大小（字节）   payload.elasticsearch.index_stats.total.segments.stored_fields_memory_in_bytes 索引存储字段占用的内存大小（字节）   payload.elasticsearch.index_stats.total.segments.term_vectors_memory_in_bytes 索引 term vectors 占用的内存大小（字节）   payload.elasticsearch.index_stats.total.segments.terms_memory_in_bytes 索引 terms 查询占用的内存大小（字节）   payload.elasticsearch.index_stats.total.segments.version_map_memory_in_bytes 索引 version map 占用的内存大小（字节）   payload.elasticsearch.index_stats.total.store.reserved_in_bytes 索引快照恢复预计的大小（字节）   payload.elasticsearch.index_stats.total.store.size_in_bytes 索引存储大小（字节）   payload.elasticsearch.index_stats.total.store.total_data_set_size_in_bytes 索引数据集的总大小（字节）   payload.elasticsearch.index_stats.total.translog.earliest_last_modified_age 索引事务日志最后的修改时间   payload.elasticsearch.index_stats.total.translog.operations 索引 translog 操作的数量   payload.elasticsearch.index_stats.total.translog.size_in_bytes 索引 translog 的大小（字节）   payload.elasticsearch.index_stats.total.translog.uncommitted_operations 索引 translog 中未提交操作的数量   payload.elasticsearch.index_stats.total.translog.uncommitted_size_in_bytes 索引 translog 中未提交操作的大小（字节）   payload.elasticsearch.index_stats.total.warmer.current 索引正在运行预热的数量   payload.elasticsearch.index_stats.total.warmer.total 索引运行预热的总量   payload.elasticsearch.index_stats.total.warmer.total_time_in_millis 索引运行预热的总耗时（毫秒）    payload.elasticsearch.node* #     字段名 说明     payload.elasticsearch.node_routing_table 节点路由信息列表   payload.elasticsearch.node_stats.timestamp 节点当前时间戳（毫秒）   payload.elasticsearch.node_stats.name 节点名称   payload.elasticsearch.node_stats.transport_address 节点传输层的主机和端口，用于集群中节点之间的内部通信   payload.elasticsearch.node_stats.host 节点所在的网络主机   payload.elasticsearch.node_stats.ip 节点 IP 地址和端口   payload.elasticsearch.node_stats.roles 节点角色   payload.elasticsearch.node_stats.attributes 节点属性列表   payload.elasticsearch.node_stats.indices.docs.count 节点索引文档数   payload.elasticsearch.node_stats.indices.docs.deleted 节点索引删除的文档数   payload.elasticsearch.node_stats.indices.store.size_in_bytes 节点索引分片的总大小(字节)   payload.elasticsearch.node_stats.indices.store.reserved_in_bytes 预测因正在进行的对等恢复、恢复快照和类似活动，节点上的分片存储最终将增长多少（字节）   payload.elasticsearch.node_stats.indices.indexing.index_total 节点索引操作的总数   payload.elasticsearch.node_stats.indices.indexing.index_time_in_millis 节点执行索引操作所花费的总时间（毫秒）   payload.elasticsearch.node_stats.indices.indexing.index_current 节点当前正在运行的索引操作数   payload.elasticsearch.node_stats.indices.indexing.index_failed 节点索引操作失败的次数   payload.elasticsearch.node_stats.indices.indexing.delete_total 节点索引删除操作的总数   payload.elasticsearch.node_stats.indices.indexing.delete_time 节点执行索引删除操作所花费的时间   payload.elasticsearch.node_stats.indices.indexing.delete_time_in_millis 节点执行索引删除操作花费的时间(毫秒)   payload.elasticsearch.node_stats.indices.indexing.delete_current 节点当前正在运行的删除索引操作数   payload.elasticsearch.node_stats.indices.indexing.noop_update_total 节点索引 noop 操作的总次数   payload.elasticsearch.node_stats.indices.indexing.is_throttled 节点索引是否限制操作   payload.elasticsearch.node_stats.indices.indexing.throttle_time_in_millis 节点索引限制操作的总时间(毫秒)。   payload.elasticsearch.node_stats.indices.get.total 节点索引 get 操作的总次数   payload.elasticsearch.node_stats.indices.get.time_in_millis 节点执行索引 get 操作花费的时间（毫秒）   payload.elasticsearch.node_stats.indices.get.exists_total 节点索引 get 操作成功的总次数   payload.elasticsearch.node_stats.indices.get.exists_time_in_millis 节点索引 get 操作成功花费的时间（毫秒）   payload.elasticsearch.node_stats.indices.get.missing_total 节点索引 get 操作失败的总次数   payload.elasticsearch.node_stats.indices.get.missing_time_in_millis 节点索引 get 操作失败花费的时间（毫秒）   payload.elasticsearch.node_stats.indices.get.current 节点当前正在运行的索引 get 操作数   payload.elasticsearch.node_stats.indices.search.open_contexts 节点索引打开的搜索上下文的数目   payload.elasticsearch.node_stats.indices.search.query_total 节点索引查询操作总数   payload.elasticsearch.node_stats.indices.search.query_time_in_millis 节点索引查询花费的时间（毫秒）   payload.elasticsearch.node_stats.indices.search.query_current 节点当前正在运行的索引查询操作数   payload.elasticsearch.node_stats.indices.search.fetch_total 节点索引读取操作总数   payload.elasticsearch.node_stats.indices.search.fetch_time_in_millis 节点索引读取操作花费的时间（毫秒）   payload.elasticsearch.node_stats.indices.search.fetch_current 节点当前正在运行的索引读取操作数   payload.elasticsearch.node_stats.indices.search.scroll_total 节点索引滚动操作总数   payload.elasticsearch.node_stats.indices.search.scroll_time_in_millis 节点索引滚动操作花费的时间（毫秒）   payload.elasticsearch.node_stats.indices.search.scroll_current 节点当前正在运行的索引滚动操作数   payload.elasticsearch.node_stats.indices.search.suggest_total 节点索引推荐操作总数   payload.elasticsearch.node_stats.indices.search.suggest_time_in_millis 节点索引推荐操作花费的时间（毫秒）   payload.elasticsearch.node_stats.indices.search.suggest_current 节点当前正在运行的索引推荐操作数   payload.elasticsearch.node_stats.indices.merges.current 节点当前正在运行的索引合并操作数   payload.elasticsearch.node_stats.indices.merges.current_docs 节点当前正在运行索引合并的文档数   payload.elasticsearch.node_stats.indices.merges.current_size_in_bytes 节点当前执行索引文档合并的内存（字节）   payload.elasticsearch.node_stats.indices.merges.total 节点索引合并操作总数   payload.elasticsearch.node_stats.indices.merges.total_time_in_millis 节点索引合并操作花费的总时间（毫秒）   payload.elasticsearch.node_stats.indices.merges.total_docs 节点索引合并文档总数   payload.elasticsearch.node_stats.indices.merges.total_size_in_bytes 节点索引合并文档总大小（字节）   payload.elasticsearch.node_stats.indices.merges.total_stopped_time_in_millis 节点停止索引合并操作的总时间（毫秒）   payload.elasticsearch.node_stats.indices.merges.total_throttled_time_in_millis 节点限制索引合并操作的总时间（毫秒）   payload.elasticsearch.node_stats.indices.merges.total_auto_throttle_in_bytes 节点自动节流索引合并操作的大小（字节）   payload.elasticsearch.node_stats.indices.refresh.total 节点索引 refresh 操作总数   payload.elasticsearch.node_stats.indices.refresh.total_time_in_millis 节点索引 refresh 操作花费的总时间（毫秒）   payload.elasticsearch.node_stats.indices.refresh.external_total 节点索引外部 refresh 操作总数   payload.elasticsearch.node_stats.indices.refresh.external_total_time_in_millis 节点索引外部 refresh 操作花费的总时间（毫秒）   payload.elasticsearch.node_stats.indices.refresh.listeners 节点索引 refresh 监听器的数量   payload.elasticsearch.node_stats.indices.flush.total 节点索引 flush 操作总数   payload.elasticsearch.node_stats.indices.flush.periodic 节点索引定时 flush 操作总数   payload.elasticsearch.node_stats.indices.flush.total_time_in_millis 节点索引 flush 操作花费的总时间（毫秒）   payload.elasticsearch.node_stats.indices.warmer.current 节点活跃索引回暖器数量   payload.elasticsearch.node_stats.indices.warmer.total 节点索引回暖器总数   payload.elasticsearch.node_stats.indices.warmer.total_time_in_millis 节点执行索引回暖操作花费的总时间（毫秒）   payload.elasticsearch.node_stats.indices.query_cache.memory_size_in_bytes 节点索引查询缓存的总内存量（字节）   payload.elasticsearch.node_stats.indices.query_cache.total_count 节点索引查询缓存中查询命中、未命中和缓存的总数   payload.elasticsearch.node_stats.indices.query_cache.hit_count 节点索引查询缓存命中数   payload.elasticsearch.node_stats.indices.query_cache.miss_count 节点索引查询缓存未命中数   payload.elasticsearch.node_stats.indices.query_cache.cache_size 节点索引查询缓存大小（字节）   payload.elasticsearch.node_stats.indices.query_cache.cache_count 节点索引查询缓存中查询计数   payload.elasticsearch.node_stats.indices.query_cache.evictions 节点索引查询缓存清除的数量   payload.elasticsearch.node_stats.indices.fielddata.memory_size_in_bytes 节点用于索引字段数据缓存的内存大小（字节）   payload.elasticsearch.node_stats.indices.fielddata.evictions 节点索引字段数据缓存中清除的数量   payload.elasticsearch.node_stats.indices.completion.size_in_bytes 节点用于索引完成的总内存量（字节）   payload.elasticsearch.node_stats.indices.segments.count 节点索引段数量   payload.elasticsearch.node_stats.indices.segments.memory_in_bytes 节点索引段所使用的总内存（字节）   payload.elasticsearch.node_stats.indices.segments.terms_memory_in_bytes 节点用于索引段 terms 的总内存量（字节）   payload.elasticsearch.node_stats.indices.segments.stored_fields_memory_in_bytes 节点用于存储索引字段的总内存量（字节）   payload.elasticsearch.node_stats.indices.segments.term_vectors_memory_in_bytes 节点用于索引段检索词向量的总内存量（字节）   payload.elasticsearch.node_stats.indices.segments.norms_memory_in_bytes 节点用于索引段规范化因子的总内存量（字节）   payload.elasticsearch.node_stats.indices.segments.points_memory_in_bytes 节点用于索引段 points 的总内存量（字节）   payload.elasticsearch.node_stats.indices.segments.doc_values_memory_in_bytes 节点用于存放索引段文档值的总内存量（字节）   payload.elasticsearch.node_stats.indices.segments.index_writer_memory_in_bytes 节点用于索引写入器的总内存量（字节）   payload.elasticsearch.node_stats.indices.segments.version_map_memory_in_bytes 节点用于索引段版本映射的总内存量（字节）   payload.elasticsearch.node_stats.indices.segments.fixed_bit_set_memory_in_bytes 节点用于索引段固定位集的总内存量（字节）   payload.elasticsearch.node_stats.indices.segments.file_sizes 节点有关索引段文件大小的统计信息   payload.elasticsearch.node_stats.indices.translog.operations 节点索引事务日志操作次数   payload.elasticsearch.node_stats.indices.translog.size_in_bytes 节点索引事务日志大小（字节）   payload.elasticsearch.node_stats.indices.translog.uncommitted_operations 节点索引未提交的事务日志操作数   payload.elasticsearch.node_stats.indices.translog.uncommitted_size_in_bytes 节点索引未提交的事务日志大小（字节）   payload.elasticsearch.node_stats.indices.translog.earliest_last_modified_age 节点索引事务日志最后的修改时间   payload.elasticsearch.node_stats.indices.request_cache.memory_size_in_bytes 节点索引请求缓存的内存大小（字节）   payload.elasticsearch.node_stats.indices.request_cache.evictions 节点索引请求缓存操作次数   payload.elasticsearch.node_stats.indices.request_cache.hit_count 节点索引请求缓存命中次数   payload.elasticsearch.node_stats.indices.request_cache.miss_count 节点索引请求缓存未命中次数   payload.elasticsearch.node_stats.indices.recovery.current_as_source 以节点索引分片为源的恢复次数   payload.elasticsearch.node_stats.indices.recovery.current_as_target 以节点索引分片为目标的恢复次数   payload.elasticsearch.node_stats.indices.recovery.throttle_time_in_millis 节点索引由于节流导致恢复操作延迟的时间（毫秒）   payload.elasticsearch.node_stats.os.timestamp 节点系统指标刷新的最新时间戳（毫秒）   payload.elasticsearch.node_stats.os.cpu.percent 节点系统 CPU 使用率   payload.elasticsearch.node_stats.os.cpu.load_average.1m 节点系统 1 分钟平均负载   payload.elasticsearch.node_stats.os.mem.total_in_bytes 节点系统物理内存大小（字节）   payload.elasticsearch.node_stats.os.mem.free_in_bytes 节点系统空闲物理内存大小（字节）   payload.elasticsearch.node_stats.os.mem.used_in_bytes 节点系统已使用物理内存大小（字节）   payload.elasticsearch.node_stats.os.mem.free_percent 节点系统空闲内存百分比   payload.elasticsearch.node_stats.os.mem.used_percent 节点系统已使用内存百分比   payload.elasticsearch.node_stats.os.swap.total_in_bytes 节点系统 swap 大小（字节）   payload.elasticsearch.node_stats.os.swap.free_in_bytes 节点系统空闲 swap 大小（字节）   payload.elasticsearch.node_stats.os.swap.used_in_bytes 节点系统已使用 swap 大小（字节）   payload.elasticsearch.node_stats.process.timestamp 节点进程指标刷新的最新时间戳（毫秒）   payload.elasticsearch.node_stats.process.open_file_descriptors 节点进程打开的文件描述符的数量   payload.elasticsearch.node_stats.process.max_file_descriptors 节点进程可以打开的文件描述符的最大数量   payload.elasticsearch.node_stats.process.cpu.percent 节点进程 CPU 使用率   payload.elasticsearch.node_stats.process.cpu.total_in_millis 节点 Java 虚拟机进程占用的 CPU 时间（毫秒）   payload.elasticsearch.node_stats.process.mem.total_virtual_in_bytes 节点保证进程可以正常运行的虚拟内存大小（字节）   payload.elasticsearch.node_stats.jvm.timestamp 节点 JVM 最新指标刷新时间   payload.elasticsearch.node_stats.jvm.uptime_in_millis 节点 JVM 运行的时间（毫秒）   payload.elasticsearch.node_stats.jvm.mem.heap_used_in_bytes 节点 JVM 堆当前使用的内存大小（字节）   payload.elasticsearch.node_stats.jvm.mem.heap_used_percent 节点 JVM 堆当前使用的内存百分比   payload.elasticsearch.node_stats.jvm.mem.heap_committed_in_bytes 节点 JVM 堆可用的内存大小（字节）   payload.elasticsearch.node_stats.jvm.mem.heap_max_in_bytes 节点 JVM 堆可用的最大内存量（字节）   payload.elasticsearch.node_stats.jvm.mem.non_heap_used_in_bytes 节点 JVM 非堆使用的内存大小（字节）   payload.elasticsearch.node_stats.jvm.mem.non_heap_committed_in_bytes 节点 JVM 非堆可用的内存大小（字节）   payload.elasticsearch.node_stats.jvm.mem.pools.young.used_in_bytes 节点 JVM 年轻代堆已用的内存量（字节）   payload.elasticsearch.node_stats.jvm.mem.pools.young.max_in_bytes 节点 JVM 年轻代堆可用的最大内存量（字节）   payload.elasticsearch.node_stats.jvm.mem.pools.young.peak_used_in_bytes 节点 JVM 年轻代堆历史上使用的最大内存量（字节）   payload.elasticsearch.node_stats.jvm.mem.pools.young.peak_max_in_bytes 节点 JVM 年轻代堆历史上使用的最大内存量（字节）   payload.elasticsearch.node_stats.jvm.mem.pools.survivor.used_in_bytes 节点 JVM 幸存者空间已用的内存量（字节）   payload.elasticsearch.node_stats.jvm.mem.pools.survivor.max_in_bytes 节点 JVM 幸存者空间可用的最大内存量（字节）   payload.elasticsearch.node_stats.jvm.mem.pools.survivor.peak_used_in_bytes 节点 JVM 幸存者空间历史上使用的最大内存量（字节）   payload.elasticsearch.node_stats.jvm.mem.pools.survivor.peak_max_in_bytes 节点 JVM 幸存者空间历史上使用的最大内存量（字节）   payload.elasticsearch.node_stats.jvm.mem.pools.old.used_in_bytes 节点 JVM 老年代堆已用的内存量（字节）   payload.elasticsearch.node_stats.jvm.mem.pools.old.max_in_bytes 节点 JVM 老年代堆可用的最大内存量（字节）   payload.elasticsearch.node_stats.jvm.mem.pools.old.peak_used_in_bytes 节点 JVM 老年代堆历史上使用的最大内存量（字节）   payload.elasticsearch.node_stats.jvm.mem.pools.old.peak_max_in_bytes 节点 JVM 老年代堆历史上使用的最高内存限制（字节）   payload.elasticsearch.node_stats.jvm.threads.count 节点 JVM 正在使用的活跃线程数   payload.elasticsearch.node_stats.jvm.threads.peak_count 节点 JVM 可用的最大线程数   payload.elasticsearch.node_stats.jvm.gc.collectors.young.collection_count 节点收集年轻代对象的 JVM 垃圾收集器数量   payload.elasticsearch.node_stats.jvm.gc.collectors.young.collection_time_in_millis 节点 JVM 收集年轻代对象花费的总时间（毫秒）   payload.elasticsearch.node_stats.jvm.gc.collectors.old.collection_count 节点收集老年代对象的 JVM 垃圾收集器数量   payload.elasticsearch.node_stats.jvm.gc.collectors.old.collection_time_in_millis 节点 JVM 收集老年代对象花费的总时间（毫秒）   payload.elasticsearch.node_stats.jvm.buffer_pools.mapped.count 节点 JVM 映射缓存池数量   payload.elasticsearch.node_stats.jvm.buffer_pools.mapped.used_in_bytes 节点 JVM 映射缓存池大小（字节）   payload.elasticsearch.node_stats.jvm.buffer_pools.mapped.total_capacity_in_bytes 节点 JVM 映射缓存池总量（字节）   payload.elasticsearch.node_stats.jvm.buffer_pools.direct.count 节点 JVM 直接缓存池数量   payload.elasticsearch.node_stats.jvm.buffer_pools.direct.used_in_bytes 节点 JVM 直接缓存池大小（字节）   payload.elasticsearch.node_stats.jvm.buffer_pools.direct.total_capacity_in_bytes 节点 JVM 直接缓存池总量（字节）   payload.elasticsearch.node_stats.jvm.classes.current_loaded_count 节点 JVM 当前加载的类数量   payload.elasticsearch.node_stats.jvm.classes.total_loaded_count 节点从 JVM 启动开始加载类的总数   payload.elasticsearch.node_stats.jvm.classes.total_unloaded_count 节点从 JVM 启动开始未加载类的总数   payload.elasticsearch.node_stats.thread_pool.某线程池.threads 节点某线程池里的线程数   payload.elasticsearch.node_stats.thread_pool.某线程池.queue 节点某线程池队列里的任务数   payload.elasticsearch.node_stats.thread_pool.某线程池.active 节点某线程池里的活跃线程数   payload.elasticsearch.node_stats.thread_pool.某线程池.rejected 节点某线程池执行器拒绝的任务数   payload.elasticsearch.node_stats.thread_pool.某线程池.largest 节点某线程池中活动线程的最大数目   payload.elasticsearch.node_stats.thread_pool.某线程池.completed 节点某线程池执行器完成的任务数   payload.elasticsearch.node_stats.fs.timestamp 节点文件存储统计信息刷新的最新时间（毫秒）   payload.elasticsearch.node_stats.fs.total.total_in_bytes 节点文件存储总量（字节）   payload.elasticsearch.node_stats.fs.total.free_in_bytes 节点文件存储未分配的大小（字节）   payload.elasticsearch.node_stats.fs.total.available_in_bytes 节点 Java 虚拟机在所有文件存储上可用的总量（字节）   payload.elasticsearch.node_stats.fs.data.path 节点某个文件存储路径   payload.elasticsearch.node_stats.fs.data.mount 节点该文件存储挂载点   payload.elasticsearch.node_stats.fs.data.type 节点该文件存储类型   payload.elasticsearch.node_stats.fs.data.total_in_bytes 节点该文件存储总量（字节）   payload.elasticsearch.node_stats.fs.data.free_in_bytes 节点该文件存储未分配的磁盘空间总量（字节）   payload.elasticsearch.node_stats.fs.data.available_in_bytes 节点 Java 虚拟机在该文件存储上可用的总量（字节）   payload.elasticsearch.node_stats.transport.server_open 节点用于内部通信的入方向 TCP 连接数   payload.elasticsearch.node_stats.transport.total_outbound_connections 节点自启动以来已打开的出站传输连接的累积数量   payload.elasticsearch.node_stats.transport.rx_count 集群内部通信时，节点接收到的 RX (receive)报文总数   payload.elasticsearch.node_stats.transport.rx_size_in_bytes 集群内部通信时，节点接收到的 RX (receive)报文大小（字节）   payload.elasticsearch.node_stats.transport.tx_count 集群内部通信时，节点发送的 TX (transmit)报文总数   payload.elasticsearch.node_stats.transport.tx_size_in_bytes 集群内部通信时，节点发送的 TX (transmit)报文大小（字节）   payload.elasticsearch.node_stats.http.current_open 节点当前打开的 HTTP 连接数   payload.elasticsearch.node_stats.http.total_opened 节点打开的 HTTP 连接总数   payload.elasticsearch.node_stats.breakers.某断路器.limit_size_in_bytes 节点某断路器的内存限制（字节）   payload.elasticsearch.node_stats.breakers.某断路器.limit_size 节点某断路器的内存限制   payload.elasticsearch.node_stats.breakers.某断路器.estimated_size_in_bytes 节点某断路器操作预估使用的内存值（字节）   payload.elasticsearch.node_stats.breakers.某断路器.estimated_size 节点某断路器操作预估使用的内存值   payload.elasticsearch.node_stats.breakers.某断路器.overhead 一个常数，某断路器的所有估计值与之相乘以计算最终估计值   payload.elasticsearch.node_stats.breakers.某断路器.tripped 节点某断路器被触发并防止内存不足错误的总次数   payload.elasticsearch.node_stats.script.compilations 节点执行内联脚本编译的总次数   payload.elasticsearch.node_stats.script.cache_evictions 节点脚本缓存清除旧数据的总次数   payload.elasticsearch.node_stats.script.compilation_limit_triggered 节点脚本编译断路器限制内联脚本编译的总次数   payload.elasticsearch.node_stats.discovery.cluster_state_queue.total 节点的集群状态队列里的总数   payload.elasticsearch.node_stats.discovery.cluster_state_queue.pending 节点的集群状态队列里挂起的数量   payload.elasticsearch.node_stats.discovery.cluster_state_queue.committed 节点的集群状态队列里已提交的数量   payload.elasticsearch.node_stats.discovery.published_cluster_states.full_states 节点发布的集群状态数   payload.elasticsearch.node_stats.discovery.published_cluster_states.incompatible_diffs 节点发布的集群状态之间不兼容差异数   payload.elasticsearch.node_stats.discovery.published_cluster_states.compatible_diffs 节点发布的集群状态之间兼容差异数   payload.elasticsearch.node_stats.indexing_pressure.memory.current.combined_coordinating_and_primary_in_bytes 节点当前在协调或主阶段索引请求所消耗的内存（字节）   payload.elasticsearch.node_stats.indexing_pressure.memory.current.coordinating_in_bytes 节点当前在协调阶段索引请求所消耗的内存（字节）   payload.elasticsearch.node_stats.indexing_pressure.memory.current.primary_in_bytes 节点当前在主阶段索引请求所消耗的内存（字节）   payload.elasticsearch.node_stats.indexing_pressure.memory.current.replica_in_bytes 节点当前在复制阶段索引请求所消耗的内存（字节）   payload.elasticsearch.node_stats.indexing_pressure.memory.current.all_in_bytes 节点当前在协调、主或复制阶段索引请求所消耗的内存（字节）   payload.elasticsearch.node_stats.indexing_pressure.memory.total.combined_coordinating_and_primary_in_bytes 节点自启动以来在协调或主阶段索引请求所消耗的内存（字节）   payload.elasticsearch.node_stats.indexing_pressure.memory.total.coordinating_in_bytes 节点自启动以来在协调阶段索引请求所消耗的内存（字节）   payload.elasticsearch.node_stats.indexing_pressure.memory.total.primary_in_bytes 节点自启动以来在主阶段索引请求所消耗的内存（字节）   payload.elasticsearch.node_stats.indexing_pressure.memory.total.replica_in_bytes 节点自启动以来在复制阶段索引请求所消耗的内存（字节）   payload.elasticsearch.node_stats.indexing_pressure.memory.total.all_in_bytes 节点自启动以来在协调、主或复制阶段索引请求所消耗的内存（字节）   payload.elasticsearch.node_stats.indexing_pressure.memory.total.coordinating_rejections 节点自启动以来在协调阶段被拒绝的索引请求数   payload.elasticsearch.node_stats.indexing_pressure.memory.total.primary_rejections 节点自启动以来在主阶段被拒绝的索引请求数   payload.elasticsearch.node_stats.indexing_pressure.memory.total.replica_rejections 节点自启动以来在复制阶段被拒绝的索引请求数   payload.elasticsearch.node_stats.indexing_pressure.memory.limit_in_bytes 节点索引请求的内存限制   payload.elasticsearch.node_stats.shard_info 节点分片信息列表    payload.host #     字段名 说明     payload.host.cpu.idle 主机 CPU idle 占用百分比   payload.host.cpu.iowait 主机 CPU iowait 占用百分比   payload.host.cpu.system 主机 CPU 系统占用百分比   payload.host.cpu.user 主机 CPU 用户占用百分比   payload.host.cpu.used_percent 主机 CPU 已使用百分比   payload.host.cpu.load.load1 主机 CPU 1 分钟负载值   payload.host.cpu.load.load15 主机 CPU 15 分钟负载值   payload.host.cpu.load.load5 主机 CPU 5 分钟负载值   payload.host.diskio.read.bytes 主机磁盘 IO 读取数据量   payload.host.diskio.read.time_in_ms 主机磁盘 IO 读取数据所用时间   payload.host.diskio_summary.read.bytes 主机所有磁盘 IO 读取数据量汇总   payload.host.diskio_summary.read.time_in_ms 主机所有磁盘 IO 读取数据所用时间汇总   payload.host.diskio.write.bytes 主机磁盘 IO 写入数据量   payload.host.diskio.write.time_in_ms 主机磁盘 IO 写入数据所用时间   payload.host.diskio_summary.write.bytes 主机所有磁盘 IO 写入数据量汇总   payload.host.diskio_summary.write.time_in_ms 主机所有磁盘 IO 写入数据所用时间汇总   payload.host.filesystem.mount_point 主机磁盘挂载点（按分区）   payload.host.filesystem.total.bytes 主机磁盘总空间量（按分区）   payload.host.filesystem.used.bytes 主机磁盘空间使用量（按分区）   payload.host.filesystem.used.percent 主机磁盘空间使用百分比（按分区）   payload.host.filesystem.free.bytes 主机磁盘剩余空间（按分区）   payload.host.filesystem_summary.mount_point 主机磁盘挂载点（/）   payload.host.filesystem_summary.total.bytes 主机所有磁盘总空间量汇总   payload.host.filesystem_summary.used.bytes 主机所有磁盘空间使用量汇总   payload.host.filesystem_summary.used.percent 主机所有磁盘空间使用百分比汇总   payload.host.filesystem_summary.free.bytes 主机所有磁盘剩余空间总量   payload.host.memory.available.bytes 主机内存可用量   payload.host.memory.cached.bytes 主机内存 cache 量   payload.host.memory.free.bytes 主机内存空闲量   payload.host.memory.total.bytes 主机内存总量   payload.host.memory.used.bytes 主机内存使用量   payload.host.memory.used.percent 主机内存使用百分比   payload.host.swap.total.bytes 主机 swap 总量   payload.host.swap.used.bytes 主机 swap 使用量   payload.host.swap.used.percent 主机 swap 使用百分比   payload.host.swap.free.bytes 主机 swap 空闲量   payload.host.network.in.bytes 主机网络接口接收的流量   payload.host.network.in.dropped 主机网络接口接收时丢弃的流量   payload.host.network.in.errors 主机网络接口接收时异常的流量   payload.host.network.in.packets 主机网络接口接收包的数量   payload.host.network.name 主机网络接口名   payload.host.network.out.bytes 主机网络接口发送的流量   payload.host.network.out.dropped 主机网络接口发送时丢弃的流量   payload.host.network.out.errors 主机网络接口发送时异常的流量   payload.host.network.out.packets 主机网络接口发送包的数量   payload.host.network_summary.in.bytes 主机网络所有接口接收的流量汇总   payload.host.network_summary.in.dropped 主机网络所有接口接收时丢弃的流量汇总   payload.host.network_summary.in.errors 主机网络所有接口接收时异常的流量汇总   payload.host.network_summary.in.packets 主机网络所有接口接收包的数量汇总   payload.host.network_summary.out.bytes 主机网络所有接口发送的流量汇总   payload.host.network_summary.out.dropped 主机网络所有接口发送时丢弃的流量汇总   payload.host.network_summary.out.errors 主机网络所有接口发送时异常的流量汇总   payload.host.network_summary.out.packets 主机网络所有接口发送包的数量汇总   payload.host.network_sockets.all.connections 主机网络所有 sockets 连接总数   payload.host.network_sockets.all.established 主机网络所有 sockets 已建立连接总数   payload.host.network_sockets.all.listening 主机网络所有 sockets listening 总数   payload.host.network_sockets.all.orphan 主机网络所有 sockets orphan 总数   payload.host.network_sockets.all.udp 主机网络所有 sockets udp 总数   payload.host.network_sockets.memory.tcp 主机网络 tcp sockets 内存使用量   payload.host.network_sockets.memory.udp 主机网络 udp sockets 内存使用量   payload.host.network_sockets.tcp.IPV4/IPV6.connections 主机网络 sockets 连接总数   payload.host.network_sockets.tcp.IPV4/IPV6.established 主机网络 sockets 已建立连接数据   payload.host.network_sockets.tcp.IPV4/IPV6.close_wait 主机网络 sockets close_wait 数   payload.host.network_sockets.tcp.IPV4/IPV6.closing 主机网络 sockets closing 数   payload.host.network_sockets.tcp.IPV4/IPV6.fin_wait1 主机网络 sockets fin_wait1 数   payload.host.network_sockets.tcp.IPV4/IPV6.fin_wait2 主机网络 sockets fin_wait2 数   payload.host.network_sockets.tcp.IPV4/IPV6.last_ack 主机网络 sockets last_ack 数   payload.host.network_sockets.tcp.IPV4/IPV6.listening 主机网络 sockets listening 数   payload.host.network_sockets.tcp.IPV4/IPV6.sync_recv 主机网络 sockets sync_recv 数   payload.host.network_sockets.tcp.IPV4/IPV6.sync_sent 主机网络 sockets sync_sent 数   payload.host.network_sockets.tcp.IPV4/IPV6.time_wait 主机网络 sockets time_wait 数    payload.instance #     字段名 说明     payload.instance.entry.my_es_entry.open_connections 网关客户端连接数   payload.instance.goroutine.任务池名称.blocking blocked 的任务数量（后台任务统计）   payload.instance.goroutine.任务池名称.capacity 任务池的容量   payload.instance.goroutine.任务池名称.running 运行中的任务数量   payload.instance.pool.bytes.名称.acquired 获取 buffer 次数（buffer pool 的统计信息）   payload.instance.pool.bytes.名称.allocated 创建 buffer 次数   payload.instance.pool.bytes.名称.dropped 被丢弃的 buffer 数量   payload.instance.pool.bytes.名称.inuse 被占用的 buffer 数量   payload.instance.pool.bytes.名称.pool_items pool 里的 buffer 数量   payload.instance.pool.bytes.名称.pool_size pool 的 buffer 总大小   payload.instance.pool.bytes.名称.returned 被回收的 buffer 数量   payload.instance.pool.objects.名称.acquired 获取 buffer objects 数量   payload.instance.pool.objects.名称.allocated 创建 buffer objects 数量   payload.instance.pool.objects.名称.returned 被回收的 buffer objects 数量   payload.instance.stats.elasticsearch.bulk.submit bulk_processor.Bulk 调用次数   payload.instance.stats.metrics.save.CATEGORY.NAME metrics.Save 调用次数   payload.instance.stats.queue.队列名.pop 队列 pop 次数   payload.instance.stats.queue.队列名.push 队列 push 次数   payload.instance.system.cgo_calls CGO 调用次数   payload.instance.system.cpu CPU 利用率   payload.instance.system.gc gc 数   payload.instance.system.goroutines goroutines 数   payload.instance.system.mem 实际内存使用量   payload.instance.system.mspan mspan 总大小（heap）   payload.instance.system.objects heap object 数量   payload.instance.system.stack stack 总大小   payload.instance.system.uptime_in_ms 进程运行时间    ","subcategory":null,"summary":"","tags":null,"title":"指标说明","url":"/console/v1.29.3/zh/docs/reference/platform/infini-metrics-fields-description/"},{"category":null,"content":"告警渠道 #  简介 #  告警渠道用于当告警规则触发之后，发送通知消息的通道配置，目前支持 webhook。\n渠道列表 #  在渠道列表中可以查询已经添加的渠道\n新建告警渠道 #  在渠道列表页面中点击 新建 按钮进入新建告警渠道页面\n 输入渠道名称（必填） 选择渠道类型（支持 Email、Slack、钉钉、飞书、企微、自定义 webhook 等多种类型 ） 输入 webhook 地址 选择 HTTP 请求的方法，默认 POST 按需添加 HTTP 请求头 配置 webhook 请求体 点击保存按钮提交  更新渠道配置 #  在渠道列表中选择需要更新的渠道点击编辑按钮进入更新渠道配置页\n操作参考新建告警渠道\n删除告警渠道 #  点击告警渠道列表表格中的删除按钮，进行二次确认，确认删除后执行删除操作。\n","subcategory":null,"summary":"","tags":null,"title":"告警渠道","url":"/console/v1.29.3/zh/docs/reference/alerting/channel/"},{"category":null,"content":"集群管理 #  简介 #  集群管理可以快速方便地帮助我们纳管跨版本的多个 Elasticsearch 集群。\n集群列表 #  在集群列表中可以查询注册的 Elasticsearch 集群\n集群注册 #  第一步填写集群地址，按需开启 TLS 和 身份验证（开启身份验证后需要输入用户名和密码）。\n第二步，信息确认\n 按需修改集群名称，集群描述； 是否开启监控（默认开启），启用监控之后可以在 console 监控功能里面查看 Elasticsearch 集群的各种指标 是否开启 Discovery（推荐开启） , 启用之后 console 会自动发现集群所有节点，当配置的集群地址不可用时，console 会尝试使用自动发现的其他节点中可用的地址和 Elasticsearch 交互  更新集群配置 #  点击集群列表表格中的编辑按钮，进入更新界面\n按需修改配置，然后点击保存按钮提交\n删除集群 #  点击集群列表表格中的删除按钮，进行二次确认，确认删除后执行删除操作。\n","subcategory":null,"summary":"","tags":null,"title":"集群管理","url":"/console/v1.29.3/zh/docs/reference/resource/cluster/"},{"category":null,"content":"集群监控 #  简介 #  当注册的集群开启了监控之后，INFINI Console 会根据相应配置去目标集群定期采集数据， 包括集群、节点、索引层面的一些指标（ 指标字段说明介绍）。然后在集群监控里面可以观测到这些指标，从而了解目标集群的运行状态。\n监控所需 Elasticsearch API 权限清单：\n _cluster/health _cluster/stats _cat/shards _nodes/\u0026lt;node_id\u0026gt;/stats _cat/indices _stats _cluster/state _nodes _alias _cluster/settings  开启集群监控 #  在集群注册或者修改集群配置的时候，可以看到如下界面：\n可以看到有一个 Monitored 的开关，当这个开关打开时，代表当前集群是开启监控的。 集群注册的时候，默认是开启监控的。监控配置里面包括集群健康指标、集群指标、节点指标和索引指标， 并且可以分别设置是否开启和采集时间间隔。\n 以上是对单个集群的设置，在配置文件console.yaml中可以设置对所有集群的监控启停，默认情况下可以看到配置文件中有如下配置：\nmetrics: enabled: true major_ip_pattern: \u0026quot;192.*\u0026quot; queue: metrics elasticsearch: enabled: true cluster_stats: true node_stats: true index_stats: true 如果 metrics\u0026gt;enable 设置为 false, 那么所有的集群监控都是没有开启的； 如果 metrics\u0026gt;elasticsearch\u0026gt;cluster_stats\u0026gt;enabled 设置为 false，那么所有的 集群就不会采集集群层面的相关指标。\n 查看集群指标监控 #  开启监控之后，在 INFINI Console 左侧菜单平台管理下面的监控报表里可以查看集群的监控信息，如下：\n点击高级 tab 页查看集群层面更多的指标；\n如图所示，可以指定一个集群的多个节点查看节点相关指标，横向对比。 默认显示 top 5 的节点指标（ top 5 节点是根据最近 15 分钟节点的查询 qps 和写入 qps 之和计算）。 这里切换到索引 tab 页也可以指定几个查看索引的相关指标，和节点类似。 切换到线程池 tab 页查看节点线程池的相关指标。\n查看集群 TopN 指标 #  TopN 用于快速识别排名前 N 的关键指标数据点。它通过强大的多维度横向指标对比分析能力，帮助用户更高效地进行性能优化与决策分析。\n关于 TopN 具体如何使用，请查看这篇单独的博客： 快速上手 INFINI Console 的 TopN 指标功能\n查看集群日志 #  查看节点指标监控 #  点击节点 tab 页查看集群节点列表。\n列表中点击节点名称查看指定节点的监控。\n这里可以查看单个节点的指标监控信息和相关分片信息。\n查看索引指标监控 #  点击索引 tab 页查看集群索引列表。\n列表中点击索引名称查看指定索引的监控。\n","subcategory":null,"summary":"","tags":null,"title":"集群监控","url":"/console/v1.29.3/zh/docs/reference/platform/monitoring/"},{"category":null,"content":"数据探索 #  简介 #  在数据探索里，可以根据时间、字段等条件对索引或者视图下的数据进行搜索查询。\n搜索工具栏 #  索引(视图) #  搜索语句 #  时间范围 #  字段过滤 #  保存搜索 #  文档详情 #  点击单行文档左侧的 \u0026quot; \u0026gt; \u0026quot; 按钮可展开查看文档的详细信息，并支持 Table 和 JSON 两中方式查看。\n同时可对文档数据进行编辑、删除等操作。\n","subcategory":null,"summary":"","tags":null,"title":"数据探索","url":"/console/v1.29.3/zh/docs/reference/data-insight/discover/"},{"category":null,"content":"常用命令 #  简介 #  常用命令用于在开发工具中将高频使用的 Elasticsearch 请求保存, 这样后续如果需要使用， 只需要在开发工具中使用 LOAD 命令加载，即可快速使用。\n保存常用命令 #  打开 console 右上角的开发工具(Ctrl+shift+o)， 在开发工具中选择需要保存的 Elasticsearch 请求 （支持一次选中多个请求保存为常用命令），选中之后点击工具栏里面的 Save As Command 提交。\n加载常用命令 #  在开发工具里，输入 LOAD + 保存的命令名称关键字 会自动提示相关已保存的常用命令， 选中要加载的命令后，按回车键即可自动加载相应的常用命令。\n常用命令列表 #  在常用命令列表中可以查询已经保存的常用命令\n点击在列表中常用命令名称一栏可以查看常用命令具体信息, 也可以修改名称和 tag 信息\n删除常用命令 #  点击常用命令列表中的删除按钮，进行二次确认，确认之后执行删除操作。\n","subcategory":null,"summary":"","tags":null,"title":"常用命令","url":"/console/v1.29.3/zh/docs/reference/dev-tools/command/"},{"category":null,"content":"告警规则 #  简介 #  告警规则包括数据源，指标定义，触发条件，消息通知四个部分的配置。\n告警规则列表 #  在告警规则列表中可以查询已经添加的告警规则。\n新建告警规则 #  在告警规则列表中点击 新建 按钮进入新建告警规则页面。\n配置数据源 #   选择集群（必选） 选择索引，支持输入索引 pattern （必填） 输入 elasticsearch query DSL 查询过滤条件（可选） 选择时间字段（必选） 选择统计周期（用于时间字段聚合，默认一分钟）  配置告警指标以及触发条件 #   输入规则名称 按需添加分组的字段以及分组大小，可以添加多个，用于 terms 聚合 选择指标聚合字段以及统计类型，可以配置多个，当配置多个时必须配置公式用于计算最终的指标 配置告警触发条件  选择指标数值 选择分桶对比 - 选择基于文档差异数或者内容差异数  文档差异数：相邻两个时间桶内命中文档数量的差值\n内容差异数：相邻两个时间桶内某个分组是否有变化，差异值为 1 表示增加，-1 表示减少，0 表示无变化\n    选择执行检查周期 输入告警事件标题（模版，被模版变量中的 title 引用，点击这里了解 模版语法 ） 输入告警事件消息（模版，被模版变量中的 message 引用，点击这里了解 模版语法 ）  分桶对比是 INFINI Console 1.28.2 版本新增的功能，可以用于检测不同时间段数据的差异，比如检测某个时间段内的数据量是否有异常变化\n   配置消息通知 #   配置通知渠道，可以重新配置，也可以通过添加按钮选择已经创建好的渠道作为模版快速填充，并支持添加多个 按需选择是否开启通知升级 选择沉默周期（通知消息发送频率） 配置通知发送时间段 点击保存按钮提交  更新告警规则 #  在告警规则列表中选择需要更新的告警规则点击编辑按钮进入更新告警规则页\n删除告警规则 #  点击告警规则列表表格中的删除按钮，进行二次确认，确认删除后执行删除操作。\n常见规则模板一键导入 #  下面列举了一些常见告警规则，并且配置钉钉、企业微信、Slack 等通知渠道，仅需要替换模板中指定的自定义变量，即可通过 Console 的 DevTools 工具快速导入规则。\n  Cluster Health Change to Red  Index Health Change to Red  Disk utilization is Too High  CPU utilization is Too High  JVM utilization is Too High  Shard Storage \u0026gt;= 55G  Elasticsearch node left cluster  Search latency is great than 500ms  Too Many Deleted Documents  ","subcategory":null,"summary":"","tags":null,"title":"告警规则","url":"/console/v1.29.3/zh/docs/reference/alerting/rule/"},{"category":null,"content":"别名管理 #  别名列表 #  别名列表包括对别名的增删改查操作。\n新建别名 #   别名：输入别名名称 索引：选择别名对应的目标索引，支持使用 (*) 来绑定多个索引。 是否为写索引：指定选择的索引是否可写，如果别名只绑定一个索引，则默认该索引可写；如果是通过 (*) 绑定多个索引，最需要指定其中一个索引为可写。  别名与索引关系列表 #  点开别名列表行首的+号按钮，会展开显示该别名对应绑定的索引列表，同时可以对索引进行关系绑定更新设置和删除。\n","subcategory":null,"summary":"","tags":null,"title":"别名管理","url":"/console/v1.29.3/zh/docs/reference/data/alias/"},{"category":null,"content":"索引管理 #  索引列表 #  索引列表包括对索引的增删改查操作。\n新建索引 #  输入新索引名称及索引设置即可完成添加。\n索引详情 #  可以查看索引健康状态、分片数、文档数、存储大小等详情，以及 Mappings、Edit settings 的查看和修改。\n","subcategory":null,"summary":"","tags":null,"title":"索引管理","url":"/console/v1.29.3/zh/docs/reference/data/indices/"},{"category":null,"content":"开发工具 #  简介 #  使用开发工具可以快速地编写和执行 Elasticsearch 查询以及其他的 elasticsearch API。 当开启安装验证后，所有的请求都会经过 API 级别权限校验\n打开开发工具 #  使用 Ctrl+Shift+O 快捷键打开或者在 console 右上角图标打开。\n执行请求快捷键 #  Command+Enter 或者 Ctrl+Enter\n多集群多 Tab 页支持 #  开发工具支持使用 Tab 页同时打开多个集群，即使是同一个集群，也可以打开多个，Tab 页之间状态是独立的。 Tab 页默认使用集群名称作为标题，双击 Tab 页标题可以修改。 开发工具下方是一个状态栏，左侧是当前集群的健康状态、http 地址、版本信息， 右侧是 elasticsearch 接口请求的响应状态以及时长。\n查看请求头信息 #  当使用开发工具执行 elasticsearch 请求之后，可以在右侧点击 headers Tab 页查看请求头信息。\n","subcategory":null,"summary":"","tags":null,"title":"开发工具","url":"/console/v1.29.3/zh/docs/reference/dev-tools/dev-tools/"},{"category":null,"content":"平台概览 #  简介 #  在平台概览里，可以查看集群、节点、索引的主要指标，了解各层面的运行状态。\n集群 #  通过列表和卡片两种切换模式，多角度展示集群状态信息。\n1. 列表模式 #  2. 卡片模式 #  点击单行可快速预览集群主要指标以及查看更多集群信息。\n节点 #  索引 #  ","subcategory":null,"summary":"","tags":null,"title":"平台概览","url":"/console/v1.29.3/zh/docs/reference/platform/overview/"},{"category":null,"content":"告警中心 #  简介 #  消息中心默认展示的是当前系统内正在发生的告警事件，方便管理人员快速预览系统的执行状态。\n事件消息列表 #  消息列表聚合了所有已触发的告警事件，如每个告警规则重复触发了多次告警消息，这里只会聚合显示一条，点击详情就可以去看更多的信息。\n消息详情 #  点击消息列表行列中的详情按钮可以查看当前告警事件消息的详细内容，包含事件消息的基本信息，事件触发周期内的时序曲线图，规则执行检测历史记录等，如下图所示：\n忽略告警消息 #  如认为告警事件不需要做处理或者不重要，可以进行忽略操作，忽略后告警消息将不默认展在消息列表中，不过可以通过状态筛选过滤进行查询。\n操作步骤：点击消息列表表格中的忽略按钮，进行二次确认，填写忽略原因，提交后执行忽略操作。\n","subcategory":null,"summary":"","tags":null,"title":"告警中心","url":"/console/v1.29.3/zh/docs/reference/alerting/message/"},{"category":null,"content":"Runtime 管理 #  简介 #  Runtime 管理可以快速方便地帮助我们纳管多个运行时实例（gateway、console、agent 等）。\n实例列表 #  在列表中可以查询创建的实例\n创建实例 #  第一步填写实例地址，按需开启 TLS 和 身份验证（开启身份验证后需要输入用户名和密码）。\n第二步，信息确认，按需修改实例名称，标签，描述。\n更新实例配置 #  点击实例列表行中的编辑按钮，进入编辑界面\n按需修改配置，然后点击保存按钮提交\n删除实例 #  点击实例列表行中的删除按钮，进行二次确认，确认删除后将执行删除操作。\n","subcategory":null,"summary":"","tags":null,"title":"Runtime 管理","url":"/console/v1.29.3/zh/docs/reference/resource/runtime/"}]