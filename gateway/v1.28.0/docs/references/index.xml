<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>References on INFINI Gateway</title><link>/gateway/v1.28.0/docs/references/</link><description>Recent content in References on INFINI Gateway</description><generator>Hugo -- gohugo.io</generator><atom:link href="/gateway/v1.28.0/docs/references/index.xml" rel="self" type="application/rss+xml"/><item><title>Service Entry</title><link>/gateway/v1.28.0/docs/references/entry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gateway/v1.28.0/docs/references/entry/</guid><description>Service Entry # Defining an Entry # Each gateway must expose at least one service entrance to receive operation requests of services. In INFINI Gateway, the service entrance is called an entry, which can be defined using the following parameters:
entry: - name: es_gateway enabled: true router: default network: binding: 0.0.0.0:8000 reuse_port: true tls: enabled: false The network.binding parameter can be used to specify the IP address and port to be bound and listened to after the service is started.</description></item><item><title>Service Router</title><link>/gateway/v1.28.0/docs/references/router/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gateway/v1.28.0/docs/references/router/</guid><description>Service Router # INFINI Gateway judges the flow direction based on routers. A typical example of router configuration is as follows:
router: - name: my_router default_flow: default_flow tracing_flow: request_logging rules: - method: - PUT - POST pattern: - &amp;quot;/_bulk&amp;quot; - &amp;quot;/{index_name}/_bulk&amp;quot; flow: - bulk_process_flow Router involves several important terms:
Flow: Handling flow of a request. Flows can be defined in three places in a router. default_flow: Default handling flow, which is the main flow of service handling.</description></item><item><title>Handling Flow</title><link>/gateway/v1.28.0/docs/references/flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gateway/v1.28.0/docs/references/flow/</guid><description>Handling Flow # Flow Definition # Requests received by each gateway are handled through a series of processes and then results are returned to the client. A process is called a flow in INFINI Gateway. See the following example.
flow: - name: hello_world filter: - echo: message: &amp;quot;hello gateway\n&amp;quot; repeat: 1 - name: not_found filter: - echo: message: '404 not found\n' repeat: 1 The above example defines two flows: hello_world and not_found.</description></item><item><title>Elasticsearch</title><link>/gateway/v1.28.0/docs/references/elasticsearch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gateway/v1.28.0/docs/references/elasticsearch/</guid><description>Elasticsearch # Defining a Resource # INFINI Gateway supports multi-cluster access and different versions. Each cluster serves as one Elasticsearch back-end resource and can be subsequently used by INFINI Gateway in multiple locations. See the following example.
elasticsearch: - name: local enabled: true endpoint: https://127.0.0.1:9200 - name: dev enabled: true endpoint: https://192.168.3.98:9200 basic_auth: username: elastic password: pass - name: prod enabled: true endpoint: http://192.168.3.201:9200 discovery: enabled: true refresh: enabled: true interval: 10s basic_auth: username: elastic password: pass The above example defines a local development test cluster named local and a development cluster named dev.</description></item><item><title>Request Context</title><link>/gateway/v1.28.0/docs/references/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gateway/v1.28.0/docs/references/context/</guid><description>Request Context # What Is Context # Context is the entry for INFINI Gateway to access relevant information in the current running environment, such as the request source and configuration. You can use the _ctx keyword to access relevant fields, for example, _ctx.request.uri, which indicates the requested URL.
Embedded Request Context # The embedded _ctx context objects of an HTTP request mainly include the following:
Name Type Description id uint64 Unique ID of the request tls bool Whether the request is a TLS request remote_ip string Source IP of the client remote_addr string Source IP address of the client, including port local_ip string Gateway local IP address local_addr string Gateway local IP address, including port elapsed int64 Time that the request has been executed (ms) request.</description></item><item><title>Other Configurations</title><link>/gateway/v1.28.0/docs/references/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gateway/v1.28.0/docs/references/config/</guid><description>Other Configurations # Advanced Usage # Templates # Example:
configs.template: - name: &amp;quot;es_gw1&amp;quot; path: ./sample-configs/config_template.tpl variable: name: &amp;quot;es_gw1&amp;quot; binding_host: &amp;quot;0.0.0.0:8000&amp;quot; tls_on_entry: true elasticsearch_endpoint: &amp;quot;http://localhost:9200&amp;quot; Name Type Description configs.template array Configuration templates, can specify multiple templates with corresponding parameters configs.template[].name string Name of the configuration configs.template[].path string Template configuration path configs.template[].variable map Template parameter settings, variables in the template are used as $[[variable_name]] Environment Variables # The Gateway supports the use of environment variables for flexible parameter control within the configuration.</description></item></channel></rss>