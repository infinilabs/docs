<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>功能手册 on INFINI Gateway</title><link>/gateway/v1.28.2/zh/docs/references/</link><description>Recent content in 功能手册 on INFINI Gateway</description><generator>Hugo -- gohugo.io</generator><atom:link href="/gateway/v1.28.2/zh/docs/references/index.xml" rel="self" type="application/rss+xml"/><item><title>服务入口</title><link>/gateway/v1.28.2/zh/docs/references/entry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gateway/v1.28.2/zh/docs/references/entry/</guid><description>服务入口 # 定义入口 # 每一个网关都至少要对外暴露一个服务的入口，用来接收业务的操作请求，这个在极限网关里面叫做 entry，通过下面的参数即可定义：
entry: - name: es_gateway enabled: true router: default network: binding: 0.0.0.0:8000 reuse_port: true tls: enabled: false 通过参数 network.binding 可以指定服务监听的 IP 和地址，极限网关支持端口重用，也就是多个极限网关共享一个相同的 IP 和端口，这样可以充分利用服务器的资源， 也能做到不同网关进程的动态配置修改（通过开启多个进程，修改配置之后，依次重启各个进程）而不会中断客户端的正常请求。
每个发送到 entry 的请求都会通过 router 来进行流量的路由处理，router 在单独的地方定义规则，以方便在不同的 entry 间复用，entry 只需要通过 router 参数指定要使用的 router 规则即可，这里定义的是 default。
TLS 配置 # 极限网关支持无缝开启 TLS 传输加密，只需要将 tls.enabled 设置成 true，即可直接切换为 HTTPS 的通信模式，极限网关能自动生成自签证书。
极限网关也支持自定义证书路径，配置方式如下：
entry: - name: es_gateway enabled: true router: default network: binding: 0.0.0.0:8000 reuse_port: true tls: enabled: true cert_file: /etc/ssl.</description></item><item><title>服务路由</title><link>/gateway/v1.28.2/zh/docs/references/router/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gateway/v1.28.2/zh/docs/references/router/</guid><description>服务路由 # 极限网关通过路由来判断流量的去向，一个典型的路由配置示例如下：
router: - name: my_router default_flow: default_flow tracing_flow: request_logging rules: - method: - PUT - POST pattern: - &amp;quot;/_bulk&amp;quot; - &amp;quot;/{index_name}/_bulk&amp;quot; flow: - bulk_process_flow 路由有几个非常重要的概念：
flow：请求的处理流程，一个路由里面有三个地方定义 flow default_flow: 默认的处理流，也就是业务处理的主流程，请求转发、过滤、缓存等操作都在这里面进行 tracing_flow：用于追踪请求状态的流，不受 default_flow 的影响，用于记录请求日志、统计等 rules：根据匹配规则将请求分发到特定的处理流中去，支持请求的 Method、Path 的正则匹配 参数说明 # 名称 类型 说明 name string 路由名称 default_flow string 默认的请求的处理流程名称 tracing_flow string 用于追踪请求的处理流程名称 rules array 路由规则列表，按照数组的先后顺序依次应用 rules.</description></item><item><title>处理流程</title><link>/gateway/v1.28.2/zh/docs/references/flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gateway/v1.28.2/zh/docs/references/flow/</guid><description>处理流程 # 流程定义 # 每一个网关接收到的请求都会通过一系列的流程处理，最后才返回给客户端，流程的定义在极限网关里面叫做 flow，以下面的这个例子为例：
flow: - name: hello_world filter: - echo: message: &amp;quot;hello gateway\n&amp;quot; repeat: 1 - name: not_found filter: - echo: message: '404 not found\n' repeat: 1 上面的例子定义了两个 flow hello_world 和 not_found， 每个 flow 都使用了一个名为 echo 的过滤器，用来输出一段字符串，每个 flow 下面可以定义一系列 filter，他们按照定义的顺序依次执行。
语法说明 # 极限网关采用约定的格式来定义流程，并且支持灵活的条件参数来进行逻辑判断，具体的格式定义如下：
flow: - name: &amp;lt;flow_name&amp;gt; filter: - &amp;lt;filter_name&amp;gt;: when: &amp;lt;condition&amp;gt; &amp;lt;parameters&amp;gt; - &amp;lt;filter_name&amp;gt;: when: &amp;lt;condition&amp;gt; &amp;lt;parameters&amp;gt; ... 上面的 filter_name 代表具体的某个过滤器名称，用来执行特定的任务，when 下面的 condition 用来定义特定的满足执行该任务的条件参数，不满足条件的情况下会跳过该过滤器任务的执行，parameters 里面设置的该过滤器相关的参数，如果多个参数依次换行即可。</description></item><item><title>Elasticsearch</title><link>/gateway/v1.28.2/zh/docs/references/elasticsearch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gateway/v1.28.2/zh/docs/references/elasticsearch/</guid><description>Elasticsearch # 定义资源 # 极限网关支持多集群的访问，支持不同的版本，每个集群作为一个 Elasticsearch 后端资源，可以后续被极限网关的多个地方使用，以下面的这个例子为例：
elasticsearch: - name: local enabled: true endpoint: https://127.0.0.1:9200 - name: dev enabled: true endpoint: https://192.168.3.98:9200 basic_auth: username: elastic password: pass - name: prod enabled: true endpoint: http://192.168.3.201:9200 discovery: enabled: true refresh: enabled: true interval: 10s basic_auth: username: elastic password: pass 上面的例子定义了一个名为 local 的本地开发测试集群，和一个名为 dev 的开发集群。开发集群开启了身份验证，这里也定义了相应的用户名和密码。 最后还定义了一个名为 prod 的生产集群，并且通过参数 discovery 开启了集群的节点拓扑自动发现和更新。
参数说明 # 名称 类型 说明 name string Elasticsearch 集群名称 project string 项目名称 location.</description></item><item><title>请求上下文</title><link>/gateway/v1.28.2/zh/docs/references/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gateway/v1.28.2/zh/docs/references/context/</guid><description>请求上下文 # 什么是上下文 # 上下文是极限网关用来访问当前运行环境下相关信息的入口，如请求的来源和配置信息等等，使用关键字 _ctx 即可访问相应的字段，如：_ctx.request.uri 表示请求的 URL 地址。
内置请求上下文 # HTTP 请求内置的 _ctx 上下文对象主要包括如下：
名称 类型 说明 id uint64 请求的唯一 ID tls bool 表示请求是否 TLS remote_ip string 客户端来源 IP remote_addr string 客户端来源地址，包含端口 local_ip string 网关本地 IP local_addr string 网关本地地址，包含端口 elapsed int64 请求已执行时间（毫秒） request.* object 描述请求信息 response.</description></item><item><title>其它配置</title><link>/gateway/v1.28.2/zh/docs/references/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gateway/v1.28.2/zh/docs/references/config/</guid><description>其它配置 # 高级用法 # 配置模板 # 示例：
configs.template: - name: &amp;quot;es_gw1&amp;quot; path: ./sample-configs/config_template.tpl variable: name: &amp;quot;es_gw1&amp;quot; binding_host: &amp;quot;0.0.0.0:8000&amp;quot; tls_on_entry: true elasticsearch_endpoint: &amp;quot;http://localhost:9200&amp;quot; 名称 类型 说明 configs.template array 配置模板，可以指定多个模板和对应的参数 configs.template[].name string 配置的名称 configs.template[].path string 模板配置路径 configs.template[].variable map 模板的参数设置，变量在模板里面的用法：$[[变量名]] 使用环境变量 # 极限网关支持在配置里面使用环境变量来进行灵活的参数控制。
首先在配置里面定义环境变量的默认值，如下：
env: PROD_ES_ENDPOINT: http://localhost:9200 PROD_ES_USER: elastic PROD_ES_PASS: password 然后就可以在配置里面通过如下语法来使用环境变量了：
elasticsearch: - name: prod enabled: true endpoints: - $[[env.</description></item></channel></rss>